-- ===============================================================
-- ================ Property Specification =======================
-- ===============================================================

-- ===============================================================
-- a convention for commenting
-- "-- comment" is used before the CafeOBJ code
-- "** comment" is used after the CafeOBJ code
-- ===============================================================

-- ===============================================================
-- requiring module QLOCKsys in file qlock-sys.cafe
require QLOCKsys qlock-sys.cafe

-- ===============================================================
-- for defining state functions and predicates we need
-- Peano Style Natural Numbers with _+_ and _>_
mod! PNAT {
  [PNat]
  op 0 : -> PNat {constr} .
  op s_ : PNat -> PNat {constr} .
 -- equality over the natural numbers
  eq (0 = s(Y:PNat)) = false .
  eq (s(X:PNat) = s(Y:PNat)) = (X = Y) .
  eq (s(X:PNat) = X) = false .
  -- associative and commutative _+_
  [PNat]
  op _+_ : PNat PNat -> PNat {assoc comm} .
  eq 0 + Y:PNat = Y .
  eq (s X:PNat) + Y:PNat = s(X + Y) .
  -- strict greater than
  op _>_ : PNat PNat -> Bool .
  eq (s X:PNat) > (s Y:PNat) = X > Y .
  eq (s X:PNat) > 0 = true .
  eq 0 > (s Y:PNat) = false .
  eq X:PNat > X = false .
--
  eq (s X:PNat) > X = true .
  eq X:PNat > (s X) = false .
}

mod* AID-QUEUE-a {ex(AID-QUEUE)
-- head
op hd_ : Qu -> Aid .
eq hd(E:Aid & Q:Qu) = E .
** hd(empQ):Aid indicates an error element
** and no equations for it; an error handling method
-- tail
op tl_ : Qu -> Qu .
eq tl(E:Aid & Q:Qu) = Q .
** tl(empQ):Qu indicates an error queue
** and no equations for it; an error handling method
}

** ===============================================================
-- elementary functions on states
mod! STATEfuns {ex(STATE + PNAT)
-- the queue in a state
op qu : State -> Qu .
eq qu(Q:Qu $ AS:Aobs) = Q .
-- the agent observations in a state
op aos : State -> Aobs .
eq aos(Q:Qu $ AS:Aobs) = AS .
-- length of Aobs
op #laos : Aobs -> PNat .
eq #laos(empty) = 0 .
eq #laos(A:Aob AS:Aobs) = (s 0) + #laos(AS) .
-- the number of a label in a Aobs
op #lss : Aobs Label -> PNat .
eq #lss(empty,L:Label) = 0 .
eq #lss(((lb[A:Aid]: L1:Label) AS:Aobs),L2:Label) =
   if (L1 = L2) then (s 0) + #lss((AS),L2)
   else #lss((AS),L2) fi .
-- the number of a label in a state
op #ls : State Label -> PNat .
eq #ls(S:State,L:Label) = #lss(aos(S),L) .
-- the number of an aid in a Aobs
op #ass : Aobs Aid -> PNat .
eq #ass(empty,A:Aid) = 0 .
eq #ass(((lb[A1:Aid]: L:Label) AS:Aobs),A2:Aid) =
   if (A1 = A2) then (s 0) + #ass((AS),A2)
   else #ass((AS),A2) fi .
-- the number of an aid in a state
op #as : State Aid -> PNat .
eq #as(S:State,A:Aid) = #ass(aos(S),A) .
-- the number of an aid in a queue
op #aq : Qu Aid -> PNat .
eq #aq(empQ,A:Aid) = 0 .
eq #aq(A1:Aid & Q:Qu,A2:Aid) =
   if (A1 = A2) then (s 0) + #aq(Q,A2) else #aq(Q,A2) fi .
-- label of an agent in a Aobs
op laga : Aobs Aid -> Label .
eq laga(((lb[A1:Aid]: L:Label) AS:Aobs),A2:Aid) =
   if (A1 = A2) then L else laga((AS),A2) fi .
-- label of an agent in a State
op lags : State Aid -> Label .
eq lags(S:State,A:Aid) = laga(aos(S),A) .
}

-- ===============================================================
-- names of predicates on states
-- and conjunctions of the predicates
mod! PNAMEcj {pr(STATE)
-- names of predicates on States Pname
-- and sequences of them PnameSeq
[Pname < PnameSeq]
** an element of Pname is an element of PnameSeq
-- associative binary operator for constructing
-- sequences of (elements of) Pname
op (_ _) : PnameSeq PnameSeq -> PnameSeq {assoc} .
** "pn_1 pn_2 ... pn_k" is a sequence of (elements of) Pname
** if pn_1, pn_2, ... pn_k are elements of Pname
-- conjunction of predicates defined by (an element of) PnameSeq
op cj : PnameSeq State -> Bool .
eq cj((PN:Pname PNS:PnameSeq),S:State) = cj(PN,S) and cj(PNS,S) .
** cj((pn_1, pn_2, ... pn_k),s)
**   = cj(pn_1,s) and cj(pn_2,s) and ... cj(pn_k,s) .
}

-- ===============================================================
-- predicates on states for well formed states and intitial states
mod! STATEpred-init {pr(STATEfuns) inc(PNAMEcj)
-- at least one agent in a state
op aoa : -> Pname .
eq[aoa]: cj(aoa,S:State) = (#laos(aos(S)) > 0) .
-- no duplication of an Aid in a Aobs
op 1as : Aobs -> Bool .
eq 1as(empty) = true .
eq 1as((lb[A:Aid]: L:Label) AS:Aobs) =
   (#ass((AS),A) = 0) and 1as(AS) .
-- no duplication of an Aid in a state
op 1a : -> Pname .
eq[1a]: cj(1a,S:State) = 1as(aos(S)) .
-- well formed states
op wfs : -> Pname .
eq[wfs]: wfs = aoa 1a .
-- the queue is empty
op qe : -> Pname .
eq[qe]: cj(qe,S:State) = (qu(S) = empQ) .
-- any Aid is in rs status, i.e. no ws, no cs
op allRs : -> Pname .
eq[allRs]: cj(allRs,S:State) = (#ls(S,ws)= 0) and (#ls(S,cs)= 0) .
}

-- ===============================================================
-- an initial state predicate
mod! INIT {pr(STATEpred-init)
op init : -> PnameSeq .
eq init = wfs qe allRs .
-- initial state predicate
pred init : State .
eq init(S:State) = cj(init,S) .
}

-- ===============================================================
-- predicates on states for an inductive invariant predicate
mod! STATEpred-inv {ex(STATEpred-init + AID-QUEUE-a)
-- mutual exclusion property: at most one agent is with cs
-- this is the goal predicate
op mx : -> Pname .
eq[mx]: cj(mx,S:State) = (#ls(S,cs) = 0) or (#ls(S,cs) = (s 0)) .
pred mx : State .
eq mx(S:State) = cj(mx,S) .
-- several fragment predicates for an inductive invariant
ops qep rs ws cs : -> Pname .
-- if queue is empty
eq[qep]: cj(qep,(Q:Qu $ ((lb[A:Aid]: L:Label) AS:Aobs)))
         = ((Q = empQ) implies
            (#lss(((lb[A]: L) AS),cs) = 0)) .
-- if agent is in rs
eq [:m-and rs] : cj(rs,(Q:Qu $ ((lb[A:Aid]: L:Label) AS:Aobs)))
        = ((L = rs) implies (#aq(Q,A) = 0)) .
** "eq[:m-and ...]: l = r ." indicates that
** (1) left hand side l and right hand side r of the equation
**     are of sort Bool
** (2) if there are multiple matches m_1,...,m_k (k = 2,3,...)
**     (i.e. m_i is a map from variables to terms)
**     in matching the left hand side l to a term t,
**     the equation "l = r" is instantiated to
**     "t = m_1(r) and-also m_2(r) and-also ... and-also m_k(r)".
** Hence, applying above "eq[:m-and rs]... .",
**   "cj(rs,(q $ ((lb[a1]: l1) (lb[a2]: l2) as)))
**    = ((l1 = rs) implies (#aq(q,a1) = 0))  and-also
**      ((l2 = rs) implies (#aq(q,a2) = 0)) ."
** where
**  "((l1 = rs) implies (#aq(q,a1) = 0))" is gotten
**  with match {Q->q,A->a1,L->l1,AS->((lb[a2]: l2) as)} and
**  "((l2 = rs) implies (#aq(q,a2) = 0))" is gotten
**  with match {Q->q,A->a2,L->l2,AS->((lb[a1]: l1) as)}.
-- if agent is in ws
eq[:m-and ws]: cj(ws,(Q:Qu $ ((lb[A:Aid]: L:Label) AS:Aobs)))
        = ((L = ws) implies
           ((#aq(Q,A) = (s 0)) and
            ((A = hd(Q)) implies (#lss((AS),cs) = 0)))) .
-- if agent is in cs
eq[:m-and cs]: cj(cs,(Q:Qu $ ((lb[A:Aid]: L:Label) AS:Aobs)))
        = ((L = cs) implies ((A = hd(Q)) and
                             (#aq(tl(Q),A) = 0) and
                             (#lss((AS),cs) = 0))) .
-- if cs then it should be the top of the queue
op cst : -> Pname .
eq[cst]: cj(cst,(Q:Qu $ AS:Aobs))
        = ((#lss(AS,cs) > 0) and not(Q = empQ))
           implies (lags((Q:Qu $ AS:Aobs),hd(Q)) = cs) .
}

-- ===============================================================
-- a possible inductive invariant predicate
mod! INV {pr(STATEpred-inv)
op inv : -> PnameSeq .
eq inv = wfs mx qep rs ws cs cst .
pred inv : State .
eq inv(S:State) = cj(inv,S) .
}

-- ===============================================================
-- property specification of QLOCK
mod! QLOCKprop{pr(INIT + INV)}
-- ===============================================================

-- ===============================================================
-- The following two modules are for verifying
-- a (p leads-to q) property,
-- i.e. for the proof scores in file qlock-pqp-ps.cafe.
-- ===============================================================

-- ===============================================================
-- enhancing Peano Style Natural Numbers
-- for defining module STATEfuns-a
mod! PNAT-a {pr(PNAT)
  -- associative and commutative _*_
  op _*_ : PNat PNat -> PNat {assoc comm} .
  eq 0 * Y:PNat = 0 .
  eq (s X:PNat) * Y:PNat = Y + (X * Y) .
}

-- ===============================================================
-- enhanced elementary functions on states
-- for verifying a (p leads-to q) property
mod! STATEfuns-a {pr(STATEfuns + PNAT-a)
-- the depth of the first appearence of an aid in a queue
op #daq : Qu Aid -> PNat .
eq #daq(A1:Aid & Q:Qu,A2:Aid) =
   if (A1 = A2) then 0 else s(#daq(Q,A2)) fi .

-- counter count of cs
op #ccs : State -> PNat .
eq #ccs(S:State) = if (#ls(S,cs) > 0) then 0 else (s 0) fi .
-- decreasing PNat measure for the lockout freedom verification
op #dms : State Aid -> PNat .
eq #dms(S:State,A:Aid) = ((s s s 0) * #daq(qu(S),A))
                          + #ls(S,rs) + #ccs(S) .
-- the transition:
-- (((b1 & q) $ (((lb [ b22 ] : ws) (lb [ b1 ] : cs)) as1)) ->
--         (q $ ((lb [ b1 ] : rs) ((lb [ b22 ] : ws) as1)))
-- increases (#ls(_,rs) + #ccs(_)) by (s s 0)
-- decreases #daq(qu(_),b22)) by (s 0)
-- so we need ((s s s 0) * (s 0) = (s s s 0))
-- for proper decrease of #dms(_,b22)
}

-- ===============================================================
provide QLOCKprop
provide STATEfuns-a
-- ===============================================================
