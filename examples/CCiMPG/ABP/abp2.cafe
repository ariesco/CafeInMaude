mod! BIT principal-sort Bit {
  [Bit]
  ops 0 1 : -> Bit {constr}
  op compl : Bit -> Bit
  eq compl(0) = 1 .
  eq compl(1) = 0 .
  eq (0 = 1) = false .
--
-- Lemmas
--
  vars B1 B2 : Bit
  ceq (compl(B1) = B2) = true if not (B1 = B2) .
  eq (compl(B1) = B1) = false .
}

mod! PACKET principal-sort Packet {
  [Packet]
  op p0 : -> Packet {constr}
  op p : Packet -> Packet {constr}
  vars P P2 : Packet
  eq (p0 = p(P)) = false .
  eq (p(P) = p(P2)) = (P = P2) .
}

mod! PAIR(FE :: TRIV,SE :: TRIV) {
  [Pair]
  op <_,_> : Elt.FE Elt.SE -> Pair {constr}
  op 1st : Pair -> Elt.FE
  op 2nd : Pair -> Elt.SE
  vars FE1 FE2 : Elt.FE
  vars SE1 SE2 : Elt.SE
  eq (< FE1,SE1 > = < FE2,SE2 >)
    = (FE1 = FE2 and SE1 = SE2) {owise} .
  eq 1st(< FE1,SE1 >) = FE1 .
  eq 2nd(< FE1,SE1 >) = SE1 .
--
-- Lemmas
--
  vars P1 P2 : Pair
  -- ceq (P1 = P2) = true if 1st(P1) = 1st(P2) and 2nd(P1) = 2nd(P2) .
}

mod! PBPAIR principal-sort PBPair {
  pr(PAIR(PACKET,BIT) * {sort Pair -> PBPair})
}

mod! SEQ(E :: TRIV) {
  [Elt.E < Seq]
  op e : -> Seq {constr}
  op _,_ : Seq Seq -> Seq {constr assoc id: e}
  op isEmp : Seq -> Bool
  op hd : Seq -> Elt.E
  op tl : Seq -> Seq
  op _\in_ : Elt.E Seq -> Bool
  vars E1 E2 E3 E4 E5 E6 : Elt.E
  vars S1 S2 S3 S4 : Seq
  eq (e = E1,S1) = false .
  eq (E1 = E3,E4,S2) = false .
  eq (E1,E2,S1 = E3,E4,S2) = (E1 = E3 and E2 = E4 and S1 = S2) .
  eq isEmp(e) = true .
  eq isEmp(E1,S1) = false .
  eq hd(E1,S1) = E1 .
  eq tl(E1,S1) = S1 .
  eq E1 \in e = false .
  eq E1 \in E2,S1 = (E1 = E2 or E1 \in S1) .
--
-- LEMMAS
--
  ceq E1 \in S1,E2 = E1 \in S1 if not (E1 = E2) .
  eq E1 \in S1,E1,E2,S2 = true .
  eq E1 \in S1,E1 = true .
  eq (e = S1,E1,E2,S2) = false .
  eq (S1,E1,E2 = S1,E1,E2,E3,S2) = false .
  ceq (S1,E1,E2 = S1,E1,E3,S2) = false if not (E2 = E3) .
  ceq (S1,E1 = S2,E2,E3) = false if not (S1 = S2,E2) .
  eq (S1,E1,E2,S2,E3 = S1,E1,E2,S2,E4) = (E3 = E4) .
  ceq (S1,E1 = S2,E2,E3,S3,E4) = false if not (S1 = S2,E2,E3,S3) .
  eq (E1,E1,S1 = E1,S2,E2,E3,S3) = (E1,S1 = S2,E2,E3,S3) .
  ceq (E1,E1,S1 = E2,S2,E3,E4,S3) = false if not (E1 = E2) .
  eq (E1,S1,E2,E3,S2 = S1,E2,E3,S2) = false .
  -- eq (S1 = S2) = false {owise} .
  -- ceq E1 \in S1,E2,S2 = true if E1 = E2 .
  -- ceq E1 \in S1,E2,S2 = E1 \in S1,S2 if not (E1 = E2) .
  -- ceq E1 \in S1,E2,S2 = (E1 = E2) if not E1 \in S1,S2 .
  -- eq E1 \in E2,E2,S1 = E1 \in E2,S1 .
  -- eq (e = S1,E1,S2) = false .
  -- eq (S1,E1,E2 = S1,E1,E3) = (E2 = E3) .
  -- eq (S1 = S1,E1,S2) = false .
  -- eq (S1,E1,E2 = S1,E1,E3,S2) = (E2 = E3) and (S2 = e) .
  -- eq (S1,E1 = S2,E2,E3) = (S1 = S2,E2) and (E1 = E3) .
  -- ceq (S1,E1 = S2,E2,E3,S3,E4) = false if not (S1 = S2,E2,E3,S3) .
  -- ceq (E1,S1 = E2,S2) = false if not (S1 = S2) .
  -- ceq (E1,E2,S1 = E3,S2) = false if not (E1 = E3) .
  -- eq (S1,E1,E2,S2,E3 = S1,E1,E2,S2,E4) = (E3 = E4) .
}

mod* PBPSEQ {
  pr(SEQ(PBPAIR) * {sort Seq -> PBPSeq})
}

mod* BSEQ {
  pr(SEQ(BIT) * {sort Seq -> BSeq})
}

mod* PSEQ {
  pr(SEQ(PACKET) * {sort Seq -> PSeq})
  op mksq : Packet -> PSeq
  var P : Packet .
  eq mksq(p0) = p0 .
  eq mksq(p(P)) = mksq(P),p(P) .
}

mod* ABP {
  inc(PBPSEQ)
  inc(BSEQ)
  inc(PSEQ)
  [Sys]
  op drp1 : Sys -> Sys {constr}
  op drp2 : Sys -> Sys {constr}
  op dup1 : Sys -> Sys {constr}
  op dup2 : Sys -> Sys {constr}
  op init : -> Sys {constr}
  op rec1 : Sys -> Sys {constr}
  op rec2 : Sys -> Sys {constr}
  op snd1 : Sys -> Sys {constr}
  op snd2 : Sys -> Sys {constr}
  op sb : Sys -> Bit
  op p2s : Sys -> Packet
  op rb : Sys -> Bit
  op psr :  Sys -> PSeq
  op dc : Sys -> PBPSeq
  op ac : Sys -> BSeq
  --
  var S : Sys
  -- init
  eq sb(init) = 0 .
  eq p2s(init) = p0 .
  eq rb(init) = 0 .
  eq psr(init) = e .
  eq dc(init) = e .
  eq ac(init) = e .
  -- snd1
  eq sb(snd1(S)) = sb(S) .
  eq p2s(snd1(S)) = p2s(S) .
  eq rb(snd1(S)) = rb(S) .
  eq psr(snd1(S)) = psr(S) .
  eq dc(snd1(S)) = dc(S) , < p2s(S),sb(S) > .
  eq ac(snd1(S)) = ac(S) .
  -- rec1
  ceq sb(rec1(S))
    = (if sb(S) = hd(ac(S)) then sb(S) else compl(sb(S)) fi)
    if not isEmp(ac(S)) .
  ceq p2s(rec1(S))
    = (if sb(S) = hd(ac(S)) then p2s(S) else p(p2s(S)) fi)
    if not isEmp(ac(S)) .
  ceq rb(rec1(S)) = rb(S) if not isEmp(ac(S)) .
  ceq psr(rec1(S)) = psr(S) if not isEmp(ac(S)) .
  ceq dc(rec1(S)) = dc(S) if not isEmp(ac(S)) .
  ceq ac(rec1(S)) = tl(ac(S)) if not isEmp(ac(S)) .
  ceq rec1(S) = S if isEmp(ac(S)) .
  -- snd2
  eq sb(snd2(S)) = sb(S) .
  eq p2s(snd2(S)) = p2s(S) .
  eq rb(snd2(S)) = rb(S) .
  eq psr(snd2(S)) = psr(S) .
  eq dc(snd2(S)) = dc(S) .
  eq ac(snd2(S)) = ac(S) , rb(S) .
  -- rec2
  ceq sb(rec2(S)) = sb(S) if not isEmp(dc(S)) .
  ceq p2s(rec2(S)) = p2s(S) if not isEmp(dc(S)) .
  ceq rb(rec2(S))
    = (if rb(S) = 2nd(hd(dc(S))) then compl(rb(S)) else rb(S) fi)
    if not isEmp(dc(S)) .
  ceq psr(rec2(S))
    = (if rb(S) = 2nd(hd(dc(S))) then psr(S),1st(hd(dc(S))) else psr(S) fi)
    if not isEmp(dc(S)) .
  ceq dc(rec2(S)) = tl(dc(S)) if not isEmp(dc(S)) .
  ceq ac(rec2(S)) = ac(S) if not isEmp(dc(S)) .
  ceq rec2(S) = S if isEmp(dc(S)) .
  -- dup1
  ceq sb(dup1(S)) = sb(S) if not isEmp(dc(S)) .
  ceq p2s(dup1(S)) = p2s(S) if not isEmp(dc(S)) .
  ceq rb(dup1(S)) = rb(S) if not isEmp(dc(S)) .
  ceq psr(dup1(S)) = psr(S) if not isEmp(dc(S)) .
  ceq dc(dup1(S)) = hd(dc(S)),dc(S) if not isEmp(dc(S)) .
  ceq ac(dup1(S)) = ac(S) if not isEmp(dc(S)) .
  ceq dup1(S) = S if isEmp(dc(S)) .
  -- drp1
  ceq sb(drp1(S)) = sb(S) if not isEmp(dc(S)) .
  ceq p2s(drp1(S)) = p2s(S) if not isEmp(dc(S)) .
  ceq rb(drp1(S)) = rb(S) if not isEmp(dc(S)) .
  ceq psr(drp1(S)) = psr(S) if not isEmp(dc(S)) .
  ceq dc(drp1(S)) = tl(dc(S)) if not isEmp(dc(S)) .
  ceq ac(drp1(S)) = ac(S) if not isEmp(dc(S)) .
  ceq drp1(S) = S if isEmp(dc(S)) .
  -- dup2
  ceq sb(dup2(S)) = sb(S) if not isEmp(ac(S)) .
  ceq p2s(dup2(S)) = p2s(S) if not isEmp(ac(S)) .
  ceq rb(dup2(S)) = rb(S) if not isEmp(ac(S)) .
  ceq psr(dup2(S)) = psr(S) if not isEmp(ac(S)) .
  ceq dc(dup2(S)) = dc(S) if not isEmp(ac(S)) .
  ceq ac(dup2(S)) = hd(ac(S)),ac(S) if not isEmp(ac(S)) .
  ceq dup2(S) = S if isEmp(ac(S)) .
  -- drp2
  ceq sb(drp2(S)) = sb(S) if not isEmp(ac(S)) .
  ceq p2s(drp2(S)) = p2s(S) if not isEmp(ac(S)) .
  ceq rb(drp2(S)) = rb(S) if not isEmp(ac(S)) .
  ceq psr(drp2(S)) = psr(S) if not isEmp(ac(S)) .
  ceq dc(drp2(S)) = dc(S) if not isEmp(ac(S)) .
  ceq ac(drp2(S)) = tl(ac(S)) if not isEmp(ac(S)) .
  ceq drp2(S) = S if isEmp(ac(S)) .
--
-- Properties
--
  op inv1 : Sys -> Bool
  op inv2 : Sys -> Bool
  op inv3 : Sys -> Bool
  op inv4 : Sys Bit -> Bool
  op inv5 : Sys Bit -> Bool
  op inv6 : Sys Packet Bit -> Bool
  op inv7 : Sys Packet Bit -> Bool
  op inv8 : Sys Bit Bit Bit BSeq BSeq -> Bool
  op inv9 : Sys Bit Bit Bit Packet Packet Packet PBPSeq PBPSeq -> Bool
  op inv10 : Sys Bit -> Bool
  op inv11 : Sys Bit Packet -> Bool
  vars B B1 B2 B3 : Bit
  vars P P1 P2 P3 : Packet
  vars BS1 BS2 : BSeq
  vars PRS1 PRS2 : PBPSeq
  eq inv1(S)
    = (sb(S) = rb(S) implies psr(S),p2s(S) = mksq(p2s(S))) and
      ((not (sb(S) = rb(S))) implies psr(S) = mksq(p2s(S))) .
  eq inv2(S)
    = ((not (ac(S) = e)) and (not (sb(S) = hd(ac(S)))))
      implies (rb(S) = hd(ac(S))) .
  eq inv3(S)
    = ((not (dc(S) = e)) and rb(S) = 2nd(hd(dc(S))))
      implies (p2s(S) = 1st(hd(dc(S))) and sb(S) = 2nd(hd(dc(S)))) .
  eq inv4(S,B)
    = ((not (ac(S) = e)) and (not (sb(S) = hd(ac(S)))) and B \in ac(S))
      implies (hd(ac(S)) = B) .
  eq inv5(S,B)
    = ((not (ac(S) = e)) and (not (sb(S) = B)) and B \in ac(S))
      implies (rb(S) = B) .
  eq inv6(S,P,B)
    = ((not (dc(S) = e)) and rb(S) = 2nd(hd(dc(S))) and < P,B > \in dc(S))
      implies (< P,B > = hd(dc(S))) .
  eq inv7(S,P,B)
    = ((not (dc(S) = e)) and < P,B > \in dc(S) and rb(S) = B)
      implies (p2s(S) = P and sb(S) = B) .
  eq inv8(S,B1,B2,B3,BS1,BS2)
    = (ac(S) = BS1,B1,B2,BS2 and (not (B1 = B2)))
      implies ((B3 \in BS2 implies B2 = B3) and rb(S) = B2) .
  eq inv9(S,B1,B2,B3,P1,P2,P3,PRS1,PRS2)
    = (dc(S) = (PRS1,< P1,B1 >,< P2,B2 >,PRS2)
       and (not (< P1,B1 > = < P2,B2 >)))
      implies ((< P3,B3 > \in PRS2 implies < P2,B2 > = < P3,B3 >)
               and (< p2s(S),sb(S) > = < P2,B2 >)) .
  eq inv10(S,B)
    = (sb(S) = rb(S)) implies (B \in ac(S) implies B = rb(S)) .
  eq inv11(S,B,P)
    = (not (sb(S) = rb(S)))
      implies (< P,B > \in dc(S) implies (P = p2s(S) and B = sb(S))) .

}

eof

  *** Proof requires 3 minutes with bound = 4, instVars = 0. Using the bound required by
  *** the rest of the proof makes it to go for too long.
  *** inv1(rec1(S))
  eq (rb(rec1(S))= sb(rec1(S))and mksq(p2s(rec1(S)))= psr(rec1(S))xor rb(rec1(S))= sb(rec1(S))and mksq(p2s(rec1(S)))= psr(rec1(S)),p2s(rec1(S))xor mksq(p2s(rec1(S)))= psr(
    rec1(S))) = true .

  *** inv9(rec1(S))
  *** bound = 7, instVars = 2
  *** All case splitting are generated, but the tree is not traversed in less than 3 hours
  eq true xor (B1 = B2) and (dc(rec1(S))= PRS1,< P1,B1 >,< P2,B2 >,PRS2) and (P1 = P2) xor (B2 = sb(rec1(S))) and (dc(rec1(S))= PRS1,< P1,B1 >,< P2,B2 >,PRS2) and (P2 = p2s(rec1(S)))
     xor < P3,B3 > \in PRS2 and (B2 = sb(rec1(S))) and (dc(rec1(S))= PRS1,< P1,B1 >,< P2,B2 >,PRS2) and (P2 = p2s(rec1(S))) xor (B1 = B2) and (B2 = sb(rec1(S))) and
     (dc(rec1(S))= PRS1,< P1,B1 >,< P2,B2 >,PRS2) and (P1 = P2) and (P2 = p2s(rec1(S))) xor < P3,B3 > \in PRS2 and (B1 = B2) and (B2 = sb(rec1(S))) and
     (dc(rec1(S))= PRS1,< P1,B1 >,< P2,B2 >,PRS2) and (P1 = P2) and
     (P2 = p2s(rec1(S))) xor < P3,B3 > \in PRS2 and (B2 = B3) and (B2 = sb(rec1(S))) and
     (dc(rec1(S))= PRS1,< P1,B1 >,< P2,B2 >,PRS2) and (P2 = P3) and (P2 = p2s(rec1(S))) xor
     < P3,B3 > \in PRS2 and (B1 = B2) and (B2 = B3) and (B2 = sb(rec1(S))) and
     (dc(rec1(S))= PRS1,< P1,B1 >,< P2,B2 >,PRS2) and (P1 = P2) and (P2 = P3) and
     (P2 = p2s(rec1(S))) xor (dc(rec1(S))= PRS1,< P1,B1 >,< P2,B2 >,PRS2) = true .

  *** Proof requires 30 seconds with bound = 4, instVars = 0. Using the bound required by
  *** the rest of the proof makes it to go for too long.
  *** inv1(rec2(S))
  eq (rb(rec2(S))= sb(rec2(S))) and (mksq(p2s(rec2(S)))= psr(rec2(S))) xor
     (rb(rec2(S))= sb(rec2(S))) and (mksq(p2s(rec2(S)))= psr(rec2(S)),p2s(rec2(S))) xor
     (mksq(p2s(rec2(S)))= psr(rec2(S))) = true .

  *** Proof requires bound = 4, instVars = 2, extraImp = 1
  *** Time consumption greater than 3 hours.
  *** inv8(rec2(S),B1,B2,B3,BS1,BS2))
  eq (true xor (B1 = B2) and (ac(rec2(S))= BS1,B1,B2,BS2) xor (B2 = rb(rec2(S))) and
     (ac(rec2(S)) = BS1,B1,B2,BS2) xor B3 \in BS2 and (B2 = rb(rec2(S))) and
     (ac(rec2(S)) = BS1,B1,B2,BS2) xor (B1 = B2) and (B2 = rb(rec2(S))) and
     (ac(rec2(S)) = BS1,B1,B2,BS2) xor (B3 \in BS2) and (B1 = B2) and (B2 = rb(rec2(S))) and
     (ac(rec2(S)) = BS1,B1,B2,BS2) xor B3 \in BS2 and (B2 = B3) and (B2 = rb(rec2(S))) and
     (ac(rec2(S)) = BS1,B1,B2,BS2) xor B3 \in BS2 and (B1 = B2) and (B2 = B3) and
     (B2 = rb(rec2(S))) and (ac(rec2(S))= BS1,B1,B2,BS2) xor (ac(rec2(S))= BS1,B1,B2,BS2))
     = true .

  *** Proof requires bound = 7, instVars = 2, extraImp = 0
  *** Time consumption greater than 3 hours.
  *** inv9(snd1(S),B1,B2,B3,P1,P2,P3,PRS1,PRS2)
  eq (true xor (B1 = B2) and (dc(S),< p2s(S),sb(S)> = PRS1,< P1,B1 >,< P2,B2 >,PRS2) and
      (P1 = P2) xor (B2 = sb(S)) and (dc(S),< p2s(S),sb(S)> = PRS1,< P1,B1 >,< P2,B2 >,PRS2) and
      (P2 = p2s(S)) xor < P3,B3 > \in PRS2 and (B2 = sb(S)) and
      (dc(S),< p2s(S),sb(S)> = PRS1,< P1,B1 >,< P2,B2 >,PRS2) and (P2 = p2s(S)) xor
      (B1 = B2) and (B2 = sb(S)) and (dc(S),< p2s(S),sb(S)> = PRS1,< P1,B1 >,< P2,B2 >,PRS2) and
      (P1 = P2) and (P2 = p2s(S)) xor < P3,B3 > \in PRS2 and (B1 = B2) and
      (B2 = sb(S)) and (dc(S),< p2s(S),sb(S)> = PRS1,< P1,B1 >,< P2,B2 >,PRS2) and
      (P1 = P2) and (P2 = p2s(S)) xor < P3,B3 > \in PRS2 and (B2 = B3) and (B2 = sb(S)) and
      (dc(S),< p2s(S),sb(S)> = PRS1,< P1,B1 >,< P2,B2 >,PRS2) and (P2 = P3) and
      (P2 = p2s(S)) xor < P3,B3 > \in PRS2 and (B1 = B2) and (B2 = B3) and (B2 = sb(S)) and
      (dc(S),< p2s(S),sb(S)> = PRS1,< P1,B1 >,< P2,B2 >,PRS2) and (P1 = P2) and (P2 = P3) and
      (P2 = p2s(S)) xor (dc(S),< p2s(S),sb(S)> = PRS1,< P1,B1 >,< P2,B2 >,PRS2))
      = true .