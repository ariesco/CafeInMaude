
:goal{
eq [proofNSLPK :nonexec] : inv1(S:Sys, n1:Nonce)  = true .
 eq [proofNSLPK1 :nonexec] : inv2(S:Sys, n1:Nonce, q:Prin)  = true .
 eq [proofNSLPK2 :nonexec] : inv3(S:Sys, n1:Nonce, n2:Nonce, q:Prin)  = true .
}
:ind on (S:Sys)
:apply(si)
:sel(4)
	:apply(tc)

	-- The corresponding proof score was not present.
	:apply (rd)

	-- The corresponding proof score was not present.
	:apply (rd)

	-- The corresponding proof score was not present.
	:apply (rd)


:sel(3)
	:apply(tc)

	-- The corresponding proof score was not present.
	:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

	-- The corresponding proof score was not present.
	:apply (rd)

	-- Goal`3-2  -  inv2(fake3(S#Sys, P#Prin, N#Nonce), n1@Nonce, q@Prin)  - Success
	:def csb1#3 = :ctf {eq intr  = p1(n1@Nonce) .}

	:apply(csb1#3)

		-- Goal`3-2-1 Success by reduction
		:apply (rd)

		-- Goal`3-2-2  -  inv2(fake3(S#Sys, P#Prin, N#Nonce), n1@Nonce, q@Prin)  - Success
		:def csb2#3 = :ctf {eq intr  = p2(n1@Nonce) .}

		:apply(csb2#3)

			-- Goal`3-2-2-1 Success by reduction
			:apply (rd)

			-- Goal`3-2-2-2  -  inv2(fake3(S#Sys, P#Prin, N#Nonce), n1@Nonce, q@Prin)  - Success
			:def csb3#3 = :ctf [N#Nonce \in nonces(S#Sys)  .]

			:apply(csb3#3)

				-- Goal`3-2-2-2-1 Success by implication and reduction.
				:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

				:apply (rd)

				-- Goal`3-2-2-2-2 Success by implication and reduction.
				:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

				:apply (rd)

	-- Goal`3-3  -  inv3(fake3(S#Sys, P#Prin, N#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
	:def csb4#3 = :ctf {eq intr  = p1(n2@Nonce) .}

	:apply(csb4#3)

		-- Goal`3-3-1 Success by reduction
		:apply (rd)

		-- Goal`3-3-2  -  inv3(fake3(S#Sys, P#Prin, N#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
		:def csb5#3 = :ctf {eq intr  = p2(n2@Nonce) .}

		:apply(csb5#3)

			-- Goal`3-3-2-1 Success by reduction
			:apply (rd)

			-- Goal`3-3-2-2  -  inv3(fake3(S#Sys, P#Prin, N#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
			:def csb6#3 = :ctf [N#Nonce \in nonces(S#Sys)  .]

			:apply(csb6#3)

				-- Goal`3-3-2-2-1 Success by implication and reduction.
				:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

				:apply (rd)

				-- Goal`3-3-2-2-2 Success by implication and reduction.
				:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

				:apply (rd)


:sel(1)
	:apply(tc)

	-- The corresponding proof score was not present.
	:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

	-- The corresponding proof score was not present.
	:apply (rd)

	-- Goal`1-2  -  inv2(fake1(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, q@Prin)  - Success
	:def csb1#1 = :ctf {eq intr  = p1(n1@Nonce) .}

	:apply(csb1#1)

		-- Goal`1-2-1 Success by reduction
		:apply (rd)

		-- Goal`1-2-2  -  inv2(fake1(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, q@Prin)  - Success
		:def csb2#1 = :ctf {eq intr  = p2(n1@Nonce) .}

		:apply(csb2#1)

			-- Goal`1-2-2-1 Success by reduction
			:apply (rd)

			-- Goal`1-2-2-2  -  inv2(fake1(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, q@Prin)  - Success
			:def csb3#1 = :ctf [N#Nonce \in nonces(S#Sys)  .]

			:apply(csb3#1)

				-- Goal`1-2-2-2-1  -  inv2(fake1(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, q@Prin)  - Success
				:def csb4#1 = :ctf {eq N#Nonce  = n1@Nonce .}

				:apply(csb4#1)

					-- Goal`1-2-2-2-1-1  -  inv2(fake1(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, q@Prin)  - Success
					:def csb5#1 = :ctf [n1@Nonce \in nonces(S#Sys)  .]

					:apply(csb5#1)

						-- Goal`1-2-2-2-1-1-1 Success by reduction
						:apply (rd)

						-- Goal`1-2-2-2-1-1-2 Success by implication and reduction.
						:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

						:apply (rd)

					-- Goal`1-2-2-2-1-2 Success by implication and reduction.
					:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

					:apply (rd)

				-- Goal`1-2-2-2-2 Success by implication and reduction.
				:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

				:apply (rd)

	-- Goal`1-3  -  inv3(fake1(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
	:def csb6#1 = :ctf {eq intr  = p1(n2@Nonce) .}

	:apply(csb6#1)

		-- Goal`1-3-1 Success by reduction
		:apply (rd)

		-- Goal`1-3-2  -  inv3(fake1(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
		:def csb7#1 = :ctf {eq intr  = p2(n2@Nonce) .}

		:apply(csb7#1)

			-- Goal`1-3-2-1 Success by reduction
			:apply (rd)

			-- Goal`1-3-2-2  -  inv3(fake1(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
			:def csb8#1 = :ctf [N#Nonce \in nonces(S#Sys)  .]

			:apply(csb8#1)

				-- Goal`1-3-2-2-1 Success by implication and reduction.
				:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

				:apply (rd)

				-- Goal`1-3-2-2-2 Success by implication and reduction.
				:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

				:apply (rd)


:sel(7)
	:apply(tc)

	-- Goal`7-1  -  inv1(send3(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce)  - Success
	:def csb1#7 = :ctf {eq intr  = p1(n1@Nonce) .}

	:apply(csb1#7)

		-- Goal`7-1-1 Success by reduction
		:apply (rd)

		-- Goal`7-1-2  -  inv1(send3(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce)  - Success
		:def csb2#7 = :ctf {eq intr  = p2(n1@Nonce) .}

		:apply(csb2#7)

			-- Goal`7-1-2-1 Success by reduction
			:apply (rd)

			-- Goal`7-1-2-2  -  inv1(send3(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce)  - Success
			:def csb3#7 = :ctf [enc1(P0#Prin, N#Nonce, P#Prin) \in nw(S#Sys)  .]

			:apply(csb3#7)

				-- Goal`7-1-2-2-1  -  inv1(send3(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce)  - Success
				:def csb4#7 = :ctf [nw(S#Sys)  .]

				:apply(csb4#7)

					-- Goal`7-1-2-2-1-1 Success by implication and reduction.
					:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

					:apply (rd)

					-- Goal`7-1-2-2-1-2 Success by implication and reduction.
					:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

					:apply (rd)

					-- Goal`7-1-2-2-1-3 Success by implication and reduction.
					:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

					:apply (rd)

				-- Goal`7-1-2-2-2 Success by implication and reduction.
				:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

				:apply (rd)

	-- Goal`7-2  -  inv2(send3(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, q@Prin)  - Success
	:def csb5#7 = :ctf {eq intr  = p1(n1@Nonce) .}

	:apply(csb5#7)

		-- Goal`7-2-1 Success by reduction
		:apply (rd)

		-- Goal`7-2-2  -  inv2(send3(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, q@Prin)  - Success
		:def csb6#7 = :ctf {eq intr  = p2(n1@Nonce) .}

		:apply(csb6#7)

			-- Goal`7-2-2-1 Success by reduction
			:apply (rd)

			-- Goal`7-2-2-2  -  inv2(send3(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, q@Prin)  - Success
			:def csb7#7 = :ctf [enc1(P0#Prin, N#Nonce, P#Prin) \in nw(S#Sys)  .]

			:apply(csb7#7)

				-- Goal`7-2-2-2-1  -  inv2(send3(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, q@Prin)  - Success
				:def csb8#7 = :ctf [enc2(P#Prin, N#Nonce, N0#Nonce, P0#Prin) \in nw(S#Sys)  .]

				:apply(csb8#7)

					-- Goal`7-2-2-2-1-1 Success by implication and reduction.
					:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

					:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

					:apply (rd)

					-- Goal`7-2-2-2-1-2 Success by implication and reduction.
					:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

					:apply (rd)

				-- Goal`7-2-2-2-2 Success by implication and reduction.
				:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

				:apply (rd)

	-- Goal`7-3  -  inv3(send3(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
	:def csb9#7 = :ctf {eq intr  = p1(n2@Nonce) .}

	:apply(csb9#7)

		-- Goal`7-3-1 Success by reduction
		:apply (rd)

		-- Goal`7-3-2  -  inv3(send3(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
		:def csb10#7 = :ctf {eq intr  = p2(n2@Nonce) .}

		:apply(csb10#7)

			-- Goal`7-3-2-1 Success by reduction
			:apply (rd)

			-- Goal`7-3-2-2  -  inv3(send3(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
			:def csb11#7 = :ctf [enc1(P0#Prin, N#Nonce, P#Prin) \in nw(S#Sys)  .]

			:apply(csb11#7)

				-- Goal`7-3-2-2-1  -  inv3(send3(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
				:def csb12#7 = :ctf [enc2(P#Prin, N#Nonce, N0#Nonce, P0#Prin) \in nw(S#Sys)  .]

				:apply(csb12#7)

					-- Goal`7-3-2-2-1-1 Success by implication and reduction.
					:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

					:imp [proofNSLPK]  by {n1:Nonce <- n2@Nonce ;}

					:apply (rd)

					-- Goal`7-3-2-2-1-2 Success by implication and reduction.
					:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

					:apply (rd)

				-- Goal`7-3-2-2-2 Success by implication and reduction.
				:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

				:apply (rd)


:sel(2)
	:apply(tc)

	-- The corresponding proof score was not present.
	:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

	-- The corresponding proof score was not present.
	:apply (rd)

	-- Goal`2-2  -  inv2(fake2(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, q@Prin)  - Success
	:def csb1#2 = :ctf {eq intr  = p1(n1@Nonce) .}

	:apply(csb1#2)

		-- Goal`2-2-1 Success by reduction
		:apply (rd)

		-- Goal`2-2-2  -  inv2(fake2(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, q@Prin)  - Success
		:def csb2#2 = :ctf {eq intr  = p2(n1@Nonce) .}

		:apply(csb2#2)

			-- Goal`2-2-2-1 Success by reduction
			:apply (rd)

			-- Goal`2-2-2-2  -  inv2(fake2(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, q@Prin)  - Success
			:def csb3#2 = :ctf [N#Nonce \in nonces(S#Sys)  .]

			:apply(csb3#2)

				-- Goal`2-2-2-2-1  -  inv2(fake2(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, q@Prin)  - Success
				:def csb4#2 = :ctf [N0#Nonce \in nonces(S#Sys)  .]

				:apply(csb4#2)

					-- Goal`2-2-2-2-1-1 Success by implication and reduction.
					:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

					:apply (rd)

					-- Goal`2-2-2-2-1-2 Success by implication and reduction.
					:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

					:apply (rd)

				-- Goal`2-2-2-2-2 Success by implication and reduction.
				:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

				:apply (rd)

	-- Goal`2-3  -  inv3(fake2(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
	:def csb5#2 = :ctf {eq intr  = p1(n2@Nonce) .}

	:apply(csb5#2)

		-- Goal`2-3-1 Success by reduction
		:apply (rd)

		-- Goal`2-3-2  -  inv3(fake2(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
		:def csb6#2 = :ctf {eq intr  = p2(n2@Nonce) .}

		:apply(csb6#2)

			-- Goal`2-3-2-1 Success by reduction
			:apply (rd)

			-- Goal`2-3-2-2  -  inv3(fake2(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
			:def csb7#2 = :ctf [nonces(S#Sys)  .]

			:apply(csb7#2)

				-- Goal`2-3-2-2-1  -  inv3(fake2(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
				:def csb8#2 = :ctf {eq n(P#CS2-3-2-2.Prin, P0#CS2-3-2-2.Prin, R#CS2-3-2-2.Rand)  = N#Nonce .}

				:apply(csb8#2)

					-- Goal`2-3-2-2-1-1  -  inv3(fake2(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
					:def csb9#2 = :ctf {eq N#Nonce  = N0#Nonce .}

					:apply(csb9#2)

						-- Goal`2-3-2-2-1-1-1 Success by implication and reduction.
						:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

						:apply (rd)

						-- Goal`2-3-2-2-1-1-2 Success by implication and reduction.
						:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

						:apply (rd)

					-- Goal`2-3-2-2-1-2 Success by implication and reduction.
					:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

					:apply (rd)


:sel(5)
	:apply(tc)

	-- Goal`5-1  -  inv1(send1(S#Sys, P#Prin, P0#Prin), n1@Nonce)  - Success
	:def csb1#5 = :ctf {eq intr  = p1(n1@Nonce) .}

	:apply(csb1#5)

		-- Goal`5-1-1 Success by reduction
		:apply (rd)

		-- Goal`5-1-2  -  inv1(send1(S#Sys, P#Prin, P0#Prin), n1@Nonce)  - Success
		:def csb2#5 = :ctf {eq intr  = p2(n1@Nonce) .}

		:apply(csb2#5)

			-- Goal`5-1-2-1 Success by reduction
			:apply (rd)

			-- Goal`5-1-2-2  -  inv1(send1(S#Sys, P#Prin, P0#Prin), n1@Nonce)  - Success
			:def csb3#5 = :ctf [n1@Nonce  .]

			:apply(csb3#5)

				-- Goal`5-1-2-2-1  -  inv1(send1(S#Sys, P#Prin, P0#Prin), n1@Nonce)  - Success
				:def csb4#5 = :ctf {eq intr  = P#CS5-1-2-2.Prin .}

				:apply(csb4#5)

					-- Goal`5-1-2-2-1-1 Success by reduction
					:apply (rd)

					-- Goal`5-1-2-2-1-2  -  inv1(send1(S#Sys, P#Prin, P0#Prin), n1@Nonce)  - Success
					:def csb5#5 = :ctf {eq intr  = P0#Prin .}

					:apply(csb5#5)

						-- Goal`5-1-2-2-1-2-1 Success by implication and reduction.
						:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

						:apply (rd)

						-- Goal`5-1-2-2-1-2-2 Success by implication and reduction.
						:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

						:apply (rd)

	-- Goal`5-2  -  inv2(send1(S#Sys, P#Prin, P0#Prin), n1@Nonce, q@Prin)  - Success
	:def csb6#5 = :ctf {eq P0#Prin  = q@Prin .}

	:apply(csb6#5)

		-- Goal`5-2-1  -  inv2(send1(S#Sys, P#Prin, P0#Prin), n1@Nonce, q@Prin)  - Success
		:def csb7#5 = :ctf {eq intr  = P#Prin .}

		:apply(csb7#5)

			-- Goal`5-2-1-1  -  inv2(send1(S#Sys, P#Prin, P0#Prin), n1@Nonce, q@Prin)  - Success
			:def csb8#5 = :ctf {eq p1(n1@Nonce)  = P#Prin .}

			:apply(csb8#5)

				-- Goal`5-2-1-1-1 Success by reduction
				:apply (rd)

				-- Goal`5-2-1-1-2  -  inv2(send1(S#Sys, P#Prin, P0#Prin), n1@Nonce, q@Prin)  - Success
				:def csb9#5 = :ctf {eq p2(n1@Nonce)  = P#Prin .}

				:apply(csb9#5)

					-- Goal`5-2-1-1-2-1 Success by reduction
					:apply (rd)

					-- Goal`5-2-1-1-2-2  -  inv2(send1(S#Sys, P#Prin, P0#Prin), n1@Nonce, q@Prin)  - Success
					:def csb10#5 = :ctf [n1@Nonce  .]

					:apply(csb10#5)

						-- Goal`5-2-1-1-2-2-1 Success by implication and reduction.
						:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

						:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

						:apply (rd)

			-- Goal`5-2-1-2 Success by implication and reduction.
			:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

			:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

			:apply (rd)

		-- Goal`5-2-2 Success by implication and reduction.
		:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

		:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

		:apply (rd)

	-- The corresponding proof score was not present.
	:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

	-- The corresponding proof score was not present.
	:imp [proofNSLPK]  by {n1:Nonce <- n2@Nonce ;}

	-- The corresponding proof score was not present.
	:apply (rd)


:sel(6)
	:apply(tc)

	-- Goal`6-1  -  inv1(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce)  - Success
	:def csb1#6 = :ctf {eq intr  = p1(n1@Nonce) .}

	:apply(csb1#6)

		-- Goal`6-1-1 Success by reduction
		:apply (rd)

		-- Goal`6-1-2  -  inv1(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce)  - Success
		:def csb2#6 = :ctf [enc1(P#Prin, N#Nonce, P0#Prin) \in nw(S#Sys)  .]

		:apply(csb2#6)

			-- Goal`6-1-2-1  -  inv1(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce)  - Success
			:def csb3#6 = :ctf [n1@Nonce  .]

			:apply(csb3#6)

				-- Goal`6-1-2-1-1  -  inv1(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce)  - Success
				:def csb4#6 = :ctf {eq intr  = P0#Prin .}

				:apply(csb4#6)

					-- Goal`6-1-2-1-1-1  -  inv1(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce)  - Success
					:def csb5#6 = :ctf {eq n(P#CS6-1-2-1.Prin, P0#CS6-1-2-1.Prin, R#CS6-1-2-1.Rand)  = N#Nonce .}

					:apply(csb5#6)

						-- Goal`6-1-2-1-1-1-1 Success by implication and reduction.
						:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

						:imp [proofNSLPK1]  by {n1:Nonce <- N#Nonce ; q:Prin <- P#Prin ;}

						:apply (rd)

						-- Goal`6-1-2-1-1-1-2 Success by implication and reduction.
						:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

						:apply (rd)

					-- Goal`6-1-2-1-1-2 Success by implication and reduction.
					:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

					:apply (rd)

			-- Goal`6-1-2-2 Success by implication and reduction.
			:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

			:apply (rd)

	-- Goal`6-2  -  inv2(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, q@Prin)  - Success
	:def csb6#6 = :ctf {eq intr  = p1(n1@Nonce) .}

	:apply(csb6#6)

		-- Goal`6-2-1 Success by reduction
		:apply (rd)

		-- Goal`6-2-2  -  inv2(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, q@Prin)  - Success
		:def csb7#6 = :ctf {eq intr  = p2(n1@Nonce) .}

		:apply(csb7#6)

			-- Goal`6-2-2-1 Success by reduction
			:apply (rd)

			-- Goal`6-2-2-2  -  inv2(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, q@Prin)  - Success
			:def csb8#6 = :ctf [enc1(P#Prin, N#Nonce, P0#Prin) \in nw(S#Sys)  .]

			:apply(csb8#6)

				-- Goal`6-2-2-2-1 Success by implication and reduction.
				:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

				:imp [proofNSLPK]  by {n1:Nonce <- n1@Nonce ;}

				:apply (rd)

				-- Goal`6-2-2-2-2 Success by implication and reduction.
				:imp [proofNSLPK1]  by {n1:Nonce <- n1@Nonce ; q:Prin <- q@Prin ;}

				:apply (rd)

	-- Goal`6-3  -  inv3(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
	:def csb9#6 = :ctf {eq intr  = p1(n2@Nonce) .}

	:apply(csb9#6)

		-- Goal`6-3-1 Success by reduction
		:apply (rd)

		-- Goal`6-3-2  -  inv3(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
		:def csb10#6 = :ctf {eq intr  = p2(n2@Nonce) .}

		:apply(csb10#6)

			-- Goal`6-3-2-1 Success by reduction
			:apply (rd)

			-- Goal`6-3-2-2  -  inv3(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
			:def csb11#6 = :ctf [enc1(P#Prin, N#Nonce, P0#Prin) \in nw(S#Sys)  .]

			:apply(csb11#6)

				-- Goal`6-3-2-2-1  -  inv3(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
				:def csb12#6 = :ctf {eq intr  = P#Prin .}

				:apply(csb12#6)

					-- Goal`6-3-2-2-1-1  -  inv3(send2(S#Sys, P#Prin, P0#Prin, N#Nonce), n1@Nonce, n2@Nonce, q@Prin)  - Success
					:def csb13#6 = :ctf [n2@Nonce  .]

					:apply(csb13#6)

						-- Goal`6-3-2-2-1-1-1 Success by implication and reduction.
						:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

						:imp [proofNSLPK]  by {n1:Nonce <- n2@Nonce ;}

						:apply (rd)

					-- Goal`6-3-2-2-1-2 Success by implication and reduction.
					:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

					:imp [proofNSLPK]  by {n1:Nonce <- n2@Nonce ;}

					:apply (rd)

				-- Goal`6-3-2-2-2 Success by implication and reduction.
				:imp [proofNSLPK2]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; q:Prin <- q@Prin ;}

				:apply (rd)

