
:goal{
eq [inv10 :nonexec] : inv100(S:Sys, C:Cipher1)  = true .
}
:ind on (S:Sys)
:apply(si)
:sel(3)
	:apply(tc)

	:def csb1#3 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys))  .]

	:apply(csb1#3)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)


:sel(5)
	:apply(tc)

	:def csb1#5 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys))  .]

	:apply(csb1#5)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)


:sel(4)
	:apply(tc)

	:def csb1#4 = :ctf [N#Nonce \in cnonce(nw(S#Sys))  .]

	:apply(csb1#4)

	:def csb2#4 = :ctf [N0#Nonce \in cnonce(nw(S#Sys))  .]

	:apply(csb2#4)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)


:sel(1)
	:apply(tc)

	:def csb1#1 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys))  .]

	:apply(csb1#1)

	:def csb2#1 = :ctf {eq C@Cipher1  = C#Cipher1 .}

	:apply(csb2#1)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)


:sel(6)
	:apply(tc)

	:def csb1#6 = :ctf [N#Nonce \in cnonce(nw(S#Sys))  .]

	:apply(csb1#6)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)


:sel(7)
	:apply(tc)

	:apply (rd)


:sel(2)
	:apply(tc)

	:def csb1#2 = :ctf [N#Nonce \in cnonce(nw(S#Sys))  .]

	:apply(csb1#2)

	:def csb2#2 = :ctf {eq C@Cipher1  = enc1(P0#Prin, N#Nonce, P#Prin) .}

	:apply(csb2#2)

	:def csb3#2 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb3#2)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)


:sel(8)
	:apply(tc)

	:def csb1#8 = :ctf [R#Rand \in ur(S#Sys)  .]

	:apply(csb1#8)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:def csb2#8 = :ctf {eq C@Cipher1  = enc1(P0#Prin, n(P#Prin, P0#Prin, R#Rand), P#Prin) .}

	:apply(csb2#8)

	:def csb3#8 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb3#8)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)


:sel(9)
	:apply(tc)

	:def csb1#9 = :ctf [M#Msg \in nw(S#Sys)  .]

	:apply(csb1#9)

	:def csb2#9 = :ctf [m1?(M#Msg)  .]

	:apply(csb2#9)

	:def csb3#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

	:apply(csb3#9)

	:def csb4#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

	:apply(csb4#9)

	:def csb5#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

	:apply(csb5#9)

	:def csb6#9 = :ctf [R#Rand \in ur(S#Sys)  .]

	:apply(csb6#9)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)


:sel(10)
	:apply(tc)

	:def csb1#10 = :ctf [M#Msg \in nw(S#Sys)  .]

	:apply(csb1#10)

	:def csb2#10 = :ctf [M0#Msg \in nw(S#Sys)  .]

	:apply(csb2#10)

	:def csb3#10 = :ctf [m1?(M#Msg)  .]

	:apply(csb3#10)

	:def csb4#10 = :ctf [m2?(M0#Msg)  .]

	:apply(csb4#10)

	:def csb5#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

	:apply(csb5#10)

	:def csb6#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

	:apply(csb6#10)

	:def csb7#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

	:apply(csb7#10)

	:def csb8#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

	:apply(csb8#10)

	:def csb9#10 = :ctf {eq nonce(cipher1(M#Msg))  = n(P#Prin, sender(M0#Msg), R#Rand) .}

	:apply(csb9#10)

	:def csb10#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

	:apply(csb10#10)

	:def csb11#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

	:apply(csb11#10)

	:def csb12#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

	:apply(csb12#10)

	:def csb13#10 = :ctf {eq nonce1(cipher2(M0#Msg))  = n(P#Prin, sender(M0#Msg), R#Rand) .}

	:apply(csb13#10)

	:def csb14#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

	:apply(csb14#10)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10]  by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

