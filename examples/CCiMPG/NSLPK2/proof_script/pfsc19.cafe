open INV .
	:goal{
		eq [inv10 :nonexec] : inv100(S:Sys,C:Cipher1) = true .
        eq [inv11 :nonexec] : inv110(S:Sys,C:Cipher2) = true .
        eq [inv12 :nonexec] : inv120(S:Sys,C:Cipher3) = true .
        eq [inv14 :nonexec] : inv140(S:Sys,C:Cipher1) = true .
        eq [inv15 :nonexec] : inv150(S:Sys,C:Cipher2) = true .
        eq [inv16 :nonexec] : inv160(S:Sys,N:Nonce) = true .
        eq [inv19 :nonexec] : inv190(S:Sys,P:Prin,P0:Prin,R:Rand,N:Nonce) = true .
        eq [inv20 :nonexec] : inv200(S:Sys,P:Prin,P0:Prin,R:Rand) = true .
        eq [inv21 :nonexec] : inv210(S:Sys,P:Prin,P0:Prin,R:Rand) = true .
	}

	:ind on (S:Sys)
	:apply(si)

-- fkm11
    :apply(tc)
    -- inv10
    :def csb1 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys)) .]

	:apply(csb1)

	:def csb2 = :ctf {eq C@Cipher1  = C#Cipher1 .}

	:apply(csb2)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)
    -- inv11
    :def csb3 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys)) .]

	:apply(csb3)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)
    -- inv12
    :def csb4 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys)) .]

	:apply(csb4)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

    -- inv14
    :def csb7 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys)) .]

	:apply(csb7)

	:def csb8 = :ctf {eq key(C#Cipher1) = intruder .}

	:apply(csb8)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}
    :imp [inv10] by {C:Cipher1 <- C#Cipher1 ;}
	:apply (rd)

	:def csb9 = :ctf {eq C@Cipher1  = C#Cipher1 .}

	:apply(csb9)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv15
    :def csb10 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys)) .]
	:apply(csb10)

	:def csb11 = :ctf {eq key(C#Cipher1) = intruder .}
	:apply(csb11)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}
	:imp [inv10] by {C:Cipher1 <- C#Cipher1 ;}
	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}
	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}
	:apply (rd)

    -- inv16
    :def csb12 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys)) .]
	:apply(csb12)

    :def csb13 = :ctf {eq key(C#Cipher1) = intruder .}
	:apply(csb13)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:imp [inv10] by {C:Cipher1 <- C#Cipher1 ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    -- inv19
    :def csb17 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys)) .]
	:apply(csb17)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	:apply (rd)

    -- inv20
    :def csb18 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys)) .]
	:apply(csb18)

	:def csb19 = :ctf {eq enc1(P0@Prin,n(P@Prin,P0@Prin,R@Rand),P@Prin) = C#Cipher1 .}
	:apply(csb19)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	:apply (rd)

    -- inv21
    :def csb20 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys)) .]
	:apply(csb20)

	:def csb21 = :ctf {eq key(C#Cipher1) = intruder .}
	:apply(csb21)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	:imp [inv10] by {C:Cipher1 <- C#Cipher1 ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

-- fkm12
    :apply(tc)
    -- inv10
    :def csb28 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb28)

	:def csb29 = :ctf {eq C@Cipher1  = enc1(P0#Prin,N#Nonce,P#Prin) .}

	:apply(csb29)

	:def csb30 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb30)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv11
    :def csb31 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb31)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv12
    :def csb32 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb32)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

    -- inv14
    :def csb35 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb35)

	:def csb36 = :ctf {eq C@Cipher1  = enc1(P0#Prin,N#Nonce,P#Prin) .}

	:apply(csb36)

	:def csb37 = :ctf {eq P#Prin  = intruder .}

	:apply(csb37)

	:def csb38 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb38)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:def csb39 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb39)

	:def csb40 = :ctf {eq nonce(C@Cipher1) = N#Nonce .}

	:apply(csb40)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv15
    :def csb41 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb41)

	:def csb42 = :ctf {eq P0#Prin = intruder .}

	:apply(csb42)

	:def csb43 = :ctf {eq nonce2(C@Cipher2) = N#Nonce .}

	:apply(csb43)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    :imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv16
    :def csb44 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]
	:apply(csb44)

    :def csb45 = :ctf {eq P0#Prin = intruder .}
	:apply(csb45)

    :def csb46 = :ctf {eq N@Nonce = N#Nonce .}
	:apply(csb46)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    -- inv19
    :def csb50 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb50)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv20
    :def csb50 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb50)

	:def csb51 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb51)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb52 = :ctf [R@Rand \in ur(S#Sys) .]

	:apply(csb52)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb53 = :ctf {eq n(P@Prin,P0@Prin,R@Rand) = N#Nonce .}

	:apply(csb53)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv21
    :def csb54 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb54)

	:def csb55 = :ctf {eq n(P@Prin,P0@Prin,R@Rand) = N#Nonce .}

	:apply(csb55)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

-- fkm21
    :apply(tc)
    -- inv10
    :def csb62 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys)) .]

	:apply(csb62)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv11
    :def csb63 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys)) .]

	:apply(csb63)

	:def csb64 = :ctf {eq C@Cipher2  = C#Cipher2 .}

	:apply(csb64)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv12
    :def csb65 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys)) .]

	:apply(csb65)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

    -- inv14
    :def csb68 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys)) .]

	:apply(csb68)

	:def csb69 = :ctf {eq key(C#Cipher2) = intruder .}

	:apply(csb69)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}
	:imp [inv11] by {C:Cipher2 <- C#Cipher2 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv15
    :def csb70 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys)) .]

	:apply(csb70)

	:def csb71 = :ctf {eq key(C#Cipher2) = intruder .}

	:apply(csb71)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}
	:imp [inv11] by {C:Cipher2 <- C#Cipher2 ;}
	:apply (rd)

    :def csb72 = :ctf {eq C@Cipher2 = C#Cipher2 .}

	:apply(csb72)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}
	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}
	:apply (rd)

    :imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}
	:apply (rd)

    -- inv16
    :def csb73 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys)) .]
	:apply(csb73)

  	:def csb74 = :ctf {eq key(C#Cipher2) = intruder .}
	:apply(csb74)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:imp [inv11] by {C:Cipher2 <- C#Cipher2 ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    -- inv19
    :def csb85 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys)) .]

	:apply(csb85)

	:def csb86 = :ctf {eq enc2(P@Prin,n(P@Prin,P0@Prin,R@Rand),N@Nonce,P0@Prin) = C#Cipher2 .}

	:apply(csb86)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv20
    :def csb87 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys)) .]

	:apply(csb87)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv21
    :def csb88 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys)) .]

	:apply(csb88)

	:def csb89 = :ctf {eq key(C#Cipher2) = intruder .}

	:apply(csb89)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:imp [inv11] by {C:Cipher2 <- C#Cipher2 ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

-- fkm22
    :apply(tc)
    -- inv10
    :def csb99 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb99)

	:def csb100 = :ctf [N0#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb100)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv11
    :def csb101 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb101)

	:def csb102 = :ctf [N0#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb102)

	:def csb103 = :ctf {eq C@Cipher2  = enc2(P0#Prin,N#Nonce,N0#Nonce,P#Prin) .}

	:apply(csb103)

	:def csb104 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb104)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv12
    :def csb105 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb105)

	:def csb106 = :ctf [N0#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb106)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

    -- inv14
    :def csb111 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb111)

	:def csb112 = :ctf [N0#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb112)

	:def csb113 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb113)

	:def csb114 = :ctf {eq nonce(C@Cipher1) = N#Nonce .}

	:apply(csb114)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:def csb115 = :ctf {eq nonce(C@Cipher1) = N0#Nonce .}

	:apply(csb115)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv15
    :def csb116 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb116)

	:def csb117 = :ctf [N0#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb117)

    :def csb118 = :ctf {eq C@Cipher2 = enc2(P0#Prin,N#Nonce,N0#Nonce,P#Prin) .}

	:apply(csb118)

    :def csb119 = :ctf {eq P#Prin = intruder .}

	:apply(csb119)

	:def csb120 = :ctf {eq P0#Prin = intruder .}

	:apply(csb120)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    :imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    :imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    :def csb121 = :ctf {eq P0#Prin = intruder .}

	:apply(csb121)

    :def csb122 = :ctf {eq nonce2(C@Cipher2) = N#Nonce .}

	:apply(csb122)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    :def csb123 = :ctf {eq nonce2(C@Cipher2) = N0#Nonce .}

	:apply(csb123)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv16
    :def csb124 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb124)

	:def csb125 = :ctf [N0#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb125)

	:def csb126 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb126)

	:def csb127 = :ctf {eq N@Nonce = N#Nonce .}

	:apply(csb127)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:def csb128 = :ctf {eq N@Nonce = N0#Nonce .}

	:apply(csb128)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    -- inv19
    :def csb136 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb136)

	:def csb137 = :ctf [N0#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb137)

	:def csb138 = :ctf {eq P@Prin  = intruder .}

	:apply(csb138)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb139 = :ctf [R@Rand \in ur(S#Sys) .]

	:apply(csb139)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb140 = :ctf {eq n(P@Prin,P0@Prin,R@Rand) = N#Nonce .}

	:apply(csb140)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb141 = :ctf {eq n(P@Prin,P0@Prin,R@Rand) = N0#Nonce .}

	:apply(csb141)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv20
    :def csb142 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb142)

	:def csb143 = :ctf [N0#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb143)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv21
    :def csb144 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb144)

	:def csb145 = :ctf [N0#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb145)

	:def csb146 = :ctf {eq n(P@Prin,P0@Prin,R@Rand) = N#Nonce .}

	:apply(csb146)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb147 = :ctf {eq n(P@Prin,P0@Prin,R@Rand) = N0#Nonce .}

	:apply(csb147)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

-- fkm31
    :apply(tc)
    -- inv10
    :def csb175 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys)) .]

	:apply(csb175)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv11
    :def csb176 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys)) .]

	:apply(csb176)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv12
    :def csb177 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys)) .]

	:apply(csb177)

	:def csb178 = :ctf {eq C@Cipher3  = C#Cipher3 .}

	:apply(csb178)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

    -- inv14
    :def csb181 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys)) .]

	:apply(csb181)

	:def csb182 = :ctf {eq key(C#Cipher3) = intruder .}

	:apply(csb182)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

    :imp [inv12] by {C:Cipher3 <- C#Cipher3 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

--     -- inv15
    :def csb183 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys)) .]

	:apply(csb183)

	:def csb184 = :ctf {eq key(C#Cipher3) = intruder .}

	:apply(csb184)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}
	:imp [inv12] by {C:Cipher3 <- C#Cipher3 ;}
	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}
	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}
	:apply (rd)

    -- inv16
    :def csb185 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys)) .]
	:apply(csb185)

	:def csb186 = :ctf {eq key(C#Cipher3) = intruder .}
	:apply(csb186)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:imp [inv12] by {C:Cipher3 <- C#Cipher3 ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    -- inv19
    :def csb197 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys)) .]

	:apply(csb197)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv20
    :def csb198 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys)) .]

	:apply(csb198)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv21
    :def csb199 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys)) .]

	:apply(csb199)

	:def csb200 = :ctf {eq key(C#Cipher3) = intruder .}

	:apply(csb200)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
    :imp [inv12] by {C:Cipher3 <- C#Cipher3 ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

-- fkm32
    :apply(tc)   
    -- inv10
    :def csb209 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb209)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv11
    :def csb210 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb210)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv12
    :def csb211 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb211)

	:def csb212 = :ctf {eq C@Cipher3  = enc3(P0#Prin,N#Nonce) .}

	:apply(csb212)

	:def csb213 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb213)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

    -- inv14
    :def csb216 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb216)

	:def csb217 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb217)

	:def csb218 = :ctf {eq nonce(C@Cipher1) = N#Nonce .}

	:apply(csb218)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv15
    :def csb219 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb219)

	:def csb220 = :ctf {eq P0#Prin = intruder .}

	:apply(csb220)

	:def csb221 = :ctf {eq nonce2(C@Cipher2) = N#Nonce .}

	:apply(csb221)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv16
    :def csb222 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]
	:apply(csb222)

    :def csb223 = :ctf {eq P0#Prin = intruder .}
	:apply(csb223) 

	:def csb224 = :ctf {eq N@Nonce = N#Nonce .}
	:apply(csb224)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    -- inv19
    :def csb234 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb234)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv20
    :def csb235 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb235)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv21
    :def csb236 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb236)

	:def csb237 = :ctf {eq n(P@Prin,P0@Prin,R@Rand) = N#Nonce .}

	:apply(csb237)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

-- init
    :apply(tc)    
    -- inv10
    :apply (rd)
    -- inv11
	:apply (rd)
    -- inv12
    :apply (rd)
    -- inv14
    :apply (rd)
    -- inv15
    :apply (rd)
    -- inv16
    :apply (rd)
    -- inv19
    :apply (rd)
    -- inv20
    :apply (rd)
    -- inv21
    :apply (rd)

-- sdm1
    :apply(tc)
    -- inv10
    :def csb257 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb257)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:def csb258 = :ctf {eq C@Cipher1  = enc1(P0#Prin,n(P#Prin,P0#Prin,R#Rand),P#Prin) .}

	:apply(csb258)

	:def csb259 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb259)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv11
    :def csb260 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb260)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv12
    :def csb261 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb261)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

    -- inv14
    :def csb266 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb266)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:def csb267 = :ctf {eq C@Cipher1  = enc1(P0#Prin,n(P#Prin,P0#Prin,R#Rand),P#Prin) .}

	:apply(csb267)

	:def csb268 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb268)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:def csb269 = :ctf {eq P#Prin  = intruder .}

	:apply(csb269)

	:def csb270 = :ctf [n(intruder,P0#Prin,R#Rand)\in cnonce(nw(S#Sys)) .]

	:apply(csb270)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}
	:imp [inv16] by {N:Nonce <- n(intruder,P0#Prin,R#Rand) ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:def csb271 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb271)

	:def csb272 = :ctf {eq nonce(C@Cipher1) = n(P#Prin,intruder,R#Rand) .}

	:apply(csb272)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv15
    :def csb273 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb273)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:def csb274 = :ctf {eq P0#Prin = intruder .}

	:apply(csb274)

	:def csb275 = :ctf {eq nonce2(C@Cipher2) = n(P#Prin,intruder,R#Rand) .}

	:apply(csb275)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv16
    :def csb276 = :ctf [R#Rand \in ur(S#Sys) .]
	:apply(csb276)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :def csb277 = :ctf {eq P0#Prin = intruder .}
	:apply(csb277) 

	:def csb278 = :ctf {eq N@Nonce = n(P#Prin,intruder,R#Rand) .}
	:apply(csb278)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    -- inv19
    :def csb286 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb286)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv20
    :def csb287 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb287)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb288 = :ctf {eq R@Rand  = R#Rand .}

	:apply(csb288)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv21
    :def csb289 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb289)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb290 = :ctf {eq R@Rand  = R#Rand .}

	:apply(csb290)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

-- sdm2
    :apply(tc)
    -- inv10
    :def csb303 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb303)

	:def csb304 = :ctf [m1?(M#Msg) .]

	:apply(csb304)

	:def csb305 = :ctf {eq receiver(M#Msg) = P#Prin .}

	:apply(csb305)

	:def csb306 = :ctf {eq key(cipher1(M#Msg)) = P#Prin .}

	:apply(csb306)

	:def csb307 = :ctf {eq principal(cipher1(M#Msg)) = sender(M#Msg) .}

	:apply(csb307)

	:def csb308 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb308)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv11
    :def csb309 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb309)

	:def csb310 = :ctf [m1?(M#Msg) .]

	:apply(csb310)

	:def csb311 = :ctf {eq receiver(M#Msg) = P#Prin .}

	:apply(csb311)

	:def csb312 = :ctf {eq key(cipher1(M#Msg)) = P#Prin .}

	:apply(csb312)

	:def csb313 = :ctf {eq principal(cipher1(M#Msg)) = sender(M#Msg) .}

	:apply(csb313)

	:def csb314 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb314)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:def csb315 = :ctf {eq C@Cipher2  = enc2(sender(M#Msg),nonce(cipher1(M#Msg)),n(P#Prin,sender(M#Msg),R#Rand),P#Prin) .}

	:apply(csb315)

	:def csb316 = :ctf {eq sender(M#Msg) = intruder .}

	:apply(csb316)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv12
    :def csb317 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb317)

	:def csb318 = :ctf [m1?(M#Msg) .]

	:apply(csb318)

	:def csb319 = :ctf {eq receiver(M#Msg) = P#Prin .}

	:apply(csb319)

	:def csb320 = :ctf {eq key(cipher1(M#Msg)) = P#Prin .}

	:apply(csb320)

	:def csb321 = :ctf {eq principal(cipher1(M#Msg)) = sender(M#Msg) .}

	:apply(csb321)

	:def csb322 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb322)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

    -- inv14
    :def csb333 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb333)

	:def csb334 = :ctf [m1?(M#Msg) .]

	:apply(csb334)

	:def csb335 = :ctf {eq receiver(M#Msg) = P#Prin .}

	:apply(csb335)

	:def csb336 = :ctf {eq key(cipher1(M#Msg)) = P#Prin .}

	:apply(csb336)

	:def csb337 = :ctf {eq principal(cipher1(M#Msg)) = sender(M#Msg) .}

	:apply(csb337)

	:def csb338 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb338)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:def csb339 = :ctf {eq sender(M#Msg) = intruder .}

	:apply(csb339)

	:def csb340 = :ctf {eq nonce(C@Cipher1) = n(P#Prin,intruder,R#Rand) .}

	:apply(csb340)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:def csb341 = :ctf {eq nonce(C@Cipher1) = nonce(cipher1(M#Msg)) .}

	:apply(csb341)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv15
    :def csb342 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb342)

	:def csb343 = :ctf [m1?(M#Msg) .]

	:apply(csb343)

	:def csb344 = :ctf {eq receiver(M#Msg) = P#Prin .}

	:apply(csb344)

	:def csb345 = :ctf {eq key(cipher1(M#Msg)) = P#Prin .}

	:apply(csb345)

	:def csb346 = :ctf {eq principal(cipher1(M#Msg)) = sender(M#Msg) .}

	:apply(csb346)

	:def csb347 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb347)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:def csb348 = :ctf {eq C@Cipher2 = enc2(sender(M#Msg),nonce(cipher1(M#Msg)),n(P#Prin,sender(M#Msg),R#Rand),P#Prin) .}

	:apply(csb348)

	:def csb349 = :ctf {eq sender(M#Msg) = intruder .}

	:apply(csb349)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:def csb350 = :ctf {eq P#Prin = intruder .}

	:apply(csb350)

    :def csb351 = :ctf [n(intruder,sender(M#Msg),R#Rand) \in cnonce(nw(S#Sys)) .]

	:apply(csb351)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}
    :imp [inv16] by {N:Nonce <- n(intruder,sender(M#Msg),R#Rand) ;}
	:apply (rd)

    :imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}
    :imp [inv16] by {N:Nonce <- n(intruder,sender(M#Msg),R#Rand) ;}
	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    :def csb352 = :ctf {eq sender(M#Msg) = intruder .}

	:apply(csb352)

    :def csb353 = :ctf {eq nonce2(C@Cipher2) = nonce(cipher1(M#Msg)) .}

	:apply(csb353)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    :def csb354 = :ctf {eq nonce2(C@Cipher2) = n(P#Prin,intruder,R#Rand) .}

	:apply(csb354)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    :imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    :imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    :imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv16
    :def csb355 = :ctf [M#Msg \in nw(S#Sys) .]
	:apply(csb355)

	:def csb356 = :ctf [m1?(M#Msg) .]
	:apply(csb356)

	:def csb357 = :ctf {eq receiver(M#Msg) = P#Prin .}
	:apply(csb357)

	:def csb358 = :ctf {eq key(cipher1(M#Msg)) = P#Prin .}
	:apply(csb358)

	:def csb359 = :ctf {eq principal(cipher1(M#Msg)) = sender(M#Msg) .}
	:apply(csb359)

	:def csb360 = :ctf [R#Rand \in ur(S#Sys) .]
	:apply(csb360)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:def csb361 = :ctf {eq sender(M#Msg) = intruder .}

	:apply(csb361)

	:def csb362 = :ctf {eq N@Nonce = nonce(cipher1(M#Msg)) .}

	:apply(csb362)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:def csb363 = :ctf {eq N@Nonce = n(P#Prin,intruder,R#Rand) .}

	:apply(csb363)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    -- inv19
	:def csb384 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb384)

	:def csb385 = :ctf [m1?(M#Msg) .]

	:apply(csb385)

	:def csb386 = :ctf {eq receiver(M#Msg) = P#Prin .}

	:apply(csb386)

	:def csb387 = :ctf {eq key(cipher1(M#Msg)) = P#Prin .}

	:apply(csb387)

	:def csb388 = :ctf {eq principal(cipher1(M#Msg)) = sender(M#Msg) .}

	:apply(csb388)

	:def csb389 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb389)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	
    :apply (rd)

	:def csb3401 = :ctf {eq P@Prin  = intruder .}

	:apply(csb3401)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	
    :apply (rd)

	:def csb3411 = :ctf {eq R@Rand  = R#Rand .}

	:apply(csb3411)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	
    :apply (rd)

    :def csb3421 = :ctf [R@Rand \in ur(S#Sys) .]

	:apply(csb3421)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb3431 = :ctf {eq P0@Prin  = P#Prin .}

	:apply(csb3431)

	:def csb3441 = :ctf {eq P#Prin  = intruder .}

	:apply(csb3441)

	:def csb3451 = :ctf {eq sender(M#Msg) = P@Prin .}

	:apply(csb3451)

	:def csb3461 = :ctf {eq n(P@Prin,intruder,R@Rand) = nonce(cipher1(M#Msg)) .}

	:apply(csb3461)

	:def csb3471 = :ctf {eq n(intruder,P@Prin,R#Rand) = N@Nonce .}

	:apply(csb3471)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb3481 = :ctf {eq sender(M#Msg) = P@Prin .}

	:apply(csb3481)

	:def csb3491 = :ctf {eq n(P@Prin,P#Prin,R@Rand) = nonce(cipher1(M#Msg)) .}

	:apply(csb3491)

	:def csb3501 = :ctf {eq n(P#Prin,P@Prin,R#Rand) = N@Nonce .}

	:apply(csb3501)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
    :imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

    :apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv20
	:def csb3511 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb3511)

	:def csb3521 = :ctf [m1?(M#Msg) .]

	:apply(csb3521)

	:def csb3531 = :ctf {eq receiver(M#Msg) = P#Prin .}

	:apply(csb3531)

	:def csb3541 = :ctf {eq key(cipher1(M#Msg)) = P#Prin .}

	:apply(csb3541)

	:def csb3551 = :ctf {eq principal(cipher1(M#Msg)) = sender(M#Msg) .}

	:apply(csb3551)

	:def csb3561 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb3561)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb3571 = :ctf {eq R@Rand  = R#Rand .}

	:apply(csb3571)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv21
	:def csb3581 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb3581)

	:def csb3591 = :ctf [m1?(M#Msg) .]

	:apply(csb3591)

	:def csb3601 = :ctf {eq receiver(M#Msg) = P#Prin .}

	:apply(csb3601)

	:def csb3611 = :ctf {eq key(cipher1(M#Msg)) = P#Prin .}

	:apply(csb3611)

	:def csb3621 = :ctf {eq principal(cipher1(M#Msg)) = sender(M#Msg) .}

	:apply(csb3621)

	:def csb3631 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb3631)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb3641 = :ctf {eq R@Rand  = R#Rand .}

	:apply(csb3641)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb3651 = :ctf {eq sender(M#Msg) = intruder .}

	:apply(csb3651)

	:def csb3661 = :ctf {eq n(P@Prin,P0@Prin,R@Rand) = nonce(cipher1(M#Msg)) .}

	:apply(csb3661)

	:def csb3671 = :ctf {eq P#Prin  = intruder .}

	:apply(csb3671)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb3681 = :ctf [nonce(cipher1(M#Msg))\in cnonce(nw(S#Sys)) .]

	:apply(csb3681)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
	:imp [inv14] by {C:Cipher1 <- cipher1(M#Msg) ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

-- sdm3
    :apply(tc)
    -- inv10
	:def csb409 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb409)

	:def csb500 = :ctf [M0#Msg \in nw(S#Sys) .]

	:apply(csb500)

	:def csb501 = :ctf [m1?(M#Msg) .]

	:apply(csb501)

	:def csb502 = :ctf [m2?(M0#Msg) .]

	:apply(csb502)

	:def csb503 = :ctf {eq creator(M#Msg) = P#Prin .}

	:apply(csb503)

	:def csb504 = :ctf {eq sender(M#Msg) = P#Prin .}

	:apply(csb504)

	:def csb505 = :ctf {eq receiver(M#Msg) = sender(M0#Msg) .}

	:apply(csb505)

	:def csb506 = :ctf {eq key(cipher1(M#Msg)) = sender(M0#Msg) .}

	:apply(csb506)

	:def csb507 = :ctf {eq nonce(cipher1(M#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb507)

	:def csb508 = :ctf {eq principal(cipher1(M#Msg)) = P#Prin .}

	:apply(csb508)

	:def csb509 = :ctf {eq receiver(M0#Msg) = P#Prin .}

	:apply(csb509)

	:def csb600 = :ctf {eq key(cipher2(M0#Msg)) = P#Prin .}

	:apply(csb600)

	:def csb601 = :ctf {eq nonce1(cipher2(M0#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb601)

	:def csb602 = :ctf {eq principal(cipher2(M0#Msg)) = sender(M0#Msg) .}

	:apply(csb602)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv10] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv11
	:def csb603 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb603)

	:def csb604 = :ctf [M0#Msg \in nw(S#Sys) .]

	:apply(csb604)

	:def csb605 = :ctf [m1?(M#Msg) .]

	:apply(csb605)

	:def csb606 = :ctf [m2?(M0#Msg) .]

	:apply(csb606)

	:def csb607 = :ctf {eq creator(M#Msg) = P#Prin .}

	:apply(csb607)

	:def csb608 = :ctf {eq sender(M#Msg) = P#Prin .}

	:apply(csb608)

	:def csb609 = :ctf {eq receiver(M#Msg) = sender(M0#Msg) .}

	:apply(csb609)

	:def csb610 = :ctf {eq key(cipher1(M#Msg)) = sender(M0#Msg) .}

	:apply(csb610)

	:def csb611 = :ctf {eq nonce(cipher1(M#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb611)

	:def csb612 = :ctf {eq principal(cipher1(M#Msg)) = P#Prin .}

	:apply(csb612)

	:def csb613 = :ctf {eq receiver(M0#Msg) = P#Prin .}

	:apply(csb613)

	:def csb614 = :ctf {eq key(cipher2(M0#Msg)) = P#Prin .}

	:apply(csb614)

	:def csb615 = :ctf {eq nonce1(cipher2(M0#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb615)

	:def csb616 = :ctf {eq principal(cipher2(M0#Msg)) = sender(M0#Msg) .}

	:apply(csb616)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv11] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv12
	:def csb617 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb617)

	:def csb618 = :ctf [M0#Msg \in nw(S#Sys) .]

	:apply(csb618)

	:def csb619 = :ctf [m1?(M#Msg) .]

	:apply(csb619)

	:def csb620 = :ctf [m2?(M0#Msg) .]

	:apply(csb620)

	:def csb621 = :ctf {eq creator(M#Msg) = P#Prin .}

	:apply(csb621)

	:def csb622 = :ctf {eq sender(M#Msg) = P#Prin .}

	:apply(csb622)

	:def csb623 = :ctf {eq receiver(M#Msg) = sender(M0#Msg) .}

	:apply(csb623)

	:def csb624 = :ctf {eq key(cipher1(M#Msg)) = sender(M0#Msg) .}

	:apply(csb624)

	:def csb625 = :ctf {eq nonce(cipher1(M#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb625)

	:def csb626 = :ctf {eq principal(cipher1(M#Msg)) = P#Prin .}

	:apply(csb626)

	:def csb627 = :ctf {eq receiver(M0#Msg) = P#Prin .}

	:apply(csb627)

	:def csb628 = :ctf {eq key(cipher2(M0#Msg)) = P#Prin .}

	:apply(csb628)

	:def csb629 = :ctf {eq nonce1(cipher2(M0#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb629)

	:def csb630 = :ctf {eq principal(cipher2(M0#Msg)) = sender(M0#Msg) .}

	:apply(csb630)

	:def csb631 = :ctf {eq C@Cipher3  = enc3(sender(M0#Msg),nonce2(cipher2(M0#Msg))) .}

	:apply(csb631)

	:def csb632 = :ctf {eq sender(M0#Msg) = intruder .}

	:apply(csb632)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

    -- inv14
	:def csb651 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb651)

	:def csb652 = :ctf [M0#Msg \in nw(S#Sys) .]

	:apply(csb652)

	:def csb653 = :ctf [m1?(M#Msg) .]

	:apply(csb653)

	:def csb654 = :ctf [m2?(M0#Msg) .]

	:apply(csb654)

	:def csb655 = :ctf {eq creator(M#Msg) = P#Prin .}

	:apply(csb655)

	:def csb656 = :ctf {eq sender(M#Msg) = P#Prin .}

	:apply(csb656)

	:def csb657 = :ctf {eq receiver(M#Msg) = sender(M0#Msg) .}

	:apply(csb657)

	:def csb658 = :ctf {eq key(cipher1(M#Msg)) = sender(M0#Msg) .}

	:apply(csb658)

	:def csb659 = :ctf {eq nonce(cipher1(M#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb659)

	:def csb660 = :ctf {eq principal(cipher1(M#Msg)) = P#Prin .}

	:apply(csb660)

	:def csb661 = :ctf {eq receiver(M0#Msg) = P#Prin .}

	:apply(csb661)

	:def csb662 = :ctf {eq key(cipher2(M0#Msg)) = P#Prin .}

	:apply(csb662)

	:def csb663 = :ctf {eq nonce1(cipher2(M0#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb663)

	:def csb664 = :ctf {eq principal(cipher2(M0#Msg)) = sender(M0#Msg) .}

	:apply(csb664)

	:def csb665 = :ctf {eq sender(M0#Msg) = intruder .}

	:apply(csb665)

	:def csb666 = :ctf {eq nonce(C@Cipher1) = nonce2(cipher2(M0#Msg)) .}

	:apply(csb666)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv14] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

    -- inv15
	:def csb667 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb667)

	:def csb668 = :ctf [M0#Msg \in nw(S#Sys) .]

	:apply(csb668)

	:def csb669 = :ctf [m1?(M#Msg) .]

	:apply(csb669)

	:def csb670 = :ctf [m2?(M0#Msg) .]

	:apply(csb670)

	:def csb671 = :ctf {eq creator(M#Msg) = P#Prin .}

	:apply(csb671)

	:def csb672 = :ctf {eq sender(M#Msg) = P#Prin .}

	:apply(csb672)

	:def csb673 = :ctf {eq receiver(M#Msg) = sender(M0#Msg) .}

	:apply(csb673)

	:def csb674 = :ctf {eq key(cipher1(M#Msg)) = sender(M0#Msg) .}

	:apply(csb674)

	:def csb675 = :ctf {eq nonce(cipher1(M#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb675)

	:def csb676 = :ctf {eq principal(cipher1(M#Msg)) = P#Prin .}

	:apply(csb676)

	:def csb677 = :ctf {eq receiver(M0#Msg) = P#Prin .}

	:apply(csb677)

	:def csb678 = :ctf {eq key(cipher2(M0#Msg)) = P#Prin .}

	:apply(csb678)

	:def csb679 = :ctf {eq nonce1(cipher2(M0#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb679)

	:def csb680 = :ctf {eq principal(cipher2(M0#Msg)) = sender(M0#Msg) .}

	:apply(csb680)

	:def csb681 = :ctf {eq sender(M0#Msg) = intruder .}

	:apply(csb681)

	:def csb682 = :ctf {eq nonce2(C@Cipher2) = nonce2(cipher2(M0#Msg)) .}

	:apply(csb682)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

    -- inv16
	:def csb683 = :ctf [M#Msg \in nw(S#Sys) .]
	:apply(csb683)

	:def csb684 = :ctf [M0#Msg \in nw(S#Sys) .]
	:apply(csb684)

	:def csb685 = :ctf [m1?(M#Msg) .]
	:apply(csb685)

	:def csb686 = :ctf [m2?(M0#Msg) .]
	:apply(csb686)

	:def csb687 = :ctf {eq creator(M#Msg) = P#Prin .}
	:apply(csb687)

	:def csb688 = :ctf {eq sender(M#Msg) = P#Prin .}
	:apply(csb688)

	:def csb689 = :ctf {eq receiver(M#Msg) = sender(M0#Msg) .}
	:apply(csb689)

	:def csb690 = :ctf {eq key(cipher1(M#Msg)) = sender(M0#Msg) .}
	:apply(csb690)

	:def csb691 = :ctf {eq nonce(cipher1(M#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}
	:apply(csb691)

	:def csb692 = :ctf {eq principal(cipher1(M#Msg)) = P#Prin .}
	:apply(csb692)

	:def csb693 = :ctf {eq receiver(M0#Msg) = P#Prin .}
	:apply(csb693)

	:def csb694 = :ctf {eq key(cipher2(M0#Msg)) = P#Prin .}
	:apply(csb694)

	:def csb695 = :ctf {eq nonce1(cipher2(M0#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}
	:apply(csb695)

	:def csb696 = :ctf {eq principal(cipher2(M0#Msg)) = sender(M0#Msg) .}
	:apply(csb696)

	:def csb697 = :ctf {eq sender(M0#Msg) = intruder .}
	:apply(csb697)

	:def csb698 = :ctf {eq N@Nonce = nonce2(cipher2(M0#Msg)) .}
	:apply(csb698)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    -- inv19
	:def csb727 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb727)

	:def csb728 = :ctf [M0#Msg \in nw(S#Sys) .]

	:apply(csb728)

	:def csb729 = :ctf [m1?(M#Msg) .]

	:apply(csb729)

	:def csb730 = :ctf [m2?(M0#Msg) .]

	:apply(csb730)

	:def csb731 = :ctf {eq creator(M#Msg) = P#Prin .}

	:apply(csb731)

	:def csb732 = :ctf {eq sender(M#Msg) = P#Prin .}

	:apply(csb732)

	:def csb733 = :ctf {eq receiver(M#Msg) = sender(M0#Msg) .}

	:apply(csb733)

	:def csb734 = :ctf {eq key(cipher1(M#Msg)) = sender(M0#Msg) .}

	:apply(csb734)

	:def csb735 = :ctf {eq nonce(cipher1(M#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb735)

	:def csb736 = :ctf {eq principal(cipher1(M#Msg)) = P#Prin .}

	:apply(csb736)

	:def csb737 = :ctf {eq receiver(M0#Msg) = P#Prin .}

	:apply(csb737)

	:def csb738 = :ctf {eq key(cipher2(M0#Msg)) = P#Prin .}

	:apply(csb738)

	:def csb739 = :ctf {eq nonce1(cipher2(M0#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb739)

	:def csb740 = :ctf {eq principal(cipher2(M0#Msg)) = sender(M0#Msg) .}

	:apply(csb740)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv19] by {N:Nonce <- N@Nonce ; P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv20
	:def csb741 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb741)

	:def csb742 = :ctf [M0#Msg \in nw(S#Sys) .]

	:apply(csb742)

	:def csb743 = :ctf [m1?(M#Msg) .]

	:apply(csb743)

	:def csb744 = :ctf [m2?(M0#Msg) .]

	:apply(csb744)

	:def csb745 = :ctf {eq creator(M#Msg) = P#Prin .}

	:apply(csb745)

	:def csb746 = :ctf {eq sender(M#Msg) = P#Prin .}

	:apply(csb746)

	:def csb747 = :ctf {eq receiver(M#Msg) = sender(M0#Msg) .}

	:apply(csb747)

	:def csb748 = :ctf {eq key(cipher1(M#Msg)) = sender(M0#Msg) .}

	:apply(csb748)

	:def csb749 = :ctf {eq nonce(cipher1(M#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb749)

	:def csb750 = :ctf {eq principal(cipher1(M#Msg)) = P#Prin .}

	:apply(csb750)

	:def csb751 = :ctf {eq receiver(M0#Msg) = P#Prin .}

	:apply(csb751)

	:def csb752 = :ctf {eq key(cipher2(M0#Msg)) = P#Prin .}

	:apply(csb752)

	:def csb753 = :ctf {eq nonce1(cipher2(M0#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb753)

	:def csb754 = :ctf {eq principal(cipher2(M0#Msg)) = sender(M0#Msg) .}

	:apply(csb754)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv20] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    -- inv21
	:def csb755 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb755)

	:def csb756 = :ctf [M0#Msg \in nw(S#Sys) .]

	:apply(csb756)

	:def csb757 = :ctf [m1?(M#Msg) .]

	:apply(csb757)

	:def csb758 = :ctf [m2?(M0#Msg) .]

	:apply(csb758)

	:def csb759 = :ctf {eq creator(M#Msg) = P#Prin .}

	:apply(csb759)

	:def csb760 = :ctf {eq sender(M#Msg) = P#Prin .}

	:apply(csb760)

	:def csb761 = :ctf {eq receiver(M#Msg) = sender(M0#Msg) .}

	:apply(csb761)

	:def csb762 = :ctf {eq key(cipher1(M#Msg)) = sender(M0#Msg) .}

	:apply(csb762)

	:def csb763 = :ctf {eq nonce(cipher1(M#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb763)

	:def csb764 = :ctf {eq principal(cipher1(M#Msg)) = P#Prin .}

	:apply(csb764)

	:def csb765 = :ctf {eq receiver(M0#Msg) = P#Prin .}

	:apply(csb765)

	:def csb766 = :ctf {eq key(cipher2(M0#Msg)) = P#Prin .}

	:apply(csb766)

	:def csb767 = :ctf {eq nonce1(cipher2(M0#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb767)

	:def csb768 = :ctf {eq principal(cipher2(M0#Msg)) = sender(M0#Msg) .}

	:apply(csb768)

	:def csb769 = :ctf {eq sender(M0#Msg) = intruder .}

	:apply(csb769)

	:def csb770 = :ctf {eq n(P@Prin,P0@Prin,R@Rand) = nonce2(cipher2(M0#Msg)) .}

	:apply(csb770)

	:def csb771 = :ctf {eq P#Prin  = intruder .}

	:apply(csb771)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb772 = :ctf [nonce2(cipher2(M0#Msg))\in cnonce(nw(S#Sys)) .]

	:apply(csb772)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}
    :imp [inv15] by {C:Cipher2 <- cipher2(M0#Msg) ;}
	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv21] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

close