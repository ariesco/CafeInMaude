--> 8. sdm2(s,r1,r2,r3)
open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq principal(cipher1(r3)) = sender(r3) .
	eq (r2 \in ur(s)) = true .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq principal(cipher1(r3)) = sender(r3) .
	eq (r2 \in ur(s)) = false .
  	eq sender(r3) = intruder .
  	eq n = n(r1,intruder,r2) .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
    eq principal(cipher1(r3)) = sender(r3) .
	eq (r2 \in ur(s)) = false .
  	eq sender(r3) = intruder .
  	eq (n = n(r1,intruder,r2)) = false .
  	eq n = nonce(cipher1(r3)) .
  	eq r1 = intruder .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq principal(cipher1(r3)) = sender(r3) .
	eq (r2 \in ur(s)) = false .
  	eq sender(r3) = intruder .
  	eq (n = n(r1,intruder,r2)) = false .
  	eq n = nonce(cipher1(r3)) .
  	eq (r1 = intruder) = false .
  	red inv140(s,cipher1(r3)) implies inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq principal(cipher1(r3)) = sender(r3) .
	eq (r2 \in ur(s)) = false .
  	eq sender(r3) = intruder .
  	eq (n = n(r1,intruder,r2)) = false .
  	eq (n = nonce(cipher1(r3))) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq principal(cipher1(r3)) = sender(r3) .
	eq (r2 \in ur(s)) = false .
  	eq (sender(r3) = intruder) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
    eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq (receiver(r3) = r1) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq (key(cipher1(r3)) = r1) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
    eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
--
  	eq sender(r4) = intruder .
  	eq n = nonce2(cipher2(r4)) .
  	eq r1 = intruder .
  	red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
--
  	eq sender(r4) = intruder .
  	eq n = nonce2(cipher2(r4)) .
  	eq (r1 = intruder) = false .
  	eq nonce2(cipher2(r4)) \in cnonce(nw(s)) = true .

  	red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
--
  	eq sender(r4) = intruder .
  	eq n = nonce2(cipher2(r4)) .
  	eq (r1 = intruder) = false .
  	eq nonce2(cipher2(r4)) \in cnonce(nw(s)) = false .

  	red inv150(s,cipher2(r4))
    implies inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
--
  	eq sender(r4) = intruder .
  	eq (n = nonce2(cipher2(r4))) = false .
  	red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
--
  	eq (sender(r4) = intruder) = false .
  	red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
  	red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq (receiver(r4) = r1) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq (key(cipher1(r3)) = sender(r4)) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq (receiver(r3) = sender(r4)) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq (sender(r3) = r1) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
 :id(inv13)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close