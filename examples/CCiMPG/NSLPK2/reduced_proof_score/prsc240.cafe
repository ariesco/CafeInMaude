--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
  eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
  eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq sender(r4) = intruder .
  red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
  eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
  eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (sender(r4) = intruder) = false .
  eq sender(r4) = q .
  eq n(q,p,r) = nonce2(cipher2(r4)) .
  eq r \in ur(s) = true .
  red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
  eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
  eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (sender(r4) = intruder) = false .
  eq sender(r4) = q .
  eq n(q,p,r) = nonce2(cipher2(r4)) .
  eq r \in ur(s) = false .
  eq r1 = intruder .
  red inv210(s,q,p,r) implies inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
  eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
  eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (sender(r4) = intruder) = false .
  eq sender(r4) = q .
  eq n(q,p,r) = nonce2(cipher2(r4)) .
  eq r \in ur(s) = false .
  eq (r1 = intruder) = false .
  red inv250(s,r1,p,q,r,nonce1(cipher2(r4)))
  implies inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
  eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
  eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (sender(r4) = intruder) = false .
  eq sender(r4) = q .
  eq (n(q,p,r) = nonce2(cipher2(r4))) = false .
  red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
  eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
  eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (sender(r4) = intruder) = false .
  eq (sender(r4) = q) = false .
  red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq (receiver(r4) = r1) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq (receiver(r3) = sender(r4)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq (sender(r3) = r1) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(inv24)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close