
:goal{
eq [inv26 :nonexec] : inv260(S:Sys, p1:Prin, p2:Prin, n1:Nonce, n2:Nonce)  = true .
}
:ind on (S:Sys)
:apply(si)
:sel(3)
	:apply(tc)

	-- Goal`3-1  -  inv260(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
	:def csb1#3 = :cvs [nw(S#Sys)  .]

	:apply(csb1#3)

		-- Goal`3-1-1 Success by reduction
		:apply (rd)

		-- Goal`3-1-2  -  inv260(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb2#3 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb2#3)

			-- Goal`3-1-2-1 Success by reduction
			:apply (rd)

			-- Goal`3-1-2-2  -  inv260(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb3#3 = :ctf [p1@Prin  .]

			:apply(csb3#3)

				-- Goal`3-1-2-2-1 Success by reduction
				:apply (rd)

		-- Goal`3-1-3  -  inv260(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb4#3 = :ctf {eq C#Cipher2  = C#EVS3-1.SubCipher2 .}

		:apply(csb4#3)

			-- Goal`3-1-3-1  -  inv260(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb5#3 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

			:apply(csb5#3)

				-- Goal`3-1-3-1-1 Success by reduction
				:apply (rd)

				-- Goal`3-1-3-1-2  -  inv260(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb6#3 = :ctf [p1@Prin  .]

				:apply(csb6#3)

					-- Goal`3-1-3-1-2-1 Success by reduction
					:apply (rd)

			-- Goal`3-1-3-2  -  inv260(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb7#3 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

			:apply(csb7#3)

				-- Goal`3-1-3-2-1 Success by reduction
				:apply (rd)

				-- Goal`3-1-3-2-2  -  inv260(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb8#3 = :ctf [p1@Prin  .]

				:apply(csb8#3)

					-- Goal`3-1-3-2-2-1 Success by reduction
					:apply (rd)

		-- Goal`3-1-4  -  inv260(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb9#3 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb9#3)

			-- Goal`3-1-4-1 Success by reduction
			:apply (rd)

			-- Goal`3-1-4-2  -  inv260(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb10#3 = :ctf [p1@Prin  .]

			:apply(csb10#3)

				-- Goal`3-1-4-2-1 Success by reduction
				:apply (rd)


:sel(1)
	:apply(tc)

	-- Goal`1-1  -  inv260(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
	:def csb1#1 = :cvs [nw(S#Sys)  .]

	:apply(csb1#1)

		-- Goal`1-1-1 Success by reduction
		:apply (rd)

		-- Goal`1-1-2  -  inv260(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb2#1 = :ctf {eq C#Cipher1  = C#EVS1-1.SubCipher1 .}

		:apply(csb2#1)

			-- Goal`1-1-2-1  -  inv260(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb3#1 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

			:apply(csb3#1)

				-- Goal`1-1-2-1-1 Success by reduction
				:apply (rd)

				-- Goal`1-1-2-1-2  -  inv260(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb4#1 = :ctf [p1@Prin  .]

				:apply(csb4#1)

					-- Goal`1-1-2-1-2-1 Success by reduction
					:apply (rd)

			-- Goal`1-1-2-2  -  inv260(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb5#1 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

			:apply(csb5#1)

				-- Goal`1-1-2-2-1 Success by reduction
				:apply (rd)

				-- Goal`1-1-2-2-2  -  inv260(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb6#1 = :ctf [p1@Prin  .]

				:apply(csb6#1)

					-- Goal`1-1-2-2-2-1 Success by reduction
					:apply (rd)

		-- Goal`1-1-3  -  inv260(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb7#1 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb7#1)

			-- Goal`1-1-3-1 Success by reduction
			:apply (rd)

			-- Goal`1-1-3-2  -  inv260(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb8#1 = :ctf [p1@Prin  .]

			:apply(csb8#1)

				-- Goal`1-1-3-2-1 Success by reduction
				:apply (rd)

		-- Goal`1-1-4  -  inv260(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb9#1 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb9#1)

			-- Goal`1-1-4-1 Success by reduction
			:apply (rd)

			-- Goal`1-1-4-2  -  inv260(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb10#1 = :ctf [p1@Prin  .]

			:apply(csb10#1)

				-- Goal`1-1-4-2-1 Success by reduction
				:apply (rd)


:sel(5)
	:apply(tc)

	-- Goal`5-1  -  inv260(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
	:def csb1#5 = :cvs [nw(S#Sys)  .]

	:apply(csb1#5)

		-- Goal`5-1-1 Success by reduction
		:apply (rd)

		-- Goal`5-1-2  -  inv260(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb2#5 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb2#5)

			-- Goal`5-1-2-1 Success by reduction
			:apply (rd)

			-- Goal`5-1-2-2  -  inv260(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb3#5 = :ctf [p1@Prin  .]

			:apply(csb3#5)

				-- Goal`5-1-2-2-1 Success by reduction
				:apply (rd)

		-- Goal`5-1-3  -  inv260(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb4#5 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb4#5)

			-- Goal`5-1-3-1 Success by reduction
			:apply (rd)

			-- Goal`5-1-3-2  -  inv260(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb5#5 = :ctf [p1@Prin  .]

			:apply(csb5#5)

				-- Goal`5-1-3-2-1 Success by reduction
				:apply (rd)

		-- Goal`5-1-4  -  inv260(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb6#5 = :ctf {eq C#Cipher3  = C#EVS5-1.SubCipher3 .}

		:apply(csb6#5)

			-- Goal`5-1-4-1  -  inv260(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb7#5 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

			:apply(csb7#5)

				-- Goal`5-1-4-1-1 Success by reduction
				:apply (rd)

				-- Goal`5-1-4-1-2  -  inv260(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb8#5 = :ctf [p1@Prin  .]

				:apply(csb8#5)

					-- Goal`5-1-4-1-2-1 Success by reduction
					:apply (rd)

			-- Goal`5-1-4-2  -  inv260(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb9#5 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

			:apply(csb9#5)

				-- Goal`5-1-4-2-1 Success by reduction
				:apply (rd)

				-- Goal`5-1-4-2-2  -  inv260(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb10#5 = :ctf [p1@Prin  .]

				:apply(csb10#5)

					-- Goal`5-1-4-2-2-1 Success by reduction
					:apply (rd)


:sel(7)
	:apply(tc)

	-- The corresponding proof score was not present.
	:apply (rd)


:sel(8)
	:apply(tc)

	-- Goal`8-1  -  inv260(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
	:def csb1#8 = :cvs [ur(S#Sys)  .]

	:apply(csb1#8)

		-- Goal`8-1-1 Success by implication and reduction.
		:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

		:apply (rd)

		-- Goal`8-1-2  -  inv260(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb2#8 = :ctf {eq EVS8-1.SubRand  = R#Rand .}

		:apply(csb2#8)

			-- Goal`8-1-2-1 Success by implication and reduction.
			:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

			:apply (rd)

			-- Goal`8-1-2-2  -  inv260(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb3#8 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

			:apply(csb3#8)

				-- Goal`8-1-2-2-1 Success by reduction
				:apply (rd)

				-- Goal`8-1-2-2-2  -  inv260(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb4#8 = :ctf [p1@Prin  .]

				:apply(csb4#8)

					-- Goal`8-1-2-2-2-1 Success by reduction
					:apply (rd)


:sel(2)
	:apply(tc)

	-- Goal`2-1  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
	:def csb1#2 = :cvs [nw(S#Sys)  .]

	:apply(csb1#2)

		-- Goal`2-1-1  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb2#2 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb2#2)

			-- Goal`2-1-1-1 Success by reduction
			:apply (rd)

			-- Goal`2-1-1-2  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb3#2 = :ctf [p1@Prin  .]

			:apply(csb3#2)

				-- Goal`2-1-1-2-1 Success by reduction
				:apply (rd)

		-- Goal`2-1-2  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb4#2 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb4#2)

			-- Goal`2-1-2-1 Success by reduction
			:apply (rd)

			-- Goal`2-1-2-2  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb5#2 = :ctf {eq nonce(C#EVS2-1.SubCipher1)  = N#Nonce .}

			:apply(csb5#2)

				-- Goal`2-1-2-2-1  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb6#2 = :ctf [p1@Prin  .]

				:apply(csb6#2)

					-- Goal`2-1-2-2-1-1 Success by reduction
					:apply (rd)

				-- Goal`2-1-2-2-2  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb7#2 = :ctf [p1@Prin  .]

				:apply(csb7#2)

					-- Goal`2-1-2-2-2-1 Success by reduction
					:apply (rd)

		-- Goal`2-1-3  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb8#2 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb8#2)

			-- Goal`2-1-3-1 Success by reduction
			:apply (rd)

			-- Goal`2-1-3-2  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb9#2 = :ctf {eq nonce1(C#EVS2-1.SubCipher2)  = N#Nonce .}

			:apply(csb9#2)

				-- Goal`2-1-3-2-1  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb10#2 = :ctf {eq nonce2(C#EVS2-1.SubCipher2)  = N#Nonce .}

				:apply(csb10#2)

					-- Goal`2-1-3-2-1-1  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb11#2 = :ctf [p1@Prin  .]

					:apply(csb11#2)

						-- Goal`2-1-3-2-1-1-1 Success by reduction
						:apply (rd)

					-- Goal`2-1-3-2-1-2  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb12#2 = :ctf [p1@Prin  .]

					:apply(csb12#2)

						-- Goal`2-1-3-2-1-2-1 Success by reduction
						:apply (rd)

				-- Goal`2-1-3-2-2  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb13#2 = :ctf {eq nonce2(C#EVS2-1.SubCipher2)  = N#Nonce .}

				:apply(csb13#2)

					-- Goal`2-1-3-2-2-1  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb14#2 = :ctf [p1@Prin  .]

					:apply(csb14#2)

						-- Goal`2-1-3-2-2-1-1 Success by reduction
						:apply (rd)

					-- Goal`2-1-3-2-2-2  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb15#2 = :ctf [p1@Prin  .]

					:apply(csb15#2)

						-- Goal`2-1-3-2-2-2-1 Success by reduction
						:apply (rd)

		-- Goal`2-1-4  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb16#2 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb16#2)

			-- Goal`2-1-4-1 Success by reduction
			:apply (rd)

			-- Goal`2-1-4-2  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb17#2 = :ctf {eq nonce(C#EVS2-1.SubCipher3)  = N#Nonce .}

			:apply(csb17#2)

				-- Goal`2-1-4-2-1  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb18#2 = :ctf [p1@Prin  .]

				:apply(csb18#2)

					-- Goal`2-1-4-2-1-1 Success by reduction
					:apply (rd)

				-- Goal`2-1-4-2-2  -  inv260(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb19#2 = :ctf [p1@Prin  .]

				:apply(csb19#2)

					-- Goal`2-1-4-2-2-1 Success by reduction
					:apply (rd)


:sel(6)
	:apply(tc)

	-- Goal`6-1  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
	:def csb1#6 = :cvs [nw(S#Sys)  .]

	:apply(csb1#6)

		-- Goal`6-1-1  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb2#6 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb2#6)

			-- Goal`6-1-1-1 Success by reduction
			:apply (rd)

			-- Goal`6-1-1-2  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb3#6 = :ctf [p1@Prin  .]

			:apply(csb3#6)

				-- Goal`6-1-1-2-1 Success by reduction
				:apply (rd)

		-- Goal`6-1-2  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb4#6 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb4#6)

			-- Goal`6-1-2-1 Success by reduction
			:apply (rd)

			-- Goal`6-1-2-2  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb5#6 = :ctf {eq nonce(C#EVS6-1.SubCipher1)  = N#Nonce .}

			:apply(csb5#6)

				-- Goal`6-1-2-2-1  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb6#6 = :ctf [p1@Prin  .]

				:apply(csb6#6)

					-- Goal`6-1-2-2-1-1 Success by reduction
					:apply (rd)

				-- Goal`6-1-2-2-2  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb7#6 = :ctf [p1@Prin  .]

				:apply(csb7#6)

					-- Goal`6-1-2-2-2-1 Success by reduction
					:apply (rd)

		-- Goal`6-1-3  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb8#6 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb8#6)

			-- Goal`6-1-3-1 Success by reduction
			:apply (rd)

			-- Goal`6-1-3-2  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb9#6 = :ctf {eq nonce1(C#EVS6-1.SubCipher2)  = N#Nonce .}

			:apply(csb9#6)

				-- Goal`6-1-3-2-1  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb10#6 = :ctf {eq nonce2(C#EVS6-1.SubCipher2)  = N#Nonce .}

				:apply(csb10#6)

					-- Goal`6-1-3-2-1-1  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb11#6 = :ctf [p1@Prin  .]

					:apply(csb11#6)

						-- Goal`6-1-3-2-1-1-1 Success by reduction
						:apply (rd)

					-- Goal`6-1-3-2-1-2  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb12#6 = :ctf [p1@Prin  .]

					:apply(csb12#6)

						-- Goal`6-1-3-2-1-2-1 Success by reduction
						:apply (rd)

				-- Goal`6-1-3-2-2  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb13#6 = :ctf {eq nonce2(C#EVS6-1.SubCipher2)  = N#Nonce .}

				:apply(csb13#6)

					-- Goal`6-1-3-2-2-1  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb14#6 = :ctf [p1@Prin  .]

					:apply(csb14#6)

						-- Goal`6-1-3-2-2-1-1 Success by reduction
						:apply (rd)

					-- Goal`6-1-3-2-2-2  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb15#6 = :ctf [p1@Prin  .]

					:apply(csb15#6)

						-- Goal`6-1-3-2-2-2-1 Success by reduction
						:apply (rd)

		-- Goal`6-1-4  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb16#6 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb16#6)

			-- Goal`6-1-4-1 Success by reduction
			:apply (rd)

			-- Goal`6-1-4-2  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb17#6 = :ctf {eq nonce(C#EVS6-1.SubCipher3)  = N#Nonce .}

			:apply(csb17#6)

				-- Goal`6-1-4-2-1  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb18#6 = :ctf [p1@Prin  .]

				:apply(csb18#6)

					-- Goal`6-1-4-2-1-1 Success by reduction
					:apply (rd)

				-- Goal`6-1-4-2-2  -  inv260(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb19#6 = :ctf [p1@Prin  .]

				:apply(csb19#6)

					-- Goal`6-1-4-2-2-1 Success by reduction
					:apply (rd)


:sel(4)
	:apply(tc)

	-- Goal`4-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
	:def csb1#4 = :cvs [nw(S#Sys)  .]

	:apply(csb1#4)

		-- Goal`4-1-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb2#4 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb2#4)

			-- Goal`4-1-1-1 Success by reduction
			:apply (rd)

			-- Goal`4-1-1-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb3#4 = :ctf [p1@Prin  .]

			:apply(csb3#4)

				-- Goal`4-1-1-2-1 Success by reduction
				:apply (rd)

		-- Goal`4-1-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb4#4 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb4#4)

			-- Goal`4-1-2-1 Success by reduction
			:apply (rd)

			-- Goal`4-1-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb5#4 = :ctf {eq nonce(C#EVS4-1.SubCipher1)  = N#Nonce .}

			:apply(csb5#4)

				-- Goal`4-1-2-2-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb6#4 = :ctf {eq N#Nonce  = N0#Nonce .}

				:apply(csb6#4)

					-- Goal`4-1-2-2-1-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb7#4 = :ctf [p1@Prin  .]

					:apply(csb7#4)

						-- Goal`4-1-2-2-1-1-1 Success by reduction
						:apply (rd)

					-- Goal`4-1-2-2-1-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb8#4 = :ctf [p1@Prin  .]

					:apply(csb8#4)

						-- Goal`4-1-2-2-1-2-1 Success by reduction
						:apply (rd)

				-- Goal`4-1-2-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb9#4 = :ctf {eq nonce(C#EVS4-1.SubCipher1)  = N0#Nonce .}

				:apply(csb9#4)

					-- Goal`4-1-2-2-2-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb10#4 = :ctf {eq N#Nonce  = N0#Nonce .}

					:apply(csb10#4)

						-- Goal`4-1-2-2-2-1-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb11#4 = :ctf [p1@Prin  .]

						:apply(csb11#4)

							-- Goal`4-1-2-2-2-1-1-1 Success by reduction
							:apply (rd)

						-- Goal`4-1-2-2-2-1-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb12#4 = :ctf [p1@Prin  .]

						:apply(csb12#4)

							-- Goal`4-1-2-2-2-1-2-1 Success by reduction
							:apply (rd)

					-- Goal`4-1-2-2-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb13#4 = :ctf [p1@Prin  .]

					:apply(csb13#4)

						-- Goal`4-1-2-2-2-2-1 Success by reduction
						:apply (rd)

		-- Goal`4-1-3  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb14#4 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb14#4)

			-- Goal`4-1-3-1 Success by reduction
			:apply (rd)

			-- Goal`4-1-3-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb15#4 = :ctf {eq nonce1(C#EVS4-1.SubCipher2)  = N#Nonce .}

			:apply(csb15#4)

				-- Goal`4-1-3-2-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb16#4 = :ctf {eq N#Nonce  = N0#Nonce .}

				:apply(csb16#4)

					-- Goal`4-1-3-2-1-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb17#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N0#Nonce .}

					:apply(csb17#4)

						-- Goal`4-1-3-2-1-1-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb18#4 = :ctf [p1@Prin  .]

						:apply(csb18#4)

							-- Goal`4-1-3-2-1-1-1-1 Success by reduction
							:apply (rd)

						-- Goal`4-1-3-2-1-1-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb19#4 = :ctf [p1@Prin  .]

						:apply(csb19#4)

							-- Goal`4-1-3-2-1-1-2-1 Success by reduction
							:apply (rd)

					-- Goal`4-1-3-2-1-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb20#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N#Nonce .}

					:apply(csb20#4)

						-- Goal`4-1-3-2-1-2-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb21#4 = :ctf [p1@Prin  .]

						:apply(csb21#4)

							-- Goal`4-1-3-2-1-2-1-1 Success by reduction
							:apply (rd)

						-- Goal`4-1-3-2-1-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb22#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N0#Nonce .}

						:apply(csb22#4)

							-- Goal`4-1-3-2-1-2-2-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb23#4 = :ctf [p1@Prin  .]

							:apply(csb23#4)

								-- Goal`4-1-3-2-1-2-2-1-1 Success by reduction
								:apply (rd)

							-- Goal`4-1-3-2-1-2-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb24#4 = :ctf [p1@Prin  .]

							:apply(csb24#4)

								-- Goal`4-1-3-2-1-2-2-2-1 Success by reduction
								:apply (rd)

				-- Goal`4-1-3-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb25#4 = :ctf {eq nonce1(C#EVS4-1.SubCipher2)  = N0#Nonce .}

				:apply(csb25#4)

					-- Goal`4-1-3-2-2-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb26#4 = :ctf {eq N#Nonce  = N0#Nonce .}

					:apply(csb26#4)

						-- Goal`4-1-3-2-2-1-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb27#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N0#Nonce .}

						:apply(csb27#4)

							-- Goal`4-1-3-2-2-1-1-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb28#4 = :ctf [p1@Prin  .]

							:apply(csb28#4)

								-- Goal`4-1-3-2-2-1-1-1-1 Success by reduction
								:apply (rd)

							-- Goal`4-1-3-2-2-1-1-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb29#4 = :ctf [p1@Prin  .]

							:apply(csb29#4)

								-- Goal`4-1-3-2-2-1-1-2-1 Success by reduction
								:apply (rd)

						-- Goal`4-1-3-2-2-1-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb30#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N#Nonce .}

						:apply(csb30#4)

							-- Goal`4-1-3-2-2-1-2-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb31#4 = :ctf [p1@Prin  .]

							:apply(csb31#4)

								-- Goal`4-1-3-2-2-1-2-1-1 Success by reduction
								:apply (rd)

							-- Goal`4-1-3-2-2-1-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb32#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N0#Nonce .}

							:apply(csb32#4)

								-- Goal`4-1-3-2-2-1-2-2-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb33#4 = :ctf [p1@Prin  .]

								:apply(csb33#4)

									-- Goal`4-1-3-2-2-1-2-2-1-1 Success by reduction
									:apply (rd)

								-- Goal`4-1-3-2-2-1-2-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb34#4 = :ctf [p1@Prin  .]

								:apply(csb34#4)

									-- Goal`4-1-3-2-2-1-2-2-2-1 Success by reduction
									:apply (rd)

					-- Goal`4-1-3-2-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb35#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N#Nonce .}

					:apply(csb35#4)

						-- Goal`4-1-3-2-2-2-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb36#4 = :ctf {eq N#Nonce  = N0#Nonce .}

						:apply(csb36#4)

							-- Goal`4-1-3-2-2-2-1-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb37#4 = :ctf [p1@Prin  .]

							:apply(csb37#4)

								-- Goal`4-1-3-2-2-2-1-1-1 Success by reduction
								:apply (rd)

							-- Goal`4-1-3-2-2-2-1-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb38#4 = :ctf [p1@Prin  .]

							:apply(csb38#4)

								-- Goal`4-1-3-2-2-2-1-2-1 Success by reduction
								:apply (rd)

						-- Goal`4-1-3-2-2-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb39#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N0#Nonce .}

						:apply(csb39#4)

							-- Goal`4-1-3-2-2-2-2-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb40#4 = :ctf {eq N#Nonce  = N0#Nonce .}

							:apply(csb40#4)

								-- Goal`4-1-3-2-2-2-2-1-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb41#4 = :ctf [p1@Prin  .]

								:apply(csb41#4)

									-- Goal`4-1-3-2-2-2-2-1-1-1 Success by reduction
									:apply (rd)

								-- Goal`4-1-3-2-2-2-2-1-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb42#4 = :ctf [p1@Prin  .]

								:apply(csb42#4)

									-- Goal`4-1-3-2-2-2-2-1-2-1 Success by reduction
									:apply (rd)

							-- Goal`4-1-3-2-2-2-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb43#4 = :ctf [p1@Prin  .]

							:apply(csb43#4)

								-- Goal`4-1-3-2-2-2-2-2-1 Success by reduction
								:apply (rd)

		-- Goal`4-1-4  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb44#4 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

		:apply(csb44#4)

			-- Goal`4-1-4-1 Success by reduction
			:apply (rd)

			-- Goal`4-1-4-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb45#4 = :ctf {eq nonce(C#EVS4-1.SubCipher3)  = N#Nonce .}

			:apply(csb45#4)

				-- Goal`4-1-4-2-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb46#4 = :ctf {eq N#Nonce  = N0#Nonce .}

				:apply(csb46#4)

					-- Goal`4-1-4-2-1-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb47#4 = :ctf [p1@Prin  .]

					:apply(csb47#4)

						-- Goal`4-1-4-2-1-1-1 Success by reduction
						:apply (rd)

					-- Goal`4-1-4-2-1-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb48#4 = :ctf [p1@Prin  .]

					:apply(csb48#4)

						-- Goal`4-1-4-2-1-2-1 Success by reduction
						:apply (rd)

				-- Goal`4-1-4-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb49#4 = :ctf {eq nonce(C#EVS4-1.SubCipher3)  = N0#Nonce .}

				:apply(csb49#4)

					-- Goal`4-1-4-2-2-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb50#4 = :ctf {eq N#Nonce  = N0#Nonce .}

					:apply(csb50#4)

						-- Goal`4-1-4-2-2-1-1  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb51#4 = :ctf [p1@Prin  .]

						:apply(csb51#4)

							-- Goal`4-1-4-2-2-1-1-1 Success by reduction
							:apply (rd)

						-- Goal`4-1-4-2-2-1-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb52#4 = :ctf [p1@Prin  .]

						:apply(csb52#4)

							-- Goal`4-1-4-2-2-1-2-1 Success by reduction
							:apply (rd)

					-- Goal`4-1-4-2-2-2  -  inv260(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb53#4 = :ctf [p1@Prin  .]

					:apply(csb53#4)

						-- Goal`4-1-4-2-2-2-1 Success by reduction
						:apply (rd)


:sel(9)
	:apply(tc)

	-- Goal`9-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
	:def csb1#9 = :cvs [nw(S#Sys)  .]

	:apply(csb1#9)

		-- Goal`9-1-1 Success by reduction
		:apply (rd)

		-- Goal`9-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
	:def csb2#9 = :cvs [ur(S#Sys)  .]

	:apply(csb2#9)

			-- Goal`9-1-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb3#9 = :ctf {eq cipher1(M#Msg)  = C#EVS9-1.SubCipher1 .}

			:apply(csb3#9)

				-- Goal`9-1-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb4#9 = :ctf {eq creator(M#Msg)  = P#EVS9-1.SubPrin .}

				:apply(csb4#9)

					-- Goal`9-1-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb5#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

					:apply(csb5#9)

						-- Goal`9-1-2-1-1-1-1 Success by reduction
						:apply (rd)

						-- Goal`9-1-2-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb6#9 = :ctf {eq key(C#EVS9-1.SubCipher1)  = P#Prin .}

						:apply(csb6#9)

							-- Goal`9-1-2-1-1-1-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb7#9 = :ctf {eq principal(C#EVS9-1.SubCipher1)  = sender(M#Msg) .}

							:apply(csb7#9)

								-- Goal`9-1-2-1-1-1-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb8#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb8#9)

									-- Goal`9-1-2-1-1-1-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb9#9 = :ctf {eq P#Prin  = P1#EVS9-1.SubPrin .}

									:apply(csb9#9)

										-- Goal`9-1-2-1-1-1-2-1-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb10#9 = :ctf {eq sender(M#Msg)  = P0#EVS9-1.SubPrin .}

										:apply(csb10#9)

											-- Goal`9-1-2-1-1-1-2-1-1-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb11#9 = :ctf [p1@Prin  .]

											:apply(csb11#9)

												-- Goal`9-1-2-1-1-1-2-1-1-1-1-1-1 Success by reduction
												:apply (rd)

											-- Goal`9-1-2-1-1-1-2-1-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb12#9 = :ctf [p1@Prin  .]

											:apply(csb12#9)

												-- Goal`9-1-2-1-1-1-2-1-1-1-1-2-1 Success by reduction
												:apply (rd)

										-- Goal`9-1-2-1-1-1-2-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb13#9 = :ctf [p1@Prin  .]

										:apply(csb13#9)

											-- Goal`9-1-2-1-1-1-2-1-1-1-2-1 Success by reduction
											:apply (rd)

									-- Goal`9-1-2-1-1-1-2-1-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-2-1-1-1-2-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`9-1-2-1-1-1-2-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

					-- Goal`9-1-2-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb14#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

					:apply(csb14#9)

						-- Goal`9-1-2-1-1-2-1 Success by reduction
						:apply (rd)

						-- Goal`9-1-2-1-1-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb15#9 = :ctf {eq key(C#EVS9-1.SubCipher1)  = P#Prin .}

						:apply(csb15#9)

							-- Goal`9-1-2-1-1-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb16#9 = :ctf {eq principal(C#EVS9-1.SubCipher1)  = sender(M#Msg) .}

							:apply(csb16#9)

								-- Goal`9-1-2-1-1-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb17#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb17#9)

									-- Goal`9-1-2-1-1-2-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb18#9 = :ctf [p1@Prin  .]

									:apply(csb18#9)

										-- Goal`9-1-2-1-1-2-2-1-1-1-1 Success by reduction
										:apply (rd)

									-- Goal`9-1-2-1-1-2-2-1-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-2-1-1-2-2-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`9-1-2-1-1-2-2-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

				-- Goal`9-1-2-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb19#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

				:apply(csb19#9)

					-- Goal`9-1-2-1-2-1 Success by reduction
					:apply (rd)

					-- Goal`9-1-2-1-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb20#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

					:apply(csb20#9)

						-- Goal`9-1-2-1-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb21#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

						:apply(csb21#9)

							-- Goal`9-1-2-1-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb22#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

							:apply(csb22#9)

								-- Goal`9-1-2-1-2-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb23#9 = :ctf [p1@Prin  .]

								:apply(csb23#9)

									-- Goal`9-1-2-1-2-2-1-1-1-1 Success by reduction
									:apply (rd)

								-- Goal`9-1-2-1-2-2-1-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`9-1-2-1-2-2-1-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

						-- Goal`9-1-2-1-2-2-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

			-- Goal`9-1-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb24#9 = :ctf {eq EVS9-1-2.SubRand  = R#Rand .}

			:apply(csb24#9)

				-- Goal`9-1-2-2-1 Success by implication and reduction.
				:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

				:apply (rd)

				-- Goal`9-1-2-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb25#9 = :ctf {eq cipher1(M#Msg)  = C#EVS9-1.SubCipher1 .}

				:apply(csb25#9)

					-- Goal`9-1-2-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb26#9 = :ctf {eq creator(M#Msg)  = P#EVS9-1.SubPrin .}

					:apply(csb26#9)

						-- Goal`9-1-2-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb27#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb27#9)

							-- Goal`9-1-2-2-2-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`9-1-2-2-2-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb28#9 = :ctf {eq key(C#EVS9-1.SubCipher1)  = P#Prin .}

							:apply(csb28#9)

								-- Goal`9-1-2-2-2-1-1-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb29#9 = :ctf {eq principal(C#EVS9-1.SubCipher1)  = sender(M#Msg) .}

								:apply(csb29#9)

									-- Goal`9-1-2-2-2-1-1-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb30#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

									:apply(csb30#9)

										-- Goal`9-1-2-2-2-1-1-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb31#9 = :ctf {eq P#Prin  = P1#EVS9-1.SubPrin .}

										:apply(csb31#9)

											-- Goal`9-1-2-2-2-1-1-2-1-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb32#9 = :ctf {eq sender(M#Msg)  = P0#EVS9-1.SubPrin .}

											:apply(csb32#9)

												-- Goal`9-1-2-2-2-1-1-2-1-1-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb33#9 = :ctf [p1@Prin  .]

												:apply(csb33#9)

													-- Goal`9-1-2-2-2-1-1-2-1-1-1-1-1-1 Success by reduction
													:apply (rd)

												-- Goal`9-1-2-2-2-1-1-2-1-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb34#9 = :ctf [p1@Prin  .]

												:apply(csb34#9)

													-- Goal`9-1-2-2-2-1-1-2-1-1-1-1-2-1 Success by reduction
													:apply (rd)

											-- Goal`9-1-2-2-2-1-1-2-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb35#9 = :ctf [p1@Prin  .]

											:apply(csb35#9)

												-- Goal`9-1-2-2-2-1-1-2-1-1-1-2-1 Success by reduction
												:apply (rd)

										-- Goal`9-1-2-2-2-1-1-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`9-1-2-2-2-1-1-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-2-2-2-1-1-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

						-- Goal`9-1-2-2-2-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb36#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb36#9)

							-- Goal`9-1-2-2-2-1-2-1 Success by reduction
							:apply (rd)

							-- Goal`9-1-2-2-2-1-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb37#9 = :ctf {eq key(C#EVS9-1.SubCipher1)  = P#Prin .}

							:apply(csb37#9)

								-- Goal`9-1-2-2-2-1-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb38#9 = :ctf {eq principal(C#EVS9-1.SubCipher1)  = sender(M#Msg) .}

								:apply(csb38#9)

									-- Goal`9-1-2-2-2-1-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb39#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

									:apply(csb39#9)

										-- Goal`9-1-2-2-2-1-2-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb40#9 = :ctf [p1@Prin  .]

										:apply(csb40#9)

											-- Goal`9-1-2-2-2-1-2-2-1-1-1-1 Success by reduction
											:apply (rd)

										-- Goal`9-1-2-2-2-1-2-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`9-1-2-2-2-1-2-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-2-2-2-1-2-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

					-- Goal`9-1-2-2-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb41#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

					:apply(csb41#9)

						-- Goal`9-1-2-2-2-2-1 Success by reduction
						:apply (rd)

						-- Goal`9-1-2-2-2-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb42#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

						:apply(csb42#9)

							-- Goal`9-1-2-2-2-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb43#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

							:apply(csb43#9)

								-- Goal`9-1-2-2-2-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb44#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb44#9)

									-- Goal`9-1-2-2-2-2-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb45#9 = :ctf [p1@Prin  .]

									:apply(csb45#9)

										-- Goal`9-1-2-2-2-2-2-1-1-1-1 Success by reduction
										:apply (rd)

									-- Goal`9-1-2-2-2-2-2-1-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-2-2-2-2-2-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`9-1-2-2-2-2-2-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

		-- Goal`9-1-3  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
	:def csb46#9 = :cvs [ur(S#Sys)  .]

	:apply(csb46#9)

			-- Goal`9-1-3-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb47#9 = :ctf {eq cipher2(M#Msg)  = C#EVS9-1.SubCipher2 .}

			:apply(csb47#9)

				-- Goal`9-1-3-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb48#9 = :ctf {eq creator(M#Msg)  = P#EVS9-1.SubPrin .}

				:apply(csb48#9)

					-- Goal`9-1-3-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb49#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

					:apply(csb49#9)

						-- Goal`9-1-3-1-1-1-1 Success by reduction
						:apply (rd)

						-- Goal`9-1-3-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb50#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

						:apply(csb50#9)

							-- Goal`9-1-3-1-1-1-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb51#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

							:apply(csb51#9)

								-- Goal`9-1-3-1-1-1-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb52#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb52#9)

									-- Goal`9-1-3-1-1-1-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb53#9 = :ctf {eq P#Prin  = P1#EVS9-1.SubPrin .}

									:apply(csb53#9)

										-- Goal`9-1-3-1-1-1-2-1-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb54#9 = :ctf {eq sender(M#Msg)  = P0#EVS9-1.SubPrin .}

										:apply(csb54#9)

											-- Goal`9-1-3-1-1-1-2-1-1-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb55#9 = :ctf [p1@Prin  .]

											:apply(csb55#9)

												-- Goal`9-1-3-1-1-1-2-1-1-1-1-1-1 Success by reduction
												:apply (rd)

											-- Goal`9-1-3-1-1-1-2-1-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb56#9 = :ctf [p1@Prin  .]

											:apply(csb56#9)

												-- Goal`9-1-3-1-1-1-2-1-1-1-1-2-1 Success by reduction
												:apply (rd)

										-- Goal`9-1-3-1-1-1-2-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb57#9 = :ctf [p1@Prin  .]

										:apply(csb57#9)

											-- Goal`9-1-3-1-1-1-2-1-1-1-2-1 Success by reduction
											:apply (rd)

									-- Goal`9-1-3-1-1-1-2-1-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-3-1-1-1-2-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`9-1-3-1-1-1-2-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

					-- Goal`9-1-3-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb58#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

					:apply(csb58#9)

						-- Goal`9-1-3-1-1-2-1 Success by reduction
						:apply (rd)

						-- Goal`9-1-3-1-1-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb59#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

						:apply(csb59#9)

							-- Goal`9-1-3-1-1-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb60#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

							:apply(csb60#9)

								-- Goal`9-1-3-1-1-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb61#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb61#9)

									-- Goal`9-1-3-1-1-2-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb62#9 = :ctf [p1@Prin  .]

									:apply(csb62#9)

										-- Goal`9-1-3-1-1-2-2-1-1-1-1 Success by reduction
										:apply (rd)

									-- Goal`9-1-3-1-1-2-2-1-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-3-1-1-2-2-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`9-1-3-1-1-2-2-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

				-- Goal`9-1-3-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb63#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

				:apply(csb63#9)

					-- Goal`9-1-3-1-2-1 Success by reduction
					:apply (rd)

					-- Goal`9-1-3-1-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb64#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

					:apply(csb64#9)

						-- Goal`9-1-3-1-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb65#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

						:apply(csb65#9)

							-- Goal`9-1-3-1-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb66#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

							:apply(csb66#9)

								-- Goal`9-1-3-1-2-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb67#9 = :ctf [p1@Prin  .]

								:apply(csb67#9)

									-- Goal`9-1-3-1-2-2-1-1-1-1 Success by reduction
									:apply (rd)

								-- Goal`9-1-3-1-2-2-1-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`9-1-3-1-2-2-1-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

						-- Goal`9-1-3-1-2-2-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

			-- Goal`9-1-3-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb68#9 = :ctf {eq EVS9-1-3.SubRand  = R#Rand .}

			:apply(csb68#9)

				-- Goal`9-1-3-2-1 Success by implication and reduction.
				:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

				:apply (rd)

				-- Goal`9-1-3-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb69#9 = :ctf {eq cipher2(M#Msg)  = C#EVS9-1.SubCipher2 .}

				:apply(csb69#9)

					-- Goal`9-1-3-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb70#9 = :ctf {eq creator(M#Msg)  = P#EVS9-1.SubPrin .}

					:apply(csb70#9)

						-- Goal`9-1-3-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb71#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb71#9)

							-- Goal`9-1-3-2-2-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`9-1-3-2-2-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb72#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

							:apply(csb72#9)

								-- Goal`9-1-3-2-2-1-1-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb73#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

								:apply(csb73#9)

									-- Goal`9-1-3-2-2-1-1-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb74#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

									:apply(csb74#9)

										-- Goal`9-1-3-2-2-1-1-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb75#9 = :ctf {eq P#Prin  = P1#EVS9-1.SubPrin .}

										:apply(csb75#9)

											-- Goal`9-1-3-2-2-1-1-2-1-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb76#9 = :ctf {eq sender(M#Msg)  = P0#EVS9-1.SubPrin .}

											:apply(csb76#9)

												-- Goal`9-1-3-2-2-1-1-2-1-1-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb77#9 = :ctf [p1@Prin  .]

												:apply(csb77#9)

													-- Goal`9-1-3-2-2-1-1-2-1-1-1-1-1-1 Success by reduction
													:apply (rd)

												-- Goal`9-1-3-2-2-1-1-2-1-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb78#9 = :ctf [p1@Prin  .]

												:apply(csb78#9)

													-- Goal`9-1-3-2-2-1-1-2-1-1-1-1-2-1 Success by reduction
													:apply (rd)

											-- Goal`9-1-3-2-2-1-1-2-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb79#9 = :ctf [p1@Prin  .]

											:apply(csb79#9)

												-- Goal`9-1-3-2-2-1-1-2-1-1-1-2-1 Success by reduction
												:apply (rd)

										-- Goal`9-1-3-2-2-1-1-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`9-1-3-2-2-1-1-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-3-2-2-1-1-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

						-- Goal`9-1-3-2-2-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb80#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb80#9)

							-- Goal`9-1-3-2-2-1-2-1 Success by reduction
							:apply (rd)

							-- Goal`9-1-3-2-2-1-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb81#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

							:apply(csb81#9)

								-- Goal`9-1-3-2-2-1-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb82#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

								:apply(csb82#9)

									-- Goal`9-1-3-2-2-1-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb83#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

									:apply(csb83#9)

										-- Goal`9-1-3-2-2-1-2-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb84#9 = :ctf [p1@Prin  .]

										:apply(csb84#9)

											-- Goal`9-1-3-2-2-1-2-2-1-1-1-1 Success by reduction
											:apply (rd)

										-- Goal`9-1-3-2-2-1-2-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`9-1-3-2-2-1-2-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-3-2-2-1-2-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

					-- Goal`9-1-3-2-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb85#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

					:apply(csb85#9)

						-- Goal`9-1-3-2-2-2-1 Success by reduction
						:apply (rd)

						-- Goal`9-1-3-2-2-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb86#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

						:apply(csb86#9)

							-- Goal`9-1-3-2-2-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb87#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

							:apply(csb87#9)

								-- Goal`9-1-3-2-2-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb88#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb88#9)

									-- Goal`9-1-3-2-2-2-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb89#9 = :ctf [p1@Prin  .]

									:apply(csb89#9)

										-- Goal`9-1-3-2-2-2-2-1-1-1-1 Success by reduction
										:apply (rd)

									-- Goal`9-1-3-2-2-2-2-1-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-3-2-2-2-2-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`9-1-3-2-2-2-2-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

		-- Goal`9-1-4  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
	:def csb90#9 = :cvs [ur(S#Sys)  .]

	:apply(csb90#9)

			-- Goal`9-1-4-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb91#9 = :ctf {eq cipher3(M#Msg)  = C#EVS9-1.SubCipher3 .}

			:apply(csb91#9)

				-- Goal`9-1-4-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb92#9 = :ctf {eq creator(M#Msg)  = P#EVS9-1.SubPrin .}

				:apply(csb92#9)

					-- Goal`9-1-4-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb93#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

					:apply(csb93#9)

						-- Goal`9-1-4-1-1-1-1 Success by reduction
						:apply (rd)

						-- Goal`9-1-4-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb94#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

						:apply(csb94#9)

							-- Goal`9-1-4-1-1-1-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb95#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

							:apply(csb95#9)

								-- Goal`9-1-4-1-1-1-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb96#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb96#9)

									-- Goal`9-1-4-1-1-1-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb97#9 = :ctf {eq P#Prin  = P1#EVS9-1.SubPrin .}

									:apply(csb97#9)

										-- Goal`9-1-4-1-1-1-2-1-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb98#9 = :ctf {eq sender(M#Msg)  = P0#EVS9-1.SubPrin .}

										:apply(csb98#9)

											-- Goal`9-1-4-1-1-1-2-1-1-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb99#9 = :ctf [p1@Prin  .]

											:apply(csb99#9)

												-- Goal`9-1-4-1-1-1-2-1-1-1-1-1-1 Success by reduction
												:apply (rd)

											-- Goal`9-1-4-1-1-1-2-1-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb100#9 = :ctf [p1@Prin  .]

											:apply(csb100#9)

												-- Goal`9-1-4-1-1-1-2-1-1-1-1-2-1 Success by reduction
												:apply (rd)

										-- Goal`9-1-4-1-1-1-2-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb101#9 = :ctf [p1@Prin  .]

										:apply(csb101#9)

											-- Goal`9-1-4-1-1-1-2-1-1-1-2-1 Success by reduction
											:apply (rd)

									-- Goal`9-1-4-1-1-1-2-1-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-4-1-1-1-2-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`9-1-4-1-1-1-2-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

					-- Goal`9-1-4-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb102#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

					:apply(csb102#9)

						-- Goal`9-1-4-1-1-2-1 Success by reduction
						:apply (rd)

						-- Goal`9-1-4-1-1-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb103#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

						:apply(csb103#9)

							-- Goal`9-1-4-1-1-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb104#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

							:apply(csb104#9)

								-- Goal`9-1-4-1-1-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb105#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb105#9)

									-- Goal`9-1-4-1-1-2-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb106#9 = :ctf [p1@Prin  .]

									:apply(csb106#9)

										-- Goal`9-1-4-1-1-2-2-1-1-1-1 Success by reduction
										:apply (rd)

									-- Goal`9-1-4-1-1-2-2-1-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-4-1-1-2-2-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`9-1-4-1-1-2-2-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

				-- Goal`9-1-4-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb107#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

				:apply(csb107#9)

					-- Goal`9-1-4-1-2-1 Success by reduction
					:apply (rd)

					-- Goal`9-1-4-1-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb108#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

					:apply(csb108#9)

						-- Goal`9-1-4-1-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb109#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

						:apply(csb109#9)

							-- Goal`9-1-4-1-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb110#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

							:apply(csb110#9)

								-- Goal`9-1-4-1-2-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb111#9 = :ctf [p1@Prin  .]

								:apply(csb111#9)

									-- Goal`9-1-4-1-2-2-1-1-1-1 Success by reduction
									:apply (rd)

								-- Goal`9-1-4-1-2-2-1-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`9-1-4-1-2-2-1-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

						-- Goal`9-1-4-1-2-2-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

			-- Goal`9-1-4-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb112#9 = :ctf {eq EVS9-1-4.SubRand  = R#Rand .}

			:apply(csb112#9)

				-- Goal`9-1-4-2-1 Success by implication and reduction.
				:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

				:apply (rd)

				-- Goal`9-1-4-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb113#9 = :ctf {eq cipher3(M#Msg)  = C#EVS9-1.SubCipher3 .}

				:apply(csb113#9)

					-- Goal`9-1-4-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb114#9 = :ctf {eq creator(M#Msg)  = P#EVS9-1.SubPrin .}

					:apply(csb114#9)

						-- Goal`9-1-4-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb115#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb115#9)

							-- Goal`9-1-4-2-2-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`9-1-4-2-2-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb116#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

							:apply(csb116#9)

								-- Goal`9-1-4-2-2-1-1-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb117#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

								:apply(csb117#9)

									-- Goal`9-1-4-2-2-1-1-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb118#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

									:apply(csb118#9)

										-- Goal`9-1-4-2-2-1-1-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb119#9 = :ctf {eq P#Prin  = P1#EVS9-1.SubPrin .}

										:apply(csb119#9)

											-- Goal`9-1-4-2-2-1-1-2-1-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb120#9 = :ctf {eq sender(M#Msg)  = P0#EVS9-1.SubPrin .}

											:apply(csb120#9)

												-- Goal`9-1-4-2-2-1-1-2-1-1-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb121#9 = :ctf [p1@Prin  .]

												:apply(csb121#9)

													-- Goal`9-1-4-2-2-1-1-2-1-1-1-1-1-1 Success by reduction
													:apply (rd)

												-- Goal`9-1-4-2-2-1-1-2-1-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb122#9 = :ctf [p1@Prin  .]

												:apply(csb122#9)

													-- Goal`9-1-4-2-2-1-1-2-1-1-1-1-2-1 Success by reduction
													:apply (rd)

											-- Goal`9-1-4-2-2-1-1-2-1-1-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb123#9 = :ctf [p1@Prin  .]

											:apply(csb123#9)

												-- Goal`9-1-4-2-2-1-1-2-1-1-1-2-1 Success by reduction
												:apply (rd)

										-- Goal`9-1-4-2-2-1-1-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`9-1-4-2-2-1-1-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-4-2-2-1-1-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

						-- Goal`9-1-4-2-2-1-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb124#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb124#9)

							-- Goal`9-1-4-2-2-1-2-1 Success by reduction
							:apply (rd)

							-- Goal`9-1-4-2-2-1-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb125#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

							:apply(csb125#9)

								-- Goal`9-1-4-2-2-1-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb126#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

								:apply(csb126#9)

									-- Goal`9-1-4-2-2-1-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb127#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

									:apply(csb127#9)

										-- Goal`9-1-4-2-2-1-2-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb128#9 = :ctf [p1@Prin  .]

										:apply(csb128#9)

											-- Goal`9-1-4-2-2-1-2-2-1-1-1-1 Success by reduction
											:apply (rd)

										-- Goal`9-1-4-2-2-1-2-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`9-1-4-2-2-1-2-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-4-2-2-1-2-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

					-- Goal`9-1-4-2-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb129#9 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

					:apply(csb129#9)

						-- Goal`9-1-4-2-2-2-1 Success by reduction
						:apply (rd)

						-- Goal`9-1-4-2-2-2-2  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb130#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

						:apply(csb130#9)

							-- Goal`9-1-4-2-2-2-2-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb131#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

							:apply(csb131#9)

								-- Goal`9-1-4-2-2-2-2-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb132#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb132#9)

									-- Goal`9-1-4-2-2-2-2-1-1-1  -  inv260(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb133#9 = :ctf [p1@Prin  .]

									:apply(csb133#9)

										-- Goal`9-1-4-2-2-2-2-1-1-1-1 Success by reduction
										:apply (rd)

									-- Goal`9-1-4-2-2-2-2-1-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`9-1-4-2-2-2-2-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`9-1-4-2-2-2-2-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)


:sel(10)
	:apply(tc)

	-- Goal`10-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
	:def csb1#10 = :cvs [nw(S#Sys)  .]

	:apply(csb1#10)

		-- Goal`10-1-1 Success by reduction
		:apply (rd)

		-- Goal`10-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb2#10 = :ctf {eq cipher1(M#Msg)  = C#EVS10-1.SubCipher1 .}

		:apply(csb2#10)

			-- Goal`10-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb3#10 = :ctf {eq cipher1(M0#Msg)  = C#EVS10-1.SubCipher1 .}

			:apply(csb3#10)

				-- Goal`10-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb4#10 = :ctf {eq creator(M#Msg)  = P#EVS10-1.SubPrin .}

				:apply(csb4#10)

					-- Goal`10-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb5#10 = :ctf {eq P#EVS10-1.SubPrin  = P#Prin .}

					:apply(csb5#10)

						-- Goal`10-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb6#10 = :ctf {eq creator(M0#Msg)  = P#Prin .}

						:apply(csb6#10)

							-- Goal`10-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb7#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

							:apply(csb7#10)

								-- Goal`10-1-2-1-1-1-1-1-1 Success by reduction
								:apply (rd)

								-- Goal`10-1-2-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb8#10 = :ctf {eq key(C#EVS10-1.SubCipher1)  = sender(M0#Msg) .}

								:apply(csb8#10)

									-- Goal`10-1-2-1-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb9#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

									:apply(csb9#10)

										-- Goal`10-1-2-1-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb10#10 = :ctf {eq principal(C#EVS10-1.SubCipher1)  = P#Prin .}

										:apply(csb10#10)

											-- Goal`10-1-2-1-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb11#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

											:apply(csb11#10)

												-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb12#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

												:apply(csb12#10)

													-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb13#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb13#10)

														-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb14#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

														:apply(csb14#10)

															-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb15#10 = :ctf {eq sender(M#Msg)  = P0#EVS10-1.SubPrin .}

															:apply(csb15#10)

																-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb16#10 = :ctf [p1@Prin  .]

																:apply(csb16#10)

																	-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb17#10 = :ctf [p1@Prin  .]

																:apply(csb17#10)

																	-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb18#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb18#10)

																-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb19#10 = :ctf [p1@Prin  .]

																:apply(csb19#10)

																	-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

														-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb20#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb20#10)

														-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb21#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb21#10)

															-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb22#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

															:apply(csb22#10)

																-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb23#10 = :ctf [p1@Prin  .]

																:apply(csb23#10)

																	-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb24#10 = :ctf [p1@Prin  .]

																:apply(csb24#10)

																	-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-2-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-1-2-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

												-- Goal`10-1-2-1-1-1-1-1-2-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-2-1-1-1-1-1-2-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-2-1-1-1-1-1-2-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-2-1-1-1-1-1-2-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

							-- Goal`10-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb25#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

							:apply(csb25#10)

								-- Goal`10-1-2-1-1-1-1-2-1 Success by reduction
								:apply (rd)

								-- Goal`10-1-2-1-1-1-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb26#10 = :ctf {eq key(C#EVS10-1.SubCipher1)  = sender(M0#Msg) .}

								:apply(csb26#10)

									-- Goal`10-1-2-1-1-1-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb27#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

									:apply(csb27#10)

										-- Goal`10-1-2-1-1-1-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb28#10 = :ctf {eq principal(C#EVS10-1.SubCipher1)  = P#Prin .}

										:apply(csb28#10)

											-- Goal`10-1-2-1-1-1-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb29#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

											:apply(csb29#10)

												-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb30#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

												:apply(csb30#10)

													-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb31#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb31#10)

														-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb32#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb32#10)

															-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb33#10 = :ctf {eq P#Prin  = P0#EVS10-1.SubPrin .}

															:apply(csb33#10)

																-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb34#10 = :ctf [p1@Prin  .]

																:apply(csb34#10)

																	-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb35#10 = :ctf [p1@Prin  .]

																:apply(csb35#10)

																	-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb36#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb36#10)

														-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb37#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb37#10)

															-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb38#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb38#10)

																-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb39#10 = :ctf [p1@Prin  .]

																:apply(csb39#10)

																	-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-2-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-2-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-1-2-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

												-- Goal`10-1-2-1-1-1-1-2-2-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-2-1-1-1-1-2-2-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-2-1-1-1-1-2-2-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-2-1-1-1-1-2-2-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

						-- Goal`10-1-2-1-1-1-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

					-- Goal`10-1-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb40#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

					:apply(csb40#10)

						-- Goal`10-1-2-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb41#10 = :ctf {eq P#EVS10-1.SubPrin  = P#Prin .}

						:apply(csb41#10)

							-- Goal`10-1-2-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb42#10 = :ctf {eq creator(M0#Msg)  = P#Prin .}

							:apply(csb42#10)

								-- Goal`10-1-2-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb43#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

								:apply(csb43#10)

									-- Goal`10-1-2-1-1-2-1-1-1-1 Success by reduction
									:apply (rd)

									-- Goal`10-1-2-1-1-2-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb44#10 = :ctf {eq key(C#EVS10-1.SubCipher1)  = sender(M0#Msg) .}

									:apply(csb44#10)

										-- Goal`10-1-2-1-1-2-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb45#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

										:apply(csb45#10)

											-- Goal`10-1-2-1-1-2-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb46#10 = :ctf {eq principal(C#EVS10-1.SubCipher1)  = P#Prin .}

											:apply(csb46#10)

												-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb47#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

												:apply(csb47#10)

													-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb48#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

													:apply(csb48#10)

														-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb49#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb49#10)

															-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb50#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

															:apply(csb50#10)

																-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb51#10 = :ctf [p1@Prin  .]

																:apply(csb51#10)

																	-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb52#10 = :ctf [p1@Prin  .]

																:apply(csb52#10)

																	-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb53#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

														:apply(csb53#10)

															-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb54#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

															:apply(csb54#10)

																-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb55#10 = :ctf [p1@Prin  .]

																:apply(csb55#10)

																	-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-1-2-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

													-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-2-1-1-2-1-1-1-2-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-2-1-1-2-1-1-1-2-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-2-1-1-2-1-1-1-2-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

								-- Goal`10-1-2-1-1-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb56#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

								:apply(csb56#10)

									-- Goal`10-1-2-1-1-2-1-1-2-1 Success by reduction
									:apply (rd)

									-- Goal`10-1-2-1-1-2-1-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb57#10 = :ctf {eq key(C#EVS10-1.SubCipher1)  = sender(M0#Msg) .}

									:apply(csb57#10)

										-- Goal`10-1-2-1-1-2-1-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb58#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

										:apply(csb58#10)

											-- Goal`10-1-2-1-1-2-1-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb59#10 = :ctf {eq principal(C#EVS10-1.SubCipher1)  = P#Prin .}

											:apply(csb59#10)

												-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb60#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

												:apply(csb60#10)

													-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb61#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

													:apply(csb61#10)

														-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb62#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb62#10)

															-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb63#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb63#10)

																-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb64#10 = :ctf [p1@Prin  .]

																:apply(csb64#10)

																	-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb65#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

														:apply(csb65#10)

															-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb66#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

															:apply(csb66#10)

																-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb67#10 = :ctf [p1@Prin  .]

																:apply(csb67#10)

																	-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1-2-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-1-2-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

													-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-2-1-1-2-1-1-2-2-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-2-1-1-2-1-1-2-2-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-2-1-1-2-1-1-2-2-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

							-- Goal`10-1-2-1-1-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb68#10 = :ctf {eq creator(M0#Msg)  = P#EVS10-1.SubPrin .}

							:apply(csb68#10)

								-- Goal`10-1-2-1-1-2-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb69#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

								:apply(csb69#10)

									-- Goal`10-1-2-1-1-2-1-2-1-1 Success by reduction
									:apply (rd)

									-- Goal`10-1-2-1-1-2-1-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb70#10 = :ctf {eq key(C#EVS10-1.SubCipher1)  = sender(M0#Msg) .}

									:apply(csb70#10)

										-- Goal`10-1-2-1-1-2-1-2-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb71#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

										:apply(csb71#10)

											-- Goal`10-1-2-1-1-2-1-2-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb72#10 = :ctf {eq principal(C#EVS10-1.SubCipher1)  = P#Prin .}

											:apply(csb72#10)

												-- Goal`10-1-2-1-1-2-1-2-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb73#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

												:apply(csb73#10)

													-- Goal`10-1-2-1-1-2-1-2-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb74#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb74#10)

														-- Goal`10-1-2-1-1-2-1-2-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb75#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb75#10)

															-- Goal`10-1-2-1-1-2-1-2-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb76#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

															:apply(csb76#10)

																-- Goal`10-1-2-1-1-2-1-2-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb77#10 = :ctf [p1@Prin  .]

																:apply(csb77#10)

																	-- Goal`10-1-2-1-1-2-1-2-1-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-1-2-1-2-1-2-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb78#10 = :ctf [p1@Prin  .]

																:apply(csb78#10)

																	-- Goal`10-1-2-1-1-2-1-2-1-2-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-2-1-1-2-1-2-1-2-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-2-1-1-2-1-2-1-2-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-2-1-1-2-1-2-1-2-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-2-1-1-2-1-2-1-2-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-2-1-1-2-1-2-1-2-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-2-1-1-2-1-2-1-2-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

								-- Goal`10-1-2-1-1-2-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb79#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

								:apply(csb79#10)

									-- Goal`10-1-2-1-1-2-1-2-2-1 Success by reduction
									:apply (rd)

									-- Goal`10-1-2-1-1-2-1-2-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb80#10 = :ctf {eq key(C#EVS10-1.SubCipher1)  = sender(M0#Msg) .}

									:apply(csb80#10)

										-- Goal`10-1-2-1-1-2-1-2-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb81#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

										:apply(csb81#10)

											-- Goal`10-1-2-1-1-2-1-2-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb82#10 = :ctf {eq principal(C#EVS10-1.SubCipher1)  = P#Prin .}

											:apply(csb82#10)

												-- Goal`10-1-2-1-1-2-1-2-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb83#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

												:apply(csb83#10)

													-- Goal`10-1-2-1-1-2-1-2-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb84#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb84#10)

														-- Goal`10-1-2-1-1-2-1-2-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb85#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb85#10)

															-- Goal`10-1-2-1-1-2-1-2-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb86#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb86#10)

																-- Goal`10-1-2-1-1-2-1-2-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb87#10 = :ctf [p1@Prin  .]

																:apply(csb87#10)

																	-- Goal`10-1-2-1-1-2-1-2-2-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-1-2-1-2-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-2-1-1-2-1-2-2-2-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-2-1-1-2-1-2-2-2-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-2-1-1-2-1-2-2-2-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-2-1-1-2-1-2-2-2-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-2-1-1-2-1-2-2-2-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-2-1-1-2-1-2-2-2-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

						-- Goal`10-1-2-1-1-2-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

				-- Goal`10-1-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb88#10 = :ctf {eq creator(M#Msg)  = P#EVS10-1.SubPrin .}

				:apply(csb88#10)

					-- Goal`10-1-2-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb89#10 = :ctf {eq P#EVS10-1.SubPrin  = P#Prin .}

					:apply(csb89#10)

						-- Goal`10-1-2-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb90#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb90#10)

							-- Goal`10-1-2-1-2-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`10-1-2-1-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb91#10 = :ctf {eq key(C#EVS10-1.SubCipher1)  = sender(M0#Msg) .}

							:apply(csb91#10)

								-- Goal`10-1-2-1-2-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb92#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

								:apply(csb92#10)

									-- Goal`10-1-2-1-2-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb93#10 = :ctf {eq principal(C#EVS10-1.SubCipher1)  = P#Prin .}

									:apply(csb93#10)

										-- Goal`10-1-2-1-2-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb94#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

										:apply(csb94#10)

											-- Goal`10-1-2-1-2-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb95#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

											:apply(csb95#10)

												-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb96#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

												:apply(csb96#10)

													-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb97#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

													:apply(csb97#10)

														-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb98#10 = :ctf {eq P#Prin  = P0#EVS10-1.SubPrin .}

														:apply(csb98#10)

															-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb99#10 = :ctf {eq sender(M0#Msg)  = P1#EVS10-1.SubPrin .}

															:apply(csb99#10)

																-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb100#10 = :ctf [p1@Prin  .]

																:apply(csb100#10)

																	-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1-1-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb101#10 = :ctf {eq sender(M0#Msg)  = P1#EVS10-1.SubPrin .}

															:apply(csb101#10)

																-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb102#10 = :ctf [p1@Prin  .]

																:apply(csb102#10)

																	-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1-1-1-2-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

														-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb103#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

												:apply(csb103#10)

													-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb104#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb104#10)

														-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb105#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb105#10)

															-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb106#10 = :ctf {eq P#Prin  = P0#EVS10-1.SubPrin .}

															:apply(csb106#10)

																-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb107#10 = :ctf [p1@Prin  .]

																:apply(csb107#10)

																	-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-2-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-2-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb108#10 = :ctf [p1@Prin  .]

																:apply(csb108#10)

																	-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-2-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-2-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-2-1-2-1-1-2-1-1-1-1-2-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

											-- Goal`10-1-2-1-2-1-1-2-1-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-2-1-2-1-1-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-2-1-2-1-1-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`10-1-2-1-2-1-1-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

						-- Goal`10-1-2-1-2-1-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

					-- Goal`10-1-2-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb109#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

					:apply(csb109#10)

						-- Goal`10-1-2-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb110#10 = :ctf {eq P#EVS10-1.SubPrin  = P#Prin .}

						:apply(csb110#10)

							-- Goal`10-1-2-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb111#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

							:apply(csb111#10)

								-- Goal`10-1-2-1-2-2-1-1-1 Success by reduction
								:apply (rd)

								-- Goal`10-1-2-1-2-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb112#10 = :ctf {eq key(C#EVS10-1.SubCipher1)  = sender(M0#Msg) .}

								:apply(csb112#10)

									-- Goal`10-1-2-1-2-2-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb113#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

									:apply(csb113#10)

										-- Goal`10-1-2-1-2-2-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb114#10 = :ctf {eq principal(C#EVS10-1.SubCipher1)  = P#Prin .}

										:apply(csb114#10)

											-- Goal`10-1-2-1-2-2-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb115#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

											:apply(csb115#10)

												-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb116#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

												:apply(csb116#10)

													-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb117#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb117#10)

														-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb118#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb118#10)

															-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb119#10 = :ctf {eq P#Prin  = P0#EVS10-1.SubPrin .}

															:apply(csb119#10)

																-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb120#10 = :ctf [p1@Prin  .]

																:apply(csb120#10)

																	-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb121#10 = :ctf [p1@Prin  .]

																:apply(csb121#10)

																	-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb122#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb122#10)

														-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb123#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb123#10)

															-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb124#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb124#10)

																-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb125#10 = :ctf [p1@Prin  .]

																:apply(csb125#10)

																	-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-2-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-1-2-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

												-- Goal`10-1-2-1-2-2-1-1-2-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-2-1-2-2-1-1-2-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-2-1-2-2-1-1-2-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-2-1-2-2-1-1-2-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

							-- Goal`10-1-2-1-2-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb126#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

							:apply(csb126#10)

								-- Goal`10-1-2-1-2-2-1-2-1 Success by reduction
								:apply (rd)

								-- Goal`10-1-2-1-2-2-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb127#10 = :ctf {eq key(C#EVS10-1.SubCipher1)  = sender(M0#Msg) .}

								:apply(csb127#10)

									-- Goal`10-1-2-1-2-2-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb128#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

									:apply(csb128#10)

										-- Goal`10-1-2-1-2-2-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb129#10 = :ctf {eq principal(C#EVS10-1.SubCipher1)  = P#Prin .}

										:apply(csb129#10)

											-- Goal`10-1-2-1-2-2-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb130#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

											:apply(csb130#10)

												-- Goal`10-1-2-1-2-2-1-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb131#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

												:apply(csb131#10)

													-- Goal`10-1-2-1-2-2-1-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb132#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb132#10)

														-- Goal`10-1-2-1-2-2-1-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb133#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb133#10)

															-- Goal`10-1-2-1-2-2-1-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb134#10 = :ctf [p1@Prin  .]

															:apply(csb134#10)

																-- Goal`10-1-2-1-2-2-1-2-2-1-1-1-1-1-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`10-1-2-1-2-2-1-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-2-1-2-2-1-2-2-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-2-1-2-2-1-2-2-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-2-1-2-2-1-2-2-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-2-1-2-2-1-2-2-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-2-1-2-2-1-2-2-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-2-1-2-2-1-2-2-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

						-- Goal`10-1-2-1-2-2-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

			-- Goal`10-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb135#10 = :ctf {eq cipher1(M0#Msg)  = C#EVS10-1.SubCipher1 .}

			:apply(csb135#10)

				-- Goal`10-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb136#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

				:apply(csb136#10)

					-- Goal`10-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb137#10 = :ctf {eq creator(M0#Msg)  = P#EVS10-1.SubPrin .}

					:apply(csb137#10)

						-- Goal`10-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb138#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb138#10)

							-- Goal`10-1-2-2-1-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`10-1-2-2-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb139#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

							:apply(csb139#10)

								-- Goal`10-1-2-2-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb140#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

								:apply(csb140#10)

									-- Goal`10-1-2-2-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb141#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

									:apply(csb141#10)

										-- Goal`10-1-2-2-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb142#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

										:apply(csb142#10)

											-- Goal`10-1-2-2-1-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb143#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

											:apply(csb143#10)

												-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb144#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

												:apply(csb144#10)

													-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb145#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

													:apply(csb145#10)

														-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb146#10 = :ctf {eq sender(M#Msg)  = P1#EVS10-1.SubPrin .}

														:apply(csb146#10)

															-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb147#10 = :ctf {eq sender(M0#Msg)  = P0#EVS10-1.SubPrin .}

															:apply(csb147#10)

																-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb148#10 = :ctf [p1@Prin  .]

																:apply(csb148#10)

																	-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb149#10 = :ctf [p1@Prin  .]

																:apply(csb149#10)

																	-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb150#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb150#10)

															-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb151#10 = :ctf [p1@Prin  .]

															:apply(csb151#10)

																-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-1-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

													-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-2-2-1-1-1-2-1-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-2-2-1-1-1-2-1-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-2-2-1-1-1-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-2-2-1-1-1-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`10-1-2-2-1-1-1-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

						-- Goal`10-1-2-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb152#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb152#10)

							-- Goal`10-1-2-2-1-1-2-1 Success by reduction
							:apply (rd)

							-- Goal`10-1-2-2-1-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb153#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

							:apply(csb153#10)

								-- Goal`10-1-2-2-1-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb154#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

								:apply(csb154#10)

									-- Goal`10-1-2-2-1-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb155#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

									:apply(csb155#10)

										-- Goal`10-1-2-2-1-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb156#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

										:apply(csb156#10)

											-- Goal`10-1-2-2-1-1-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb157#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

											:apply(csb157#10)

												-- Goal`10-1-2-2-1-1-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb158#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

												:apply(csb158#10)

													-- Goal`10-1-2-2-1-1-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb159#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

													:apply(csb159#10)

														-- Goal`10-1-2-2-1-1-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb160#10 = :ctf [p1@Prin  .]

														:apply(csb160#10)

															-- Goal`10-1-2-2-1-1-2-2-1-1-1-1-1-1-1-1 Success by reduction
															:apply (rd)

														-- Goal`10-1-2-2-1-1-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-2-2-1-1-2-2-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-2-2-1-1-2-2-1-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-2-2-1-1-2-2-1-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-2-2-1-1-2-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-2-2-1-1-2-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`10-1-2-2-1-1-2-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

					-- Goal`10-1-2-2-1-2 Success by implication and reduction.
					:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

					:apply (rd)

				-- Goal`10-1-2-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb161#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

				:apply(csb161#10)

					-- Goal`10-1-2-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb162#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

					:apply(csb162#10)

						-- Goal`10-1-2-2-2-1-1 Success by reduction
						:apply (rd)

						-- Goal`10-1-2-2-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb163#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

						:apply(csb163#10)

							-- Goal`10-1-2-2-2-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb164#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

							:apply(csb164#10)

								-- Goal`10-1-2-2-2-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb165#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

								:apply(csb165#10)

									-- Goal`10-1-2-2-2-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb166#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

									:apply(csb166#10)

										-- Goal`10-1-2-2-2-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb167#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

										:apply(csb167#10)

											-- Goal`10-1-2-2-2-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb168#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

											:apply(csb168#10)

												-- Goal`10-1-2-2-2-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb169#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

												:apply(csb169#10)

													-- Goal`10-1-2-2-2-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb170#10 = :ctf [p1@Prin  .]

													:apply(csb170#10)

														-- Goal`10-1-2-2-2-1-2-1-1-1-1-1-1-1-1 Success by reduction
														:apply (rd)

													-- Goal`10-1-2-2-2-1-2-1-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-2-2-2-1-2-1-1-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-2-2-2-1-2-1-1-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-2-2-2-1-2-1-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-2-2-2-1-2-1-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`10-1-2-2-2-1-2-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`10-1-2-2-2-1-2-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

					-- Goal`10-1-2-2-2-2 Success by implication and reduction.
					:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

					:apply (rd)

		-- Goal`10-1-3  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb171#10 = :ctf {eq cipher2(M#Msg)  = C#EVS10-1.SubCipher2 .}

		:apply(csb171#10)

			-- Goal`10-1-3-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb172#10 = :ctf {eq cipher2(M0#Msg)  = C#EVS10-1.SubCipher2 .}

			:apply(csb172#10)

				-- Goal`10-1-3-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb173#10 = :ctf {eq creator(M#Msg)  = P#EVS10-1.SubPrin .}

				:apply(csb173#10)

					-- Goal`10-1-3-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb174#10 = :ctf {eq P#EVS10-1.SubPrin  = P#Prin .}

					:apply(csb174#10)

						-- Goal`10-1-3-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb175#10 = :ctf {eq creator(M0#Msg)  = P#Prin .}

						:apply(csb175#10)

							-- Goal`10-1-3-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb176#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

							:apply(csb176#10)

								-- Goal`10-1-3-1-1-1-1-1-1 Success by reduction
								:apply (rd)

								-- Goal`10-1-3-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb177#10 = :ctf {eq key(C#EVS10-1.SubCipher2)  = P#Prin .}

								:apply(csb177#10)

									-- Goal`10-1-3-1-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb178#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

									:apply(csb178#10)

										-- Goal`10-1-3-1-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb179#10 = :ctf {eq principal(C#EVS10-1.SubCipher2)  = sender(M0#Msg) .}

										:apply(csb179#10)

											-- Goal`10-1-3-1-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb180#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

											:apply(csb180#10)

												-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb181#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

												:apply(csb181#10)

													-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb182#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb182#10)

														-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb183#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

														:apply(csb183#10)

															-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb184#10 = :ctf {eq sender(M#Msg)  = P0#EVS10-1.SubPrin .}

															:apply(csb184#10)

																-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb185#10 = :ctf [p1@Prin  .]

																:apply(csb185#10)

																	-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb186#10 = :ctf [p1@Prin  .]

																:apply(csb186#10)

																	-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb187#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb187#10)

																-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb188#10 = :ctf [p1@Prin  .]

																:apply(csb188#10)

																	-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

														-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb189#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb189#10)

														-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb190#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb190#10)

															-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb191#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

															:apply(csb191#10)

																-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb192#10 = :ctf [p1@Prin  .]

																:apply(csb192#10)

																	-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb193#10 = :ctf [p1@Prin  .]

																:apply(csb193#10)

																	-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-2-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-1-2-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

												-- Goal`10-1-3-1-1-1-1-1-2-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-3-1-1-1-1-1-2-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-3-1-1-1-1-1-2-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-3-1-1-1-1-1-2-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

							-- Goal`10-1-3-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb194#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

							:apply(csb194#10)

								-- Goal`10-1-3-1-1-1-1-2-1 Success by reduction
								:apply (rd)

								-- Goal`10-1-3-1-1-1-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb195#10 = :ctf {eq key(C#EVS10-1.SubCipher2)  = P#Prin .}

								:apply(csb195#10)

									-- Goal`10-1-3-1-1-1-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb196#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

									:apply(csb196#10)

										-- Goal`10-1-3-1-1-1-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb197#10 = :ctf {eq principal(C#EVS10-1.SubCipher2)  = sender(M0#Msg) .}

										:apply(csb197#10)

											-- Goal`10-1-3-1-1-1-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb198#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

											:apply(csb198#10)

												-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb199#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

												:apply(csb199#10)

													-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb200#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb200#10)

														-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb201#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb201#10)

															-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb202#10 = :ctf {eq P#Prin  = P0#EVS10-1.SubPrin .}

															:apply(csb202#10)

																-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb203#10 = :ctf [p1@Prin  .]

																:apply(csb203#10)

																	-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb204#10 = :ctf [p1@Prin  .]

																:apply(csb204#10)

																	-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb205#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb205#10)

														-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb206#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb206#10)

															-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb207#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb207#10)

																-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb208#10 = :ctf [p1@Prin  .]

																:apply(csb208#10)

																	-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-2-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-2-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-1-2-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

												-- Goal`10-1-3-1-1-1-1-2-2-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-3-1-1-1-1-2-2-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-3-1-1-1-1-2-2-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-3-1-1-1-1-2-2-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

						-- Goal`10-1-3-1-1-1-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

					-- Goal`10-1-3-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb209#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

					:apply(csb209#10)

						-- Goal`10-1-3-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb210#10 = :ctf {eq P#EVS10-1.SubPrin  = P#Prin .}

						:apply(csb210#10)

							-- Goal`10-1-3-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb211#10 = :ctf {eq creator(M0#Msg)  = P#Prin .}

							:apply(csb211#10)

								-- Goal`10-1-3-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb212#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

								:apply(csb212#10)

									-- Goal`10-1-3-1-1-2-1-1-1-1 Success by reduction
									:apply (rd)

									-- Goal`10-1-3-1-1-2-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb213#10 = :ctf {eq key(C#EVS10-1.SubCipher2)  = P#Prin .}

									:apply(csb213#10)

										-- Goal`10-1-3-1-1-2-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb214#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

										:apply(csb214#10)

											-- Goal`10-1-3-1-1-2-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb215#10 = :ctf {eq principal(C#EVS10-1.SubCipher2)  = sender(M0#Msg) .}

											:apply(csb215#10)

												-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb216#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

												:apply(csb216#10)

													-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb217#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

													:apply(csb217#10)

														-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb218#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb218#10)

															-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb219#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

															:apply(csb219#10)

																-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb220#10 = :ctf [p1@Prin  .]

																:apply(csb220#10)

																	-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb221#10 = :ctf [p1@Prin  .]

																:apply(csb221#10)

																	-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb222#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

														:apply(csb222#10)

															-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb223#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

															:apply(csb223#10)

																-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb224#10 = :ctf [p1@Prin  .]

																:apply(csb224#10)

																	-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-1-2-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

													-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-3-1-1-2-1-1-1-2-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-3-1-1-2-1-1-1-2-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-3-1-1-2-1-1-1-2-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

								-- Goal`10-1-3-1-1-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb225#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

								:apply(csb225#10)

									-- Goal`10-1-3-1-1-2-1-1-2-1 Success by reduction
									:apply (rd)

									-- Goal`10-1-3-1-1-2-1-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb226#10 = :ctf {eq key(C#EVS10-1.SubCipher2)  = P#Prin .}

									:apply(csb226#10)

										-- Goal`10-1-3-1-1-2-1-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb227#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

										:apply(csb227#10)

											-- Goal`10-1-3-1-1-2-1-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb228#10 = :ctf {eq principal(C#EVS10-1.SubCipher2)  = sender(M0#Msg) .}

											:apply(csb228#10)

												-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb229#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

												:apply(csb229#10)

													-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb230#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

													:apply(csb230#10)

														-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb231#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb231#10)

															-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb232#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb232#10)

																-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb233#10 = :ctf [p1@Prin  .]

																:apply(csb233#10)

																	-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb234#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

														:apply(csb234#10)

															-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb235#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

															:apply(csb235#10)

																-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb236#10 = :ctf [p1@Prin  .]

																:apply(csb236#10)

																	-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1-2-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-1-2-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

													-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-3-1-1-2-1-1-2-2-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-3-1-1-2-1-1-2-2-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-3-1-1-2-1-1-2-2-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

							-- Goal`10-1-3-1-1-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb237#10 = :ctf {eq creator(M0#Msg)  = P#EVS10-1.SubPrin .}

							:apply(csb237#10)

								-- Goal`10-1-3-1-1-2-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb238#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

								:apply(csb238#10)

									-- Goal`10-1-3-1-1-2-1-2-1-1 Success by reduction
									:apply (rd)

									-- Goal`10-1-3-1-1-2-1-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb239#10 = :ctf {eq key(C#EVS10-1.SubCipher2)  = P#Prin .}

									:apply(csb239#10)

										-- Goal`10-1-3-1-1-2-1-2-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb240#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

										:apply(csb240#10)

											-- Goal`10-1-3-1-1-2-1-2-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb241#10 = :ctf {eq principal(C#EVS10-1.SubCipher2)  = sender(M0#Msg) .}

											:apply(csb241#10)

												-- Goal`10-1-3-1-1-2-1-2-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb242#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

												:apply(csb242#10)

													-- Goal`10-1-3-1-1-2-1-2-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb243#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb243#10)

														-- Goal`10-1-3-1-1-2-1-2-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb244#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb244#10)

															-- Goal`10-1-3-1-1-2-1-2-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb245#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

															:apply(csb245#10)

																-- Goal`10-1-3-1-1-2-1-2-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb246#10 = :ctf [p1@Prin  .]

																:apply(csb246#10)

																	-- Goal`10-1-3-1-1-2-1-2-1-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-1-2-1-2-1-2-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb247#10 = :ctf [p1@Prin  .]

																:apply(csb247#10)

																	-- Goal`10-1-3-1-1-2-1-2-1-2-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-3-1-1-2-1-2-1-2-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-3-1-1-2-1-2-1-2-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-3-1-1-2-1-2-1-2-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-3-1-1-2-1-2-1-2-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-3-1-1-2-1-2-1-2-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-3-1-1-2-1-2-1-2-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

								-- Goal`10-1-3-1-1-2-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb248#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

								:apply(csb248#10)

									-- Goal`10-1-3-1-1-2-1-2-2-1 Success by reduction
									:apply (rd)

									-- Goal`10-1-3-1-1-2-1-2-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb249#10 = :ctf {eq key(C#EVS10-1.SubCipher2)  = P#Prin .}

									:apply(csb249#10)

										-- Goal`10-1-3-1-1-2-1-2-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb250#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

										:apply(csb250#10)

											-- Goal`10-1-3-1-1-2-1-2-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb251#10 = :ctf {eq principal(C#EVS10-1.SubCipher2)  = sender(M0#Msg) .}

											:apply(csb251#10)

												-- Goal`10-1-3-1-1-2-1-2-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb252#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

												:apply(csb252#10)

													-- Goal`10-1-3-1-1-2-1-2-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb253#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb253#10)

														-- Goal`10-1-3-1-1-2-1-2-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb254#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb254#10)

															-- Goal`10-1-3-1-1-2-1-2-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb255#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb255#10)

																-- Goal`10-1-3-1-1-2-1-2-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb256#10 = :ctf [p1@Prin  .]

																:apply(csb256#10)

																	-- Goal`10-1-3-1-1-2-1-2-2-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-1-2-1-2-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-3-1-1-2-1-2-2-2-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-3-1-1-2-1-2-2-2-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-3-1-1-2-1-2-2-2-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-3-1-1-2-1-2-2-2-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-3-1-1-2-1-2-2-2-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-3-1-1-2-1-2-2-2-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

						-- Goal`10-1-3-1-1-2-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

				-- Goal`10-1-3-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb257#10 = :ctf {eq creator(M#Msg)  = P#EVS10-1.SubPrin .}

				:apply(csb257#10)

					-- Goal`10-1-3-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb258#10 = :ctf {eq P#EVS10-1.SubPrin  = P#Prin .}

					:apply(csb258#10)

						-- Goal`10-1-3-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb259#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb259#10)

							-- Goal`10-1-3-1-2-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`10-1-3-1-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb260#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

							:apply(csb260#10)

								-- Goal`10-1-3-1-2-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb261#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

								:apply(csb261#10)

									-- Goal`10-1-3-1-2-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb262#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

									:apply(csb262#10)

										-- Goal`10-1-3-1-2-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb263#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

										:apply(csb263#10)

											-- Goal`10-1-3-1-2-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb264#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

											:apply(csb264#10)

												-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb265#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

												:apply(csb265#10)

													-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb266#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

													:apply(csb266#10)

														-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb267#10 = :ctf {eq P#Prin  = P0#EVS10-1.SubPrin .}

														:apply(csb267#10)

															-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb268#10 = :ctf {eq sender(M0#Msg)  = P1#EVS10-1.SubPrin .}

															:apply(csb268#10)

																-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb269#10 = :ctf [p1@Prin  .]

																:apply(csb269#10)

																	-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1-1-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb270#10 = :ctf {eq sender(M0#Msg)  = P1#EVS10-1.SubPrin .}

															:apply(csb270#10)

																-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb271#10 = :ctf [p1@Prin  .]

																:apply(csb271#10)

																	-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1-1-1-2-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

														-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb272#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

												:apply(csb272#10)

													-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb273#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb273#10)

														-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb274#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb274#10)

															-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb275#10 = :ctf {eq P#Prin  = P0#EVS10-1.SubPrin .}

															:apply(csb275#10)

																-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb276#10 = :ctf [p1@Prin  .]

																:apply(csb276#10)

																	-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-2-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-2-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb277#10 = :ctf [p1@Prin  .]

																:apply(csb277#10)

																	-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-2-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-2-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-3-1-2-1-1-2-1-1-1-1-2-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

											-- Goal`10-1-3-1-2-1-1-2-1-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-3-1-2-1-1-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-3-1-2-1-1-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`10-1-3-1-2-1-1-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

						-- Goal`10-1-3-1-2-1-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

					-- Goal`10-1-3-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb278#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

					:apply(csb278#10)

						-- Goal`10-1-3-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb279#10 = :ctf {eq P#EVS10-1.SubPrin  = P#Prin .}

						:apply(csb279#10)

							-- Goal`10-1-3-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb280#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

							:apply(csb280#10)

								-- Goal`10-1-3-1-2-2-1-1-1 Success by reduction
								:apply (rd)

								-- Goal`10-1-3-1-2-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb281#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

								:apply(csb281#10)

									-- Goal`10-1-3-1-2-2-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb282#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

									:apply(csb282#10)

										-- Goal`10-1-3-1-2-2-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb283#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

										:apply(csb283#10)

											-- Goal`10-1-3-1-2-2-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb284#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

											:apply(csb284#10)

												-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb285#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

												:apply(csb285#10)

													-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb286#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb286#10)

														-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb287#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb287#10)

															-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb288#10 = :ctf {eq P#Prin  = P0#EVS10-1.SubPrin .}

															:apply(csb288#10)

																-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb289#10 = :ctf [p1@Prin  .]

																:apply(csb289#10)

																	-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb290#10 = :ctf [p1@Prin  .]

																:apply(csb290#10)

																	-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb291#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb291#10)

														-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb292#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb292#10)

															-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb293#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb293#10)

																-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb294#10 = :ctf [p1@Prin  .]

																:apply(csb294#10)

																	-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-2-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-1-2-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

												-- Goal`10-1-3-1-2-2-1-1-2-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-3-1-2-2-1-1-2-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-3-1-2-2-1-1-2-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-3-1-2-2-1-1-2-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

							-- Goal`10-1-3-1-2-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb295#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

							:apply(csb295#10)

								-- Goal`10-1-3-1-2-2-1-2-1 Success by reduction
								:apply (rd)

								-- Goal`10-1-3-1-2-2-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb296#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

								:apply(csb296#10)

									-- Goal`10-1-3-1-2-2-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb297#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

									:apply(csb297#10)

										-- Goal`10-1-3-1-2-2-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb298#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

										:apply(csb298#10)

											-- Goal`10-1-3-1-2-2-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb299#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

											:apply(csb299#10)

												-- Goal`10-1-3-1-2-2-1-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb300#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

												:apply(csb300#10)

													-- Goal`10-1-3-1-2-2-1-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb301#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb301#10)

														-- Goal`10-1-3-1-2-2-1-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb302#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb302#10)

															-- Goal`10-1-3-1-2-2-1-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb303#10 = :ctf [p1@Prin  .]

															:apply(csb303#10)

																-- Goal`10-1-3-1-2-2-1-2-2-1-1-1-1-1-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`10-1-3-1-2-2-1-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-3-1-2-2-1-2-2-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-3-1-2-2-1-2-2-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-3-1-2-2-1-2-2-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-3-1-2-2-1-2-2-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-3-1-2-2-1-2-2-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-3-1-2-2-1-2-2-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

						-- Goal`10-1-3-1-2-2-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

			-- Goal`10-1-3-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb304#10 = :ctf {eq cipher2(M0#Msg)  = C#EVS10-1.SubCipher2 .}

			:apply(csb304#10)

				-- Goal`10-1-3-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb305#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

				:apply(csb305#10)

					-- Goal`10-1-3-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb306#10 = :ctf {eq creator(M0#Msg)  = P#EVS10-1.SubPrin .}

					:apply(csb306#10)

						-- Goal`10-1-3-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb307#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb307#10)

							-- Goal`10-1-3-2-1-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`10-1-3-2-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb308#10 = :ctf {eq key(C#EVS10-1.SubCipher2)  = P#Prin .}

							:apply(csb308#10)

								-- Goal`10-1-3-2-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb309#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

								:apply(csb309#10)

									-- Goal`10-1-3-2-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb310#10 = :ctf {eq principal(C#EVS10-1.SubCipher2)  = sender(M0#Msg) .}

									:apply(csb310#10)

										-- Goal`10-1-3-2-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb311#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

										:apply(csb311#10)

											-- Goal`10-1-3-2-1-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb312#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

											:apply(csb312#10)

												-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb313#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

												:apply(csb313#10)

													-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb314#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

													:apply(csb314#10)

														-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb315#10 = :ctf {eq sender(M#Msg)  = P1#EVS10-1.SubPrin .}

														:apply(csb315#10)

															-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb316#10 = :ctf {eq sender(M0#Msg)  = P0#EVS10-1.SubPrin .}

															:apply(csb316#10)

																-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb317#10 = :ctf [p1@Prin  .]

																:apply(csb317#10)

																	-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb318#10 = :ctf [p1@Prin  .]

																:apply(csb318#10)

																	-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb319#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb319#10)

															-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb320#10 = :ctf [p1@Prin  .]

															:apply(csb320#10)

																-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-1-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

													-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-3-2-1-1-1-2-1-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-3-2-1-1-1-2-1-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-3-2-1-1-1-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-3-2-1-1-1-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`10-1-3-2-1-1-1-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

						-- Goal`10-1-3-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb321#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb321#10)

							-- Goal`10-1-3-2-1-1-2-1 Success by reduction
							:apply (rd)

							-- Goal`10-1-3-2-1-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb322#10 = :ctf {eq key(C#EVS10-1.SubCipher2)  = P#Prin .}

							:apply(csb322#10)

								-- Goal`10-1-3-2-1-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb323#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

								:apply(csb323#10)

									-- Goal`10-1-3-2-1-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb324#10 = :ctf {eq principal(C#EVS10-1.SubCipher2)  = sender(M0#Msg) .}

									:apply(csb324#10)

										-- Goal`10-1-3-2-1-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb325#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

										:apply(csb325#10)

											-- Goal`10-1-3-2-1-1-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb326#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

											:apply(csb326#10)

												-- Goal`10-1-3-2-1-1-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb327#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

												:apply(csb327#10)

													-- Goal`10-1-3-2-1-1-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb328#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

													:apply(csb328#10)

														-- Goal`10-1-3-2-1-1-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb329#10 = :ctf [p1@Prin  .]

														:apply(csb329#10)

															-- Goal`10-1-3-2-1-1-2-2-1-1-1-1-1-1-1-1 Success by reduction
															:apply (rd)

														-- Goal`10-1-3-2-1-1-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-3-2-1-1-2-2-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-3-2-1-1-2-2-1-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-3-2-1-1-2-2-1-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-3-2-1-1-2-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-3-2-1-1-2-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`10-1-3-2-1-1-2-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

					-- Goal`10-1-3-2-1-2 Success by implication and reduction.
					:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

					:apply (rd)

				-- Goal`10-1-3-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb330#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

				:apply(csb330#10)

					-- Goal`10-1-3-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb331#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

					:apply(csb331#10)

						-- Goal`10-1-3-2-2-1-1 Success by reduction
						:apply (rd)

						-- Goal`10-1-3-2-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb332#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

						:apply(csb332#10)

							-- Goal`10-1-3-2-2-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb333#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

							:apply(csb333#10)

								-- Goal`10-1-3-2-2-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb334#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

								:apply(csb334#10)

									-- Goal`10-1-3-2-2-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb335#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

									:apply(csb335#10)

										-- Goal`10-1-3-2-2-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb336#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

										:apply(csb336#10)

											-- Goal`10-1-3-2-2-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb337#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

											:apply(csb337#10)

												-- Goal`10-1-3-2-2-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb338#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

												:apply(csb338#10)

													-- Goal`10-1-3-2-2-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb339#10 = :ctf [p1@Prin  .]

													:apply(csb339#10)

														-- Goal`10-1-3-2-2-1-2-1-1-1-1-1-1-1-1 Success by reduction
														:apply (rd)

													-- Goal`10-1-3-2-2-1-2-1-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-3-2-2-1-2-1-1-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-3-2-2-1-2-1-1-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-3-2-2-1-2-1-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-3-2-2-1-2-1-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`10-1-3-2-2-1-2-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`10-1-3-2-2-1-2-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

					-- Goal`10-1-3-2-2-2 Success by implication and reduction.
					:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

					:apply (rd)

		-- Goal`10-1-4  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
		:def csb340#10 = :ctf {eq cipher3(M#Msg)  = C#EVS10-1.SubCipher3 .}

		:apply(csb340#10)

			-- Goal`10-1-4-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb341#10 = :ctf {eq cipher3(M0#Msg)  = C#EVS10-1.SubCipher3 .}

			:apply(csb341#10)

				-- Goal`10-1-4-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb342#10 = :ctf {eq creator(M#Msg)  = P#EVS10-1.SubPrin .}

				:apply(csb342#10)

					-- Goal`10-1-4-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb343#10 = :ctf {eq P#EVS10-1.SubPrin  = P#Prin .}

					:apply(csb343#10)

						-- Goal`10-1-4-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb344#10 = :ctf {eq creator(M0#Msg)  = P#Prin .}

						:apply(csb344#10)

							-- Goal`10-1-4-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb345#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

							:apply(csb345#10)

								-- Goal`10-1-4-1-1-1-1-1-1 Success by reduction
								:apply (rd)

								-- Goal`10-1-4-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb346#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

								:apply(csb346#10)

									-- Goal`10-1-4-1-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb347#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

									:apply(csb347#10)

										-- Goal`10-1-4-1-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb348#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

										:apply(csb348#10)

											-- Goal`10-1-4-1-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb349#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

											:apply(csb349#10)

												-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb350#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

												:apply(csb350#10)

													-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb351#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb351#10)

														-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb352#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

														:apply(csb352#10)

															-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb353#10 = :ctf {eq sender(M#Msg)  = P0#EVS10-1.SubPrin .}

															:apply(csb353#10)

																-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb354#10 = :ctf [p1@Prin  .]

																:apply(csb354#10)

																	-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb355#10 = :ctf [p1@Prin  .]

																:apply(csb355#10)

																	-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb356#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb356#10)

																-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb357#10 = :ctf [p1@Prin  .]

																:apply(csb357#10)

																	-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

														-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb358#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb358#10)

														-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb359#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb359#10)

															-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb360#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

															:apply(csb360#10)

																-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb361#10 = :ctf [p1@Prin  .]

																:apply(csb361#10)

																	-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb362#10 = :ctf [p1@Prin  .]

																:apply(csb362#10)

																	-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-2-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-1-2-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

												-- Goal`10-1-4-1-1-1-1-1-2-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-4-1-1-1-1-1-2-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-4-1-1-1-1-1-2-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-4-1-1-1-1-1-2-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

							-- Goal`10-1-4-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb363#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

							:apply(csb363#10)

								-- Goal`10-1-4-1-1-1-1-2-1 Success by reduction
								:apply (rd)

								-- Goal`10-1-4-1-1-1-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb364#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

								:apply(csb364#10)

									-- Goal`10-1-4-1-1-1-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb365#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

									:apply(csb365#10)

										-- Goal`10-1-4-1-1-1-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb366#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

										:apply(csb366#10)

											-- Goal`10-1-4-1-1-1-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb367#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

											:apply(csb367#10)

												-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb368#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

												:apply(csb368#10)

													-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb369#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb369#10)

														-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb370#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb370#10)

															-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb371#10 = :ctf {eq P#Prin  = P0#EVS10-1.SubPrin .}

															:apply(csb371#10)

																-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb372#10 = :ctf [p1@Prin  .]

																:apply(csb372#10)

																	-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb373#10 = :ctf [p1@Prin  .]

																:apply(csb373#10)

																	-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb374#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb374#10)

														-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb375#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb375#10)

															-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb376#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb376#10)

																-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb377#10 = :ctf [p1@Prin  .]

																:apply(csb377#10)

																	-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-2-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-2-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-1-2-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

												-- Goal`10-1-4-1-1-1-1-2-2-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-4-1-1-1-1-2-2-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-4-1-1-1-1-2-2-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-4-1-1-1-1-2-2-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

						-- Goal`10-1-4-1-1-1-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

					-- Goal`10-1-4-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb378#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

					:apply(csb378#10)

						-- Goal`10-1-4-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb379#10 = :ctf {eq P#EVS10-1.SubPrin  = P#Prin .}

						:apply(csb379#10)

							-- Goal`10-1-4-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb380#10 = :ctf {eq creator(M0#Msg)  = P#Prin .}

							:apply(csb380#10)

								-- Goal`10-1-4-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb381#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

								:apply(csb381#10)

									-- Goal`10-1-4-1-1-2-1-1-1-1 Success by reduction
									:apply (rd)

									-- Goal`10-1-4-1-1-2-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb382#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

									:apply(csb382#10)

										-- Goal`10-1-4-1-1-2-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb383#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

										:apply(csb383#10)

											-- Goal`10-1-4-1-1-2-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb384#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

											:apply(csb384#10)

												-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb385#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

												:apply(csb385#10)

													-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb386#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

													:apply(csb386#10)

														-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb387#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb387#10)

															-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb388#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

															:apply(csb388#10)

																-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb389#10 = :ctf [p1@Prin  .]

																:apply(csb389#10)

																	-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb390#10 = :ctf [p1@Prin  .]

																:apply(csb390#10)

																	-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb391#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

														:apply(csb391#10)

															-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb392#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

															:apply(csb392#10)

																-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb393#10 = :ctf [p1@Prin  .]

																:apply(csb393#10)

																	-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-1-2-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

													-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-4-1-1-2-1-1-1-2-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-4-1-1-2-1-1-1-2-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-4-1-1-2-1-1-1-2-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

								-- Goal`10-1-4-1-1-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb394#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

								:apply(csb394#10)

									-- Goal`10-1-4-1-1-2-1-1-2-1 Success by reduction
									:apply (rd)

									-- Goal`10-1-4-1-1-2-1-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb395#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

									:apply(csb395#10)

										-- Goal`10-1-4-1-1-2-1-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb396#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

										:apply(csb396#10)

											-- Goal`10-1-4-1-1-2-1-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb397#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

											:apply(csb397#10)

												-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb398#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

												:apply(csb398#10)

													-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb399#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

													:apply(csb399#10)

														-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb400#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb400#10)

															-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb401#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb401#10)

																-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb402#10 = :ctf [p1@Prin  .]

																:apply(csb402#10)

																	-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb403#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

														:apply(csb403#10)

															-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb404#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

															:apply(csb404#10)

																-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb405#10 = :ctf [p1@Prin  .]

																:apply(csb405#10)

																	-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1-2-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-1-2-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

													-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-4-1-1-2-1-1-2-2-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-4-1-1-2-1-1-2-2-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-4-1-1-2-1-1-2-2-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

							-- Goal`10-1-4-1-1-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb406#10 = :ctf {eq creator(M0#Msg)  = P#EVS10-1.SubPrin .}

							:apply(csb406#10)

								-- Goal`10-1-4-1-1-2-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb407#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

								:apply(csb407#10)

									-- Goal`10-1-4-1-1-2-1-2-1-1 Success by reduction
									:apply (rd)

									-- Goal`10-1-4-1-1-2-1-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb408#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

									:apply(csb408#10)

										-- Goal`10-1-4-1-1-2-1-2-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb409#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

										:apply(csb409#10)

											-- Goal`10-1-4-1-1-2-1-2-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb410#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

											:apply(csb410#10)

												-- Goal`10-1-4-1-1-2-1-2-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb411#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

												:apply(csb411#10)

													-- Goal`10-1-4-1-1-2-1-2-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb412#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb412#10)

														-- Goal`10-1-4-1-1-2-1-2-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb413#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb413#10)

															-- Goal`10-1-4-1-1-2-1-2-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb414#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

															:apply(csb414#10)

																-- Goal`10-1-4-1-1-2-1-2-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb415#10 = :ctf [p1@Prin  .]

																:apply(csb415#10)

																	-- Goal`10-1-4-1-1-2-1-2-1-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-1-2-1-2-1-2-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb416#10 = :ctf [p1@Prin  .]

																:apply(csb416#10)

																	-- Goal`10-1-4-1-1-2-1-2-1-2-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-4-1-1-2-1-2-1-2-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-4-1-1-2-1-2-1-2-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-4-1-1-2-1-2-1-2-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-4-1-1-2-1-2-1-2-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-4-1-1-2-1-2-1-2-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-4-1-1-2-1-2-1-2-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

								-- Goal`10-1-4-1-1-2-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb417#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

								:apply(csb417#10)

									-- Goal`10-1-4-1-1-2-1-2-2-1 Success by reduction
									:apply (rd)

									-- Goal`10-1-4-1-1-2-1-2-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb418#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

									:apply(csb418#10)

										-- Goal`10-1-4-1-1-2-1-2-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb419#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

										:apply(csb419#10)

											-- Goal`10-1-4-1-1-2-1-2-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb420#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

											:apply(csb420#10)

												-- Goal`10-1-4-1-1-2-1-2-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb421#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

												:apply(csb421#10)

													-- Goal`10-1-4-1-1-2-1-2-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb422#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb422#10)

														-- Goal`10-1-4-1-1-2-1-2-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb423#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb423#10)

															-- Goal`10-1-4-1-1-2-1-2-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb424#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb424#10)

																-- Goal`10-1-4-1-1-2-1-2-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb425#10 = :ctf [p1@Prin  .]

																:apply(csb425#10)

																	-- Goal`10-1-4-1-1-2-1-2-2-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-1-2-1-2-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-4-1-1-2-1-2-2-2-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-4-1-1-2-1-2-2-2-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-4-1-1-2-1-2-2-2-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-4-1-1-2-1-2-2-2-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-4-1-1-2-1-2-2-2-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-4-1-1-2-1-2-2-2-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

						-- Goal`10-1-4-1-1-2-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

				-- Goal`10-1-4-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb426#10 = :ctf {eq creator(M#Msg)  = P#EVS10-1.SubPrin .}

				:apply(csb426#10)

					-- Goal`10-1-4-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb427#10 = :ctf {eq P#EVS10-1.SubPrin  = P#Prin .}

					:apply(csb427#10)

						-- Goal`10-1-4-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb428#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb428#10)

							-- Goal`10-1-4-1-2-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`10-1-4-1-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb429#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

							:apply(csb429#10)

								-- Goal`10-1-4-1-2-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb430#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

								:apply(csb430#10)

									-- Goal`10-1-4-1-2-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb431#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

									:apply(csb431#10)

										-- Goal`10-1-4-1-2-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb432#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

										:apply(csb432#10)

											-- Goal`10-1-4-1-2-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb433#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

											:apply(csb433#10)

												-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb434#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

												:apply(csb434#10)

													-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb435#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

													:apply(csb435#10)

														-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb436#10 = :ctf {eq P#Prin  = P0#EVS10-1.SubPrin .}

														:apply(csb436#10)

															-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb437#10 = :ctf {eq sender(M0#Msg)  = P1#EVS10-1.SubPrin .}

															:apply(csb437#10)

																-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb438#10 = :ctf [p1@Prin  .]

																:apply(csb438#10)

																	-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1-1-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb439#10 = :ctf {eq sender(M0#Msg)  = P1#EVS10-1.SubPrin .}

															:apply(csb439#10)

																-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb440#10 = :ctf [p1@Prin  .]

																:apply(csb440#10)

																	-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1-1-1-2-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

														-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb441#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

												:apply(csb441#10)

													-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb442#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb442#10)

														-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb443#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb443#10)

															-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb444#10 = :ctf {eq P#Prin  = P0#EVS10-1.SubPrin .}

															:apply(csb444#10)

																-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb445#10 = :ctf [p1@Prin  .]

																:apply(csb445#10)

																	-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-2-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-2-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb446#10 = :ctf [p1@Prin  .]

																:apply(csb446#10)

																	-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-2-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-2-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-4-1-2-1-1-2-1-1-1-1-2-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

											-- Goal`10-1-4-1-2-1-1-2-1-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-4-1-2-1-1-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-4-1-2-1-1-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`10-1-4-1-2-1-1-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

						-- Goal`10-1-4-1-2-1-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

					-- Goal`10-1-4-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb447#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

					:apply(csb447#10)

						-- Goal`10-1-4-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb448#10 = :ctf {eq P#EVS10-1.SubPrin  = P#Prin .}

						:apply(csb448#10)

							-- Goal`10-1-4-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb449#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

							:apply(csb449#10)

								-- Goal`10-1-4-1-2-2-1-1-1 Success by reduction
								:apply (rd)

								-- Goal`10-1-4-1-2-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb450#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

								:apply(csb450#10)

									-- Goal`10-1-4-1-2-2-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb451#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

									:apply(csb451#10)

										-- Goal`10-1-4-1-2-2-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb452#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

										:apply(csb452#10)

											-- Goal`10-1-4-1-2-2-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb453#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

											:apply(csb453#10)

												-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb454#10 = :ctf {eq receiver(M#Msg)  = P1#EVS10-1.SubPrin .}

												:apply(csb454#10)

													-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb455#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb455#10)

														-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb456#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb456#10)

															-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb457#10 = :ctf {eq P#Prin  = P0#EVS10-1.SubPrin .}

															:apply(csb457#10)

																-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb458#10 = :ctf [p1@Prin  .]

																:apply(csb458#10)

																	-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb459#10 = :ctf [p1@Prin  .]

																:apply(csb459#10)

																	-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb460#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

													:apply(csb460#10)

														-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb461#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

														:apply(csb461#10)

															-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb462#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

															:apply(csb462#10)

																-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb463#10 = :ctf [p1@Prin  .]

																:apply(csb463#10)

																	-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-2-1-1-2 Success by implication and reduction.
																:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

																:apply (rd)

															-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-1-2-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

												-- Goal`10-1-4-1-2-2-1-1-2-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-4-1-2-2-1-1-2-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-4-1-2-2-1-1-2-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-4-1-2-2-1-1-2-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

							-- Goal`10-1-4-1-2-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb464#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

							:apply(csb464#10)

								-- Goal`10-1-4-1-2-2-1-2-1 Success by reduction
								:apply (rd)

								-- Goal`10-1-4-1-2-2-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb465#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

								:apply(csb465#10)

									-- Goal`10-1-4-1-2-2-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb466#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

									:apply(csb466#10)

										-- Goal`10-1-4-1-2-2-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb467#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

										:apply(csb467#10)

											-- Goal`10-1-4-1-2-2-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb468#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

											:apply(csb468#10)

												-- Goal`10-1-4-1-2-2-1-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb469#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

												:apply(csb469#10)

													-- Goal`10-1-4-1-2-2-1-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb470#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

													:apply(csb470#10)

														-- Goal`10-1-4-1-2-2-1-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb471#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb471#10)

															-- Goal`10-1-4-1-2-2-1-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb472#10 = :ctf [p1@Prin  .]

															:apply(csb472#10)

																-- Goal`10-1-4-1-2-2-1-2-2-1-1-1-1-1-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`10-1-4-1-2-2-1-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-4-1-2-2-1-2-2-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-4-1-2-2-1-2-2-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-4-1-2-2-1-2-2-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-4-1-2-2-1-2-2-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-4-1-2-2-1-2-2-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-4-1-2-2-1-2-2-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

						-- Goal`10-1-4-1-2-2-2 Success by implication and reduction.
						:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

						:apply (rd)

			-- Goal`10-1-4-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
			:def csb473#10 = :ctf {eq cipher3(M0#Msg)  = C#EVS10-1.SubCipher3 .}

			:apply(csb473#10)

				-- Goal`10-1-4-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb474#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

				:apply(csb474#10)

					-- Goal`10-1-4-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb475#10 = :ctf {eq creator(M0#Msg)  = P#EVS10-1.SubPrin .}

					:apply(csb475#10)

						-- Goal`10-1-4-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb476#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb476#10)

							-- Goal`10-1-4-2-1-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`10-1-4-2-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb477#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

							:apply(csb477#10)

								-- Goal`10-1-4-2-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb478#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

								:apply(csb478#10)

									-- Goal`10-1-4-2-1-1-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb479#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

									:apply(csb479#10)

										-- Goal`10-1-4-2-1-1-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb480#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

										:apply(csb480#10)

											-- Goal`10-1-4-2-1-1-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb481#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

											:apply(csb481#10)

												-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb482#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

												:apply(csb482#10)

													-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb483#10 = :ctf {eq P#Prin  = P1#EVS10-1.SubPrin .}

													:apply(csb483#10)

														-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb484#10 = :ctf {eq sender(M#Msg)  = P1#EVS10-1.SubPrin .}

														:apply(csb484#10)

															-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb485#10 = :ctf {eq sender(M0#Msg)  = P0#EVS10-1.SubPrin .}

															:apply(csb485#10)

																-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb486#10 = :ctf [p1@Prin  .]

																:apply(csb486#10)

																	-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
																:def csb487#10 = :ctf [p1@Prin  .]

																:apply(csb487#10)

																	-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-1-1-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

														-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb488#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

														:apply(csb488#10)

															-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
															:def csb489#10 = :ctf [p1@Prin  .]

															:apply(csb489#10)

																-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-1-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
															:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

															:apply (rd)

													-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-4-2-1-1-1-2-1-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-4-2-1-1-1-2-1-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-4-2-1-1-1-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-4-2-1-1-1-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`10-1-4-2-1-1-1-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

						-- Goal`10-1-4-2-1-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb490#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

						:apply(csb490#10)

							-- Goal`10-1-4-2-1-1-2-1 Success by reduction
							:apply (rd)

							-- Goal`10-1-4-2-1-1-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb491#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

							:apply(csb491#10)

								-- Goal`10-1-4-2-1-1-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb492#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

								:apply(csb492#10)

									-- Goal`10-1-4-2-1-1-2-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb493#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

									:apply(csb493#10)

										-- Goal`10-1-4-2-1-1-2-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb494#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

										:apply(csb494#10)

											-- Goal`10-1-4-2-1-1-2-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb495#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

											:apply(csb495#10)

												-- Goal`10-1-4-2-1-1-2-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb496#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

												:apply(csb496#10)

													-- Goal`10-1-4-2-1-1-2-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb497#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

													:apply(csb497#10)

														-- Goal`10-1-4-2-1-1-2-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
														:def csb498#10 = :ctf [p1@Prin  .]

														:apply(csb498#10)

															-- Goal`10-1-4-2-1-1-2-2-1-1-1-1-1-1-1-1 Success by reduction
															:apply (rd)

														-- Goal`10-1-4-2-1-1-2-2-1-1-1-1-1-1-2 Success by implication and reduction.
														:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

														:apply (rd)

													-- Goal`10-1-4-2-1-1-2-2-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-4-2-1-1-2-2-1-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-4-2-1-1-2-2-1-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-4-2-1-1-2-2-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-4-2-1-1-2-2-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`10-1-4-2-1-1-2-2-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

					-- Goal`10-1-4-2-1-2 Success by implication and reduction.
					:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

					:apply (rd)

				-- Goal`10-1-4-2-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
				:def csb499#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

				:apply(csb499#10)

					-- Goal`10-1-4-2-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
					:def csb500#10 = :ctf {eq forwhom(n2@Nonce)  = p2@Prin .}

					:apply(csb500#10)

						-- Goal`10-1-4-2-2-1-1 Success by reduction
						:apply (rd)

						-- Goal`10-1-4-2-2-1-2  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
						:def csb501#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

						:apply(csb501#10)

							-- Goal`10-1-4-2-2-1-2-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
							:def csb502#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

							:apply(csb502#10)

								-- Goal`10-1-4-2-2-1-2-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
								:def csb503#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

								:apply(csb503#10)

									-- Goal`10-1-4-2-2-1-2-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
									:def csb504#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

									:apply(csb504#10)

										-- Goal`10-1-4-2-2-1-2-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
										:def csb505#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

										:apply(csb505#10)

											-- Goal`10-1-4-2-2-1-2-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
											:def csb506#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

											:apply(csb506#10)

												-- Goal`10-1-4-2-2-1-2-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
												:def csb507#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

												:apply(csb507#10)

													-- Goal`10-1-4-2-2-1-2-1-1-1-1-1-1-1  -  inv260(sdm3(S#Sys, P#Prin, R#Rand, M#Msg, M0#Msg), p1@Prin, p2@Prin, n1@Nonce, n2@Nonce)  - Success
													:def csb508#10 = :ctf [p1@Prin  .]

													:apply(csb508#10)

														-- Goal`10-1-4-2-2-1-2-1-1-1-1-1-1-1-1 Success by reduction
														:apply (rd)

													-- Goal`10-1-4-2-2-1-2-1-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

													:apply (rd)

												-- Goal`10-1-4-2-2-1-2-1-1-1-1-1-2 Success by implication and reduction.
												:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

												:apply (rd)

											-- Goal`10-1-4-2-2-1-2-1-1-1-1-2 Success by implication and reduction.
											:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

											:apply (rd)

										-- Goal`10-1-4-2-2-1-2-1-1-1-2 Success by implication and reduction.
										:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

										:apply (rd)

									-- Goal`10-1-4-2-2-1-2-1-1-2 Success by implication and reduction.
									:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

									:apply (rd)

								-- Goal`10-1-4-2-2-1-2-1-2 Success by implication and reduction.
								:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

								:apply (rd)

							-- Goal`10-1-4-2-2-1-2-2 Success by implication and reduction.
							:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

							:apply (rd)

					-- Goal`10-1-4-2-2-2 Success by implication and reduction.
					:imp [inv26]  by {n1:Nonce <- n1@Nonce ; n2:Nonce <- n2@Nonce ; p1:Prin <- p1@Prin ; p2:Prin <- p2@Prin ;}

					:apply (rd)

