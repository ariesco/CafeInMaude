
:proven(inv100(S:Sys, r:Cipher1))
:proven(inv110(S:Sys, C:Cipher2))
:proven(inv120(S:Sys, C:Cipher3))
:proven(inv140(S:Sys, C:Cipher1))
:proven(inv150(S:Sys, C:Cipher2))
:goal{
eq [inv13 :nonexec] : inv130(S:Sys, n:Nonce)  = true .
}
:ind on (S:Sys)
:apply(si)
:sel(1)
	:apply(tc)

	-- Goal`1-1  -  inv130(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
	:def csb1#1 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys))  .]

	:apply(csb1#1)

		-- Goal`1-1-1  -  inv130(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
		:def csb2#1 = :ctf {eq nonce(C#Cipher1)  = n@Nonce .}

		:apply(csb2#1)

			-- Goal`1-1-1-1  -  inv130(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
			:def csb3#1 = :ctf [creator(n@Nonce)  .]

			:apply(csb3#1)

				-- Goal`1-1-1-1-1 Success by reduction
				:apply (rd)

			-- Goal`1-1-1-2 Success by implication and reduction.
			:imp [inv13]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)

		-- Goal`1-1-2 Success by implication and reduction.
		:imp [inv13]  by {n:Nonce <- n@Nonce ;}

		:apply (rd)


:sel(2)
	:apply(tc)

	-- Goal`2-1  -  inv130(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
	:def csb1#2 = :ctf [N#Nonce \in cnonce(nw(S#Sys))  .]

	:apply(csb1#2)

		-- Goal`2-1-1  -  inv130(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
		:def csb2#2 = :ctf {eq N#Nonce  = n@Nonce .}

		:apply(csb2#2)

			-- Goal`2-1-1-1  -  inv130(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb3#2 = :ctf [n@Nonce \in cnonce(nw(S#Sys))  .]

			:apply(csb3#2)

				-- Goal`2-1-1-1-1 Success by implication and reduction.
				:imp [inv13]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

				-- Goal`2-1-1-1-2 Success by reduction
				:apply (rd)

			-- Goal`2-1-1-2 Success by implication and reduction.
			:imp [inv13]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)

		-- Goal`2-1-2 Success by implication and reduction.
		:imp [inv13]  by {n:Nonce <- n@Nonce ;}

		:apply (rd)


:sel(4)
	:apply(tc)

	-- Goal`4-1  -  inv130(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
	:def csb1#4 = :ctf [N#Nonce \in cnonce(nw(S#Sys))  .]

	:apply(csb1#4)

		-- Goal`4-1-1  -  inv130(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
		:def csb2#4 = :ctf [N0#Nonce \in cnonce(nw(S#Sys))  .]

		:apply(csb2#4)

			-- Goal`4-1-1-1  -  inv130(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
			:def csb3#4 = :ctf {eq N#Nonce  = n@Nonce .}

			:apply(csb3#4)

				-- Goal`4-1-1-1-1  -  inv130(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb4#4 = :ctf [n@Nonce \in cnonce(nw(S#Sys))  .]

				:apply(csb4#4)

					-- Goal`4-1-1-1-1-1 Success by implication and reduction.
					:imp [inv13]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

					-- Goal`4-1-1-1-1-2 Success by reduction
					:apply (rd)

				-- Goal`4-1-1-1-2  -  inv130(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb5#4 = :ctf {eq N0#Nonce  = n@Nonce .}

				:apply(csb5#4)

					-- Goal`4-1-1-1-2-1  -  inv130(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb6#4 = :ctf [n@Nonce \in cnonce(nw(S#Sys))  .]

					:apply(csb6#4)

						-- Goal`4-1-1-1-2-1-1 Success by implication and reduction.
						:imp [inv13]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

						-- Goal`4-1-1-1-2-1-2 Success by reduction
						:apply (rd)

					-- Goal`4-1-1-1-2-2 Success by implication and reduction.
					:imp [inv13]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

			-- Goal`4-1-1-2 Success by implication and reduction.
			:imp [inv13]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)

		-- Goal`4-1-2 Success by implication and reduction.
		:imp [inv13]  by {n:Nonce <- n@Nonce ;}

		:apply (rd)


:sel(6)
	:apply(tc)

	-- Goal`6-1  -  inv130(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
	:def csb1#6 = :ctf [N#Nonce \in cnonce(nw(S#Sys))  .]

	:apply(csb1#6)

		-- Goal`6-1-1  -  inv130(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
		:def csb2#6 = :ctf {eq N#Nonce  = n@Nonce .}

		:apply(csb2#6)

			-- Goal`6-1-1-1  -  inv130(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb3#6 = :ctf [n@Nonce \in cnonce(nw(S#Sys))  .]

			:apply(csb3#6)

				-- Goal`6-1-1-1-1 Success by implication and reduction.
				:imp [inv13]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

				-- Goal`6-1-1-1-2 Success by reduction
				:apply (rd)

			-- Goal`6-1-1-2 Success by implication and reduction.
			:imp [inv13]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)

		-- Goal`6-1-2 Success by implication and reduction.
		:imp [inv13]  by {n:Nonce <- n@Nonce ;}

		:apply (rd)


:sel(5)
	:apply(tc)

	-- Goal`5-1  -  inv130(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
	:def csb1#5 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys))  .]

	:apply(csb1#5)

		-- Goal`5-1-1  -  inv130(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
		:def csb2#5 = :ctf {eq nonce(C#Cipher3)  = n@Nonce .}

		:apply(csb2#5)

			-- Goal`5-1-1-1  -  inv130(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
			:def csb3#5 = :ctf [creator(n@Nonce)  .]

			:apply(csb3#5)

				-- Goal`5-1-1-1-1 Success by reduction
				:apply (rd)

			-- Goal`5-1-1-2 Success by implication and reduction.
			:imp [inv13]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)

		-- Goal`5-1-2 Success by implication and reduction.
		:imp [inv13]  by {n:Nonce <- n@Nonce ;}

		:apply (rd)


:sel(3)
	:apply(tc)

	-- Goal`3-1  -  inv130(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
	:def csb1#3 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys))  .]

	:apply(csb1#3)

		-- Goal`3-1-1  -  inv130(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
		:def csb2#3 = :ctf {eq nonce1(C#Cipher2)  = n@Nonce .}

		:apply(csb2#3)

			-- Goal`3-1-1-1  -  inv130(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
			:def csb3#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

			:apply(csb3#3)

				-- Goal`3-1-1-1-1  -  inv130(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
				:def csb4#3 = :ctf [creator(n@Nonce)  .]

				:apply(csb4#3)

					-- Goal`3-1-1-1-1-1 Success by reduction
					:apply (rd)

				-- Goal`3-1-1-1-2  -  inv130(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
				:def csb5#3 = :ctf [creator(n@Nonce)  .]

				:apply(csb5#3)

					-- Goal`3-1-1-1-2-1 Success by reduction
					:apply (rd)

			-- Goal`3-1-1-2  -  inv130(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
			:def csb6#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

			:apply(csb6#3)

				-- Goal`3-1-1-2-1  -  inv130(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
				:def csb7#3 = :ctf [creator(n@Nonce)  .]

				:apply(csb7#3)

					-- Goal`3-1-1-2-1-1 Success by reduction
					:apply (rd)

				-- Goal`3-1-1-2-2 Success by implication and reduction.
				:imp [inv13]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

		-- Goal`3-1-2 Success by implication and reduction.
		:imp [inv13]  by {n:Nonce <- n@Nonce ;}

		:apply (rd)


:sel(8)
	:apply(tc)

	-- Goal`8-1  -  inv130(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
	:def csb1#8 = :ctf [R#Rand \in ur(S#Sys)  .]

	:apply(csb1#8)

		-- Goal`8-1-1 Success by implication and reduction.
		:imp [inv13]  by {n:Nonce <- n@Nonce ;}

		:apply (rd)

		-- Goal`8-1-2  -  inv130(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
		:def csb2#8 = :ctf {eq n(P#Prin, P0#Prin, R#Rand)  = n@Nonce .}

		:apply(csb2#8)

			-- Goal`8-1-2-1  -  inv130(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
			:def csb3#8 = :ctf [P0#Prin  .]

			:apply(csb3#8)

				-- Goal`8-1-2-1-1  -  inv130(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
				:def csb4#8 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

				:apply(csb4#8)

					-- Goal`8-1-2-1-1-1  -  inv130(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
					:def csb5#8 = :ctf [creator(n@Nonce)  .]

					:apply(csb5#8)

						-- Goal`8-1-2-1-1-1-1 Success by reduction
						:apply (rd)

					-- Goal`8-1-2-1-1-2 Success by implication and reduction.
					:imp [inv13]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

			-- Goal`8-1-2-2 Success by implication and reduction.
			:imp [inv13]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)


:sel(7)
	:apply(tc)

	-- The corresponding proof score was not present.
	:apply (rd)


:sel(9)
	:apply(tc)

	:def csb1#9 = :ctf [m1?(M#Msg)  .]

	:apply(csb1#9)

	:def csb2#9 = :ctf [M#Msg \in nw(S#Sys)  .]

	:apply(csb2#9)

	:def csb3#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

	:apply(csb3#9)

	:def csb4#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

	:apply(csb4#9)

	:def csb5#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

	:apply(csb5#9)

	:def csb6#9 = :ctf [R#Rand \in ur(S#Sys)  .]

	:apply(csb6#9)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:def csb7#9 = :ctf {eq sender(M#Msg)  = intruder .}

	:apply(csb7#9)

	:def csb8#9 = :ctf {eq n@Nonce  = n(P#Prin, intruder, R#Rand) .}

	:apply(csb8#9)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:def csb9#9 = :ctf {eq n@Nonce  = nonce(cipher1(M#Msg)) .}

	:apply(csb9#9)

	:def csb10#9 = :ctf {eq P#Prin  = intruder .}

	:apply(csb10#9)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:imp [proven-goal3]  by {C:Cipher1 <- cipher1(M#Msg) ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)


:sel(10)
	:apply(tc)

	:def csb1#10 = :ctf [M#Msg \in nw(S#Sys)  .]

	:apply(csb1#10)

	:def csb2#10 = :ctf [M0#Msg \in nw(S#Sys)  .]

	:apply(csb2#10)

	:def csb3#10 = :ctf [m1?(M#Msg)  .]

	:apply(csb3#10)

	:def csb4#10 = :ctf [m2?(M0#Msg)  .]

	:apply(csb4#10)

	:def csb5#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

	:apply(csb5#10)

	:def csb6#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

	:apply(csb6#10)

	:def csb7#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

	:apply(csb7#10)

	:def csb8#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

	:apply(csb8#10)

	:def csb9#10 = :ctf {eq nonce(cipher1(M#Msg))  = n(P#Prin, sender(M0#Msg), R#Rand) .}

	:apply(csb9#10)

	:def csb10#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

	:apply(csb10#10)

	:def csb11#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

	:apply(csb11#10)

	:def csb12#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

	:apply(csb12#10)

	:def csb13#10 = :ctf {eq nonce1(cipher2(M0#Msg))  = n(P#Prin, sender(M0#Msg), R#Rand) .}

	:apply(csb13#10)

	:def csb14#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

	:apply(csb14#10)

	:def csb15#10 = :ctf {eq sender(M0#Msg)  = intruder .}

	:apply(csb15#10)

	:def csb16#10 = :ctf {eq n@Nonce  = nonce2(cipher2(M0#Msg)) .}

	:apply(csb16#10)

	:def csb17#10 = :ctf {eq P#Prin  = intruder .}

	:apply(csb17#10)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:def csb18#10 = :ctf [nonce2(cipher2(M0#Msg)) \in cnonce(nw(S#Sys))  .]

	:apply(csb18#10)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:imp [proven-goal4]  by {C:Cipher2 <- cipher2(M0#Msg) ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv13]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

