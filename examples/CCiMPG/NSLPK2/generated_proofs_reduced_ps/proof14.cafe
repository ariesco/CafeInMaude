
:proven(inv100(S:Sys, C:Cipher1))
:proven(inv110(S:Sys, C:Cipher2))
:proven(inv120(S:Sys, C:Cipher3))
:proven(inv160(S:Sys, N:Nonce))
:goal{
eq [inv14 :nonexec] : inv140(S:Sys, c:Cipher1)  = true .
}
:ind on (S:Sys)
:apply(si)

eof

:def a = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

:sel(3)
	:apply(tc)

	-- Goal`3-1  -  inv140(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), c@Cipher1)  - Success
	:def csb1#3 = :ctf {eq intruder  = principal(c@Cipher1) .}

	:apply(csb1#3)

		-- Goal`3-1-1  -  inv140(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), c@Cipher1)  - Success
		:def csb2#3 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys))  .]

		:apply(csb2#3)

			-- Goal`3-1-1-1  -  inv140(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), c@Cipher1)  - Success
			:def csb3#3 = :ctf {eq key(C#Cipher2)  = principal(c@Cipher1) .}

			:apply(csb3#3)

				-- Goal`3-1-1-1-1  -  inv140(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), c@Cipher1)  - Success
				:def csb4#3 = :ctf {eq nonce(c@Cipher1)  = nonce1(C#Cipher2) .}

				:apply(csb4#3)

					-- Goal`3-1-1-1-1-1 Success by reduction
					:apply (rd)

					-- Goal`3-1-1-1-1-2  -  inv140(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), c@Cipher1)  - Success
					:def csb5#3 = :ctf {eq nonce(c@Cipher1)  = nonce2(C#Cipher2) .}

					:apply(csb5#3)

						-- Goal`3-1-1-1-1-2-1 Success by reduction
						:apply (rd)

						-- Goal`3-1-1-1-1-2-2 Success by implication and reduction.
						:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

						:apply (rd)

				-- Goal`3-1-1-1-2 Success by implication and reduction.
				:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

				:apply (rd)

			-- Goal`3-1-1-2 Success by implication and reduction.
			:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

			:apply (rd)

		-- Goal`3-1-2 Success by reduction
		:apply (rd)


:sel(1)
	:apply(tc)

	-- Goal`1-1  -  inv140(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), c@Cipher1)  - Success
	:def csb1#1 = :ctf {eq intruder  = principal(c@Cipher1) .}

	:apply(csb1#1)

		-- Goal`1-1-1  -  inv140(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), c@Cipher1)  - Success
		:def csb2#1 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys))  .]

		:apply(csb2#1)

			-- Goal`1-1-1-1  -  inv140(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), c@Cipher1)  - Success
			:def csb3#1 = :ctf {eq C#Cipher1  = c@Cipher1 .}

			:apply(csb3#1)

				-- Goal`1-1-1-1-1  -  inv140(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), c@Cipher1)  - Success
				:def csb4#1 = :ctf [c@Cipher1 \in cenc1(nw(S#Sys))  .]

				:apply(csb4#1)

					-- Goal`1-1-1-1-1-1  -  inv140(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), c@Cipher1)  - Success
					:def csb5#1 = :ctf {eq key(c@Cipher1)  = principal(c@Cipher1) .}

					:apply(csb5#1)

						-- Goal`1-1-1-1-1-1-1 Success by reduction
						:apply (rd)

						-- Goal`1-1-1-1-1-1-2 Success by implication and reduction.
						:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

						:apply (rd)

					-- Goal`1-1-1-1-1-2 Success by reduction
					:apply (rd)

				-- Goal`1-1-1-1-2  -  inv140(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), c@Cipher1)  - Success
				:def csb6#1 = :ctf {eq key(C#Cipher1)  = principal(c@Cipher1) .}

				:apply(csb6#1)

					-- Goal`1-1-1-1-2-1  -  inv140(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), c@Cipher1)  - Success
					:def csb7#1 = :ctf {eq nonce(C#Cipher1)  = nonce(c@Cipher1) .}

					:apply(csb7#1)

						-- Goal`1-1-1-1-2-1-1 Success by reduction
						:apply (rd)

						-- Goal`1-1-1-1-2-1-2 Success by implication and reduction.
						:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

						:apply (rd)

					-- Goal`1-1-1-1-2-2 Success by implication and reduction.
					:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

					:apply (rd)

			-- Goal`1-1-1-2 Success by implication and reduction.
			:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

			:apply (rd)

		-- Goal`1-1-2 Success by reduction
		:apply (rd)


:sel(4)
	:apply(tc)

	-- Goal`4-1  -  inv140(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), c@Cipher1)  - Success
	:def csb1#4 = :ctf {eq intruder  = principal(c@Cipher1) .}

	:apply(csb1#4)

		-- Goal`4-1-1  -  inv140(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), c@Cipher1)  - Success
		:def csb2#4 = :ctf [N#Nonce \in cnonce(nw(S#Sys))  .]

		:apply(csb2#4)

			-- Goal`4-1-1-1  -  inv140(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), c@Cipher1)  - Success
			:def csb3#4 = :ctf [N0#Nonce \in cnonce(nw(S#Sys))  .]

			:apply(csb3#4)

				-- Goal`4-1-1-1-1  -  inv140(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), c@Cipher1)  - Success
				:def csb4#4 = :ctf {eq nonce(c@Cipher1)  = N#Nonce .}

				:apply(csb4#4)

					-- Goal`4-1-1-1-1-1  -  inv140(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), c@Cipher1)  - Success
					:def csb5#4 = :ctf {eq N#Nonce  = N0#Nonce .}

					:apply(csb5#4)

						-- Goal`4-1-1-1-1-1-1  -  inv140(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), c@Cipher1)  - Success
						:def csb6#4 = :ctf {eq principal(c@Cipher1)  = P0#Prin .}

						:apply(csb6#4)

							-- Goal`4-1-1-1-1-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`4-1-1-1-1-1-1-2 Success by reduction
							:apply (rd)

						-- Goal`4-1-1-1-1-1-2  -  inv140(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), c@Cipher1)  - Success
						:def csb7#4 = :ctf {eq principal(c@Cipher1)  = P0#Prin .}

						:apply(csb7#4)

							-- Goal`4-1-1-1-1-1-2-1 Success by reduction
							:apply (rd)

							-- Goal`4-1-1-1-1-1-2-2 Success by reduction
							:apply (rd)

					-- Goal`4-1-1-1-1-2  -  inv140(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), c@Cipher1)  - Success
					:def csb8#4 = :ctf {eq nonce(c@Cipher1)  = N0#Nonce .}

					:apply(csb8#4)

						-- Goal`4-1-1-1-1-2-1  -  inv140(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), c@Cipher1)  - Success
						:def csb9#4 = :ctf {eq N#Nonce  = N0#Nonce .}

						:apply(csb9#4)

							-- Goal`4-1-1-1-1-2-1-1  -  inv140(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), c@Cipher1)  - Success
							:def csb10#4 = :ctf {eq principal(c@Cipher1)  = P0#Prin .}

							:apply(csb10#4)

								-- Goal`4-1-1-1-1-2-1-1-1 Success by reduction
								:apply (rd)

								-- Goal`4-1-1-1-1-2-1-1-2 Success by reduction
								:apply (rd)

							-- Goal`4-1-1-1-1-2-1-2  -  inv140(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), c@Cipher1)  - Success
							:def csb11#4 = :ctf {eq principal(c@Cipher1)  = P0#Prin .}

							:apply(csb11#4)

								-- Goal`4-1-1-1-1-2-1-2-1 Success by reduction
								:apply (rd)

								-- Goal`4-1-1-1-1-2-1-2-2 Success by reduction
								:apply (rd)

						-- Goal`4-1-1-1-1-2-2 Success by implication and reduction.
						:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

						:apply (rd)

				-- Goal`4-1-1-1-2 Success by implication and reduction.
				:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

				:apply (rd)

			-- Goal`4-1-1-2 Success by implication and reduction.
			:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

			:apply (rd)

		-- Goal`4-1-2 Success by reduction
		:apply (rd)


:sel(6)
	:apply(tc)

	-- Goal`6-1  -  inv140(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), c@Cipher1)  - Success
	:def csb1#6 = :ctf {eq intruder  = principal(c@Cipher1) .}

	:apply(csb1#6)

		-- Goal`6-1-1  -  inv140(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), c@Cipher1)  - Success
		:def csb2#6 = :ctf [N#Nonce \in cnonce(nw(S#Sys))  .]

		:apply(csb2#6)

			-- Goal`6-1-1-1  -  inv140(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), c@Cipher1)  - Success
			:def csb3#6 = :ctf {eq nonce(c@Cipher1)  = N#Nonce .}

			:apply(csb3#6)

				-- Goal`6-1-1-1-1  -  inv140(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), c@Cipher1)  - Success
				:def csb4#6 = :ctf {eq principal(c@Cipher1)  = P0#Prin .}

				:apply(csb4#6)

					-- Goal`6-1-1-1-1-1 Success by reduction
					:apply (rd)

					-- Goal`6-1-1-1-1-2 Success by reduction
					:apply (rd)

				-- Goal`6-1-1-1-2 Success by implication and reduction.
				:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

				:apply (rd)

			-- Goal`6-1-1-2 Success by implication and reduction.
			:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

			:apply (rd)

		-- Goal`6-1-2 Success by reduction
		:apply (rd)


:sel(5)
	:apply(tc)

	-- Goal`5-1  -  inv140(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), c@Cipher1)  - Success
	:def csb1#5 = :ctf {eq intruder  = principal(c@Cipher1) .}

	:apply(csb1#5)

		-- Goal`5-1-1  -  inv140(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), c@Cipher1)  - Success
		:def csb2#5 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys))  .]

		:apply(csb2#5)

			-- Goal`5-1-1-1  -  inv140(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), c@Cipher1)  - Success
			:def csb3#5 = :ctf {eq key(C#Cipher3)  = principal(c@Cipher1) .}

			:apply(csb3#5)

				-- Goal`5-1-1-1-1  -  inv140(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), c@Cipher1)  - Success
				:def csb4#5 = :ctf {eq nonce(c@Cipher1)  = nonce(C#Cipher3) .}

				:apply(csb4#5)

					-- Goal`5-1-1-1-1-1 Success by reduction
					:apply (rd)

					-- Goal`5-1-1-1-1-2 Success by implication and reduction.
					:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

					:apply (rd)

				-- Goal`5-1-1-1-2 Success by implication and reduction.
				:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

				:apply (rd)

			-- Goal`5-1-1-2 Success by implication and reduction.
			:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

			:apply (rd)

		-- Goal`5-1-2 Success by reduction
		:apply (rd)


:sel(7)
	:apply(tc)

	-- The corresponding proof score was not present.
	:apply (rd)


:sel(8)
	:apply(tc)

	:postpone .


:sel(2)
	:apply(tc)

	:postpone .


:sel(10)
	:apply(tc)

	:def csb1#10 = :ctf [M#Msg \in nw(S#Sys)  .]

	:apply(csb1#10)

	:def csb2#10 = :ctf [M0#Msg \in nw(S#Sys)  .]

	:apply(csb2#10)

	:def csb3#10 = :ctf [m1?(M#Msg)  .]

	:apply(csb3#10)

	:def csb4#10 = :ctf [m2?(M0#Msg)  .]

	:apply(csb4#10)

	:def csb5#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

	:apply(csb5#10)

	:def csb6#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

	:apply(csb6#10)

	:def csb7#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

	:apply(csb7#10)

	:def csb8#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

	:apply(csb8#10)

	:def csb9#10 = :ctf {eq nonce(cipher1(M#Msg))  = n(P#Prin, sender(M0#Msg), R#Rand) .}

	:apply(csb9#10)

	:def csb10#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

	:apply(csb10#10)

	:def csb11#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

	:apply(csb11#10)

	:def csb12#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

	:apply(csb12#10)

	:def csb13#10 = :ctf {eq nonce1(cipher2(M0#Msg))  = n(P#Prin, sender(M0#Msg), R#Rand) .}

	:apply(csb13#10)

	:def csb14#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

	:apply(csb14#10)

	:def csb15#10 = :ctf {eq sender(M0#Msg)  = intruder .}

	:apply(csb15#10)

	:def csb16#10 = :ctf {eq nonce(c@Cipher1)  = nonce2(cipher2(M0#Msg)) .}

	:apply(csb16#10)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)

	:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

	:apply (rd)


:sel(9)
	:apply(tc)

	-- Goal`9-1  -  inv140(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), c@Cipher1)  - Success
	:def csb1#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

	:apply(csb1#9)

		-- Goal`9-1-1  -  inv140(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), c@Cipher1)  - Success
		:def csb2#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

		:apply(csb2#9)

			-- Goal`9-1-1-1  -  inv140(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), c@Cipher1)  - Success
			:def csb3#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

			:apply(csb3#9)

				-- Goal`9-1-1-1-1  -  inv140(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), c@Cipher1)  - Success
				:def csb4#9 = :ctf [M#Msg \in nw(S#Sys)  .]

				:apply(csb4#9)

					-- Goal`9-1-1-1-1-1  -  inv140(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), c@Cipher1)  - Success
					:def csb5#9 = :ctf [R#Rand \in ur(S#Sys)  .]

					:apply(csb5#9)

						-- Goal`9-1-1-1-1-1-1 Success by implication and reduction.
						:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

						:apply (rd)

						-- Goal`9-1-1-1-1-1-2  -  inv140(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), c@Cipher1)  - Success
						:def csb6#9 = :ctf [m1?(M#Msg)  .]

						:apply(csb6#9)

							-- Goal`9-1-1-1-1-1-2-1  -  inv140(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), c@Cipher1)  - Success
							:def csb7#9 = :ctf {eq intruder  = sender(M#Msg) .}

							:apply(csb7#9)

								-- Goal`9-1-1-1-1-1-2-1-1  -  inv140(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), c@Cipher1)  - Success
								:def csb8#9 = :ctf {eq nonce(c@Cipher1)  = n(P#Prin, sender(M#Msg), R#Rand) .}

								:apply(csb8#9)

									-- Goal`9-1-1-1-1-1-2-1-1-1 Success by reduction
									:apply (rd)

									-- Goal`9-1-1-1-1-1-2-1-1-2  -  inv140(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), c@Cipher1)  - Success
									:def csb9#9 = :ctf {eq nonce(c@Cipher1)  = nonce(cipher1(M#Msg)) .}

									:apply(csb9#9)

										-- Goal`9-1-1-1-1-1-2-1-1-2-1 Success by reduction
										:apply (rd)

										-- Goal`9-1-1-1-1-1-2-1-1-2-2 Success by implication and reduction.
										:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

										:apply (rd)

								-- Goal`9-1-1-1-1-1-2-1-2 Success by implication and reduction.
								:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

								:apply (rd)

							-- Goal`9-1-1-1-1-1-2-2 Success by implication and reduction.
							:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

							:apply (rd)

					-- Goal`9-1-1-1-1-2 Success by implication and reduction.
					:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

					:apply (rd)

				-- Goal`9-1-1-1-2 Success by implication and reduction.
				:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

				:apply (rd)

			-- Goal`9-1-1-2 Success by implication and reduction.
			:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

			:apply (rd)

		-- Goal`9-1-2 Success by implication and reduction.
		:imp [inv14]  by {c:Cipher1 <- c@Cipher1 ;}

		:apply (rd)

