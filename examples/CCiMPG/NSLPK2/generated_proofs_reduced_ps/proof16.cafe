
:proven(inv100(S:Sys, C:Cipher1))
:proven(inv110(S:Sys, C:Cipher2))
:proven(inv120(S:Sys, C:Cipher3))
:goal{
eq [inv16 :nonexec] : inv160(S:Sys, n:Nonce)  = true .
}
:ind on (S:Sys)
:apply(si)
:sel(1)
	:apply(tc)

	-- Goal`1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
	:def csb1#1 = :cvs [nw(S#Sys)  .]

	:apply(csb1#1)

		-- Goal`1-1-1 Success by reduction
		:apply (rd)

		-- Goal`1-1-2  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
		:def csb2#1 = :ctf {eq C#Cipher1  = C#EVS1-1.SubCipher1 .}

		:apply(csb2#1)

			-- Goal`1-1-2-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
			:def csb3#1 = :ctf [creator(n@Nonce)  .]

			:apply(csb3#1)

				-- Goal`1-1-2-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
				:def csb4#1 = :ctf [key(C#EVS1-1.SubCipher1)  .]

				:apply(csb4#1)

					-- Goal`1-1-2-1-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
					:def csb5#1 = :ctf [C#EVS1-1.SubCipher1 \in cenc1(N0#EVS1-1.Network)  .]

					:apply(csb5#1)

						-- Goal`1-1-2-1-1-1-1 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:imp [proven-goal0]  by {C:Cipher1 <- C#Cipher1 ;}

						:apply (rd)

						-- Goal`1-1-2-1-1-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

			-- Goal`1-1-2-2  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
			:def csb6#1 = :ctf [C#Cipher1 \in cenc1(N0#EVS1-1.Network)  .]

			:apply(csb6#1)

				-- Goal`1-1-2-2-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
				:def csb7#1 = :ctf {eq nonce(C#Cipher1)  = n@Nonce .}

				:apply(csb7#1)

					-- Goal`1-1-2-2-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
					:def csb8#1 = :ctf {eq nonce(C#EVS1-1.SubCipher1)  = n@Nonce .}

					:apply(csb8#1)

						-- Goal`1-1-2-2-1-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
						:def csb9#1 = :ctf [creator(n@Nonce)  .]

						:apply(csb9#1)

							-- Goal`1-1-2-2-1-1-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
							:def csb10#1 = :ctf [key(C#Cipher1)  .]

							:apply(csb10#1)

								-- Goal`1-1-2-2-1-1-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`1-1-2-2-1-1-2  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
						:def csb11#1 = :ctf [creator(n@Nonce)  .]

						:apply(csb11#1)

							-- Goal`1-1-2-2-1-1-2-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
							:def csb12#1 = :ctf [key(C#Cipher1)  .]

							:apply(csb12#1)

								-- Goal`1-1-2-2-1-1-2-1-1 Success by reduction
								:apply (rd)

					-- Goal`1-1-2-2-1-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

				-- Goal`1-1-2-2-2 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

		-- Goal`1-1-3  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
		:def csb13#1 = :ctf [C#Cipher1 \in cenc1(N0#EVS1-1.Network)  .]

		:apply(csb13#1)

			-- Goal`1-1-3-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
			:def csb14#1 = :ctf {eq nonce(C#Cipher1)  = n@Nonce .}

			:apply(csb14#1)

				-- Goal`1-1-3-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
				:def csb15#1 = :ctf {eq nonce1(C#EVS1-1.SubCipher2)  = n@Nonce .}

				:apply(csb15#1)

					-- Goal`1-1-3-1-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
					:def csb16#1 = :ctf {eq nonce2(C#EVS1-1.SubCipher2)  = n@Nonce .}

					:apply(csb16#1)

						-- Goal`1-1-3-1-1-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
						:def csb17#1 = :ctf [creator(n@Nonce)  .]

						:apply(csb17#1)

							-- Goal`1-1-3-1-1-1-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
							:def csb18#1 = :ctf [key(C#Cipher1)  .]

							:apply(csb18#1)

								-- Goal`1-1-3-1-1-1-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`1-1-3-1-1-1-2  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
						:def csb19#1 = :ctf [creator(n@Nonce)  .]

						:apply(csb19#1)

							-- Goal`1-1-3-1-1-1-2-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
							:def csb20#1 = :ctf [key(C#Cipher1)  .]

							:apply(csb20#1)

								-- Goal`1-1-3-1-1-1-2-1-1 Success by reduction
								:apply (rd)

					-- Goal`1-1-3-1-1-2  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
					:def csb21#1 = :ctf {eq nonce2(C#EVS1-1.SubCipher2)  = n@Nonce .}

					:apply(csb21#1)

						-- Goal`1-1-3-1-1-2-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
						:def csb22#1 = :ctf [creator(n@Nonce)  .]

						:apply(csb22#1)

							-- Goal`1-1-3-1-1-2-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
							:def csb23#1 = :ctf [key(C#Cipher1)  .]

							:apply(csb23#1)

								-- Goal`1-1-3-1-1-2-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`1-1-3-1-1-2-2  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
						:def csb24#1 = :ctf [creator(n@Nonce)  .]

						:apply(csb24#1)

							-- Goal`1-1-3-1-1-2-2-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
							:def csb25#1 = :ctf [key(C#Cipher1)  .]

							:apply(csb25#1)

								-- Goal`1-1-3-1-1-2-2-1-1 Success by reduction
								:apply (rd)

				-- Goal`1-1-3-1-2 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

			-- Goal`1-1-3-2 Success by implication and reduction.
			:imp [inv16]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)

		-- Goal`1-1-4  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
		:def csb26#1 = :ctf [C#Cipher1 \in cenc1(N0#EVS1-1.Network)  .]

		:apply(csb26#1)

			-- Goal`1-1-4-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
			:def csb27#1 = :ctf {eq nonce(C#Cipher1)  = n@Nonce .}

			:apply(csb27#1)

				-- Goal`1-1-4-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
				:def csb28#1 = :ctf {eq nonce(C#EVS1-1.SubCipher3)  = n@Nonce .}

				:apply(csb28#1)

					-- Goal`1-1-4-1-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
					:def csb29#1 = :ctf [creator(n@Nonce)  .]

					:apply(csb29#1)

						-- Goal`1-1-4-1-1-1-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
						:def csb30#1 = :ctf [key(C#Cipher1)  .]

						:apply(csb30#1)

							-- Goal`1-1-4-1-1-1-1-1 Success by reduction
							:apply (rd)

					-- Goal`1-1-4-1-1-2  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
					:def csb31#1 = :ctf [creator(n@Nonce)  .]

					:apply(csb31#1)

						-- Goal`1-1-4-1-1-2-1  -  inv160(fkm11(S#Sys, P#Prin, P0#Prin, C#Cipher1), n@Nonce)  - Success
						:def csb32#1 = :ctf [key(C#Cipher1)  .]

						:apply(csb32#1)

							-- Goal`1-1-4-1-1-2-1-1 Success by reduction
							:apply (rd)

				-- Goal`1-1-4-1-2 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

			-- Goal`1-1-4-2 Success by implication and reduction.
			:imp [inv16]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)


:sel(2)
	:apply(tc)

	-- Goal`2-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
	:def csb1#2 = :cvs [nw(S#Sys)  .]

	:apply(csb1#2)

		-- Goal`2-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
		:def csb2#2 = :ctf [creator(N#Nonce)  .]

		:apply(csb2#2)

			-- Goal`2-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb3#2 = :ctf {eq N#Nonce  = n@Nonce .}

			:apply(csb3#2)

				-- Goal`2-1-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb4#2 = :ctf [creator(n@Nonce)  .]

				:apply(csb4#2)

					-- Goal`2-1-1-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb5#2 = :ctf [P0#Prin  .]

					:apply(csb5#2)

						-- Goal`2-1-1-1-1-1-1 Success by reduction
						:apply (rd)

				-- Goal`2-1-1-1-2 Success by reduction
				:apply (rd)

		-- Goal`2-1-2  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
		:def csb6#2 = :ctf {eq nonce(C#EVS2-1.SubCipher1)  = N#Nonce .}

		:apply(csb6#2)

			-- Goal`2-1-2-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb7#2 = :ctf [creator(n@Nonce)  .]

			:apply(csb7#2)

				-- Goal`2-1-2-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb8#2 = :ctf [key(C#EVS2-1.SubCipher1)  .]

				:apply(csb8#2)

					-- Goal`2-1-2-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb9#2 = :ctf {eq N#Nonce  = n@Nonce .}

					:apply(csb9#2)

						-- Goal`2-1-2-1-1-1-1 Success by reduction
						:apply (rd)

						-- Goal`2-1-2-1-1-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

			-- Goal`2-1-2-2  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb10#2 = :ctf [N#Nonce \in cnonce(N0#EVS2-1.Network)  .]

			:apply(csb10#2)

				-- Goal`2-1-2-2-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb11#2 = :ctf {eq N#Nonce  = n@Nonce .}

				:apply(csb11#2)

					-- Goal`2-1-2-2-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb12#2 = :ctf {eq nonce(C#EVS2-1.SubCipher1)  = n@Nonce .}

					:apply(csb12#2)

						-- Goal`2-1-2-2-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb13#2 = :ctf [creator(n@Nonce)  .]

						:apply(csb13#2)

							-- Goal`2-1-2-2-1-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
							:def csb14#2 = :ctf [key(C#EVS2-1.SubCipher1)  .]

							:apply(csb14#2)

								-- Goal`2-1-2-2-1-1-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`2-1-2-2-1-1-2  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb15#2 = :ctf [n@Nonce \in cnonce(N0#EVS2-1.Network)  .]

						:apply(csb15#2)

							-- Goal`2-1-2-2-1-1-2-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
							:def csb16#2 = :ctf [P0#Prin  .]

							:apply(csb16#2)

								-- Goal`2-1-2-2-1-1-2-1-1 Success by reduction
								:apply (rd)

							-- Goal`2-1-2-2-1-1-2-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

					-- Goal`2-1-2-2-1-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

				-- Goal`2-1-2-2-2 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

		-- Goal`2-1-3  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
		:def csb17#2 = :ctf {eq nonce1(C#EVS2-1.SubCipher2)  = N#Nonce .}

		:apply(csb17#2)

			-- Goal`2-1-3-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb18#2 = :ctf {eq nonce2(C#EVS2-1.SubCipher2)  = N#Nonce .}

			:apply(csb18#2)

				-- Goal`2-1-3-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb19#2 = :ctf [creator(n@Nonce)  .]

				:apply(csb19#2)

					-- Goal`2-1-3-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb20#2 = :ctf [key(C#EVS2-1.SubCipher2)  .]

					:apply(csb20#2)

						-- Goal`2-1-3-1-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb21#2 = :ctf {eq N#Nonce  = n@Nonce .}

						:apply(csb21#2)

							-- Goal`2-1-3-1-1-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`2-1-3-1-1-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

				-- Goal`2-1-3-1-2  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb22#2 = :ctf [creator(n@Nonce)  .]

				:apply(csb22#2)

					-- Goal`2-1-3-1-2-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb23#2 = :ctf [key(C#EVS2-1.SubCipher2)  .]

					:apply(csb23#2)

						-- Goal`2-1-3-1-2-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb24#2 = :ctf {eq N#Nonce  = n@Nonce .}

						:apply(csb24#2)

							-- Goal`2-1-3-1-2-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`2-1-3-1-2-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

			-- Goal`2-1-3-2  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb25#2 = :ctf {eq nonce2(C#EVS2-1.SubCipher2)  = N#Nonce .}

			:apply(csb25#2)

				-- Goal`2-1-3-2-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb26#2 = :ctf [creator(n@Nonce)  .]

				:apply(csb26#2)

					-- Goal`2-1-3-2-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb27#2 = :ctf [key(C#EVS2-1.SubCipher2)  .]

					:apply(csb27#2)

						-- Goal`2-1-3-2-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb28#2 = :ctf {eq N#Nonce  = n@Nonce .}

						:apply(csb28#2)

							-- Goal`2-1-3-2-1-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`2-1-3-2-1-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

				-- Goal`2-1-3-2-2  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb29#2 = :ctf [N#Nonce \in cnonce(N0#EVS2-1.Network)  .]

				:apply(csb29#2)

					-- Goal`2-1-3-2-2-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb30#2 = :ctf {eq N#Nonce  = n@Nonce .}

					:apply(csb30#2)

						-- Goal`2-1-3-2-2-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb31#2 = :ctf {eq nonce1(C#EVS2-1.SubCipher2)  = n@Nonce .}

						:apply(csb31#2)

							-- Goal`2-1-3-2-2-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
							:def csb32#2 = :ctf {eq nonce2(C#EVS2-1.SubCipher2)  = n@Nonce .}

							:apply(csb32#2)

								-- Goal`2-1-3-2-2-1-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
								:def csb33#2 = :ctf [creator(n@Nonce)  .]

								:apply(csb33#2)

									-- Goal`2-1-3-2-2-1-1-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
									:def csb34#2 = :ctf [key(C#EVS2-1.SubCipher2)  .]

									:apply(csb34#2)

										-- Goal`2-1-3-2-2-1-1-1-1-1-1 Success by reduction
										:apply (rd)

								-- Goal`2-1-3-2-2-1-1-1-2  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
								:def csb35#2 = :ctf [creator(n@Nonce)  .]

								:apply(csb35#2)

									-- Goal`2-1-3-2-2-1-1-1-2-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
									:def csb36#2 = :ctf [key(C#EVS2-1.SubCipher2)  .]

									:apply(csb36#2)

										-- Goal`2-1-3-2-2-1-1-1-2-1-1 Success by reduction
										:apply (rd)

							-- Goal`2-1-3-2-2-1-1-2  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
							:def csb37#2 = :ctf {eq nonce2(C#EVS2-1.SubCipher2)  = n@Nonce .}

							:apply(csb37#2)

								-- Goal`2-1-3-2-2-1-1-2-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
								:def csb38#2 = :ctf [creator(n@Nonce)  .]

								:apply(csb38#2)

									-- Goal`2-1-3-2-2-1-1-2-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
									:def csb39#2 = :ctf [key(C#EVS2-1.SubCipher2)  .]

									:apply(csb39#2)

										-- Goal`2-1-3-2-2-1-1-2-1-1-1 Success by reduction
										:apply (rd)

								-- Goal`2-1-3-2-2-1-1-2-2  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
								:def csb40#2 = :ctf [n@Nonce \in cnonce(N0#EVS2-1.Network)  .]

								:apply(csb40#2)

									-- Goal`2-1-3-2-2-1-1-2-2-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
									:def csb41#2 = :ctf [P0#Prin  .]

									:apply(csb41#2)

										-- Goal`2-1-3-2-2-1-1-2-2-1-1 Success by reduction
										:apply (rd)

									-- Goal`2-1-3-2-2-1-1-2-2-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

						-- Goal`2-1-3-2-2-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

					-- Goal`2-1-3-2-2-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

		-- Goal`2-1-4  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
		:def csb42#2 = :ctf {eq nonce(C#EVS2-1.SubCipher3)  = N#Nonce .}

		:apply(csb42#2)

			-- Goal`2-1-4-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb43#2 = :ctf [creator(n@Nonce)  .]

			:apply(csb43#2)

				-- Goal`2-1-4-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb44#2 = :ctf [key(C#EVS2-1.SubCipher3)  .]

				:apply(csb44#2)

					-- Goal`2-1-4-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb45#2 = :ctf {eq N#Nonce  = n@Nonce .}

					:apply(csb45#2)

						-- Goal`2-1-4-1-1-1-1 Success by reduction
						:apply (rd)

						-- Goal`2-1-4-1-1-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

			-- Goal`2-1-4-2  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb46#2 = :ctf [N#Nonce \in cnonce(N0#EVS2-1.Network)  .]

			:apply(csb46#2)

				-- Goal`2-1-4-2-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb47#2 = :ctf {eq N#Nonce  = n@Nonce .}

				:apply(csb47#2)

					-- Goal`2-1-4-2-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb48#2 = :ctf {eq nonce(C#EVS2-1.SubCipher3)  = n@Nonce .}

					:apply(csb48#2)

						-- Goal`2-1-4-2-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb49#2 = :ctf [creator(n@Nonce)  .]

						:apply(csb49#2)

							-- Goal`2-1-4-2-1-1-1-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
							:def csb50#2 = :ctf [key(C#EVS2-1.SubCipher3)  .]

							:apply(csb50#2)

								-- Goal`2-1-4-2-1-1-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`2-1-4-2-1-1-2  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb51#2 = :ctf [n@Nonce \in cnonce(N0#EVS2-1.Network)  .]

						:apply(csb51#2)

							-- Goal`2-1-4-2-1-1-2-1  -  inv160(fkm12(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
							:def csb52#2 = :ctf [P0#Prin  .]

							:apply(csb52#2)

								-- Goal`2-1-4-2-1-1-2-1-1 Success by reduction
								:apply (rd)

							-- Goal`2-1-4-2-1-1-2-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

					-- Goal`2-1-4-2-1-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

				-- Goal`2-1-4-2-2 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)


:sel(5)
	:apply(tc)

	-- Goal`5-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
	:def csb1#5 = :cvs [nw(S#Sys)  .]

	:apply(csb1#5)

		-- Goal`5-1-1 Success by reduction
		:apply (rd)

		-- Goal`5-1-2  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
		:def csb2#5 = :ctf [C#Cipher3 \in cenc3(N0#EVS5-1.Network)  .]

		:apply(csb2#5)

			-- Goal`5-1-2-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
			:def csb3#5 = :ctf {eq nonce(C#Cipher3)  = n@Nonce .}

			:apply(csb3#5)

				-- Goal`5-1-2-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
				:def csb4#5 = :ctf {eq nonce(C#EVS5-1.SubCipher1)  = n@Nonce .}

				:apply(csb4#5)

					-- Goal`5-1-2-1-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
					:def csb5#5 = :ctf [creator(n@Nonce)  .]

					:apply(csb5#5)

						-- Goal`5-1-2-1-1-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
						:def csb6#5 = :ctf [key(C#Cipher3)  .]

						:apply(csb6#5)

							-- Goal`5-1-2-1-1-1-1-1 Success by reduction
							:apply (rd)

					-- Goal`5-1-2-1-1-2  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
					:def csb7#5 = :ctf [creator(n@Nonce)  .]

					:apply(csb7#5)

						-- Goal`5-1-2-1-1-2-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
						:def csb8#5 = :ctf [key(C#Cipher3)  .]

						:apply(csb8#5)

							-- Goal`5-1-2-1-1-2-1-1 Success by reduction
							:apply (rd)

				-- Goal`5-1-2-1-2 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

			-- Goal`5-1-2-2 Success by implication and reduction.
			:imp [inv16]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)

		-- Goal`5-1-3  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
		:def csb9#5 = :ctf [C#Cipher3 \in cenc3(N0#EVS5-1.Network)  .]

		:apply(csb9#5)

			-- Goal`5-1-3-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
			:def csb10#5 = :ctf {eq nonce(C#Cipher3)  = n@Nonce .}

			:apply(csb10#5)

				-- Goal`5-1-3-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
				:def csb11#5 = :ctf {eq nonce1(C#EVS5-1.SubCipher2)  = n@Nonce .}

				:apply(csb11#5)

					-- Goal`5-1-3-1-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
					:def csb12#5 = :ctf {eq nonce2(C#EVS5-1.SubCipher2)  = n@Nonce .}

					:apply(csb12#5)

						-- Goal`5-1-3-1-1-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
						:def csb13#5 = :ctf [creator(n@Nonce)  .]

						:apply(csb13#5)

							-- Goal`5-1-3-1-1-1-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
							:def csb14#5 = :ctf [key(C#Cipher3)  .]

							:apply(csb14#5)

								-- Goal`5-1-3-1-1-1-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`5-1-3-1-1-1-2  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
						:def csb15#5 = :ctf [creator(n@Nonce)  .]

						:apply(csb15#5)

							-- Goal`5-1-3-1-1-1-2-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
							:def csb16#5 = :ctf [key(C#Cipher3)  .]

							:apply(csb16#5)

								-- Goal`5-1-3-1-1-1-2-1-1 Success by reduction
								:apply (rd)

					-- Goal`5-1-3-1-1-2  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
					:def csb17#5 = :ctf {eq nonce2(C#EVS5-1.SubCipher2)  = n@Nonce .}

					:apply(csb17#5)

						-- Goal`5-1-3-1-1-2-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
						:def csb18#5 = :ctf [creator(n@Nonce)  .]

						:apply(csb18#5)

							-- Goal`5-1-3-1-1-2-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
							:def csb19#5 = :ctf [key(C#Cipher3)  .]

							:apply(csb19#5)

								-- Goal`5-1-3-1-1-2-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`5-1-3-1-1-2-2  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
						:def csb20#5 = :ctf [creator(n@Nonce)  .]

						:apply(csb20#5)

							-- Goal`5-1-3-1-1-2-2-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
							:def csb21#5 = :ctf [key(C#Cipher3)  .]

							:apply(csb21#5)

								-- Goal`5-1-3-1-1-2-2-1-1 Success by reduction
								:apply (rd)

				-- Goal`5-1-3-1-2 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

			-- Goal`5-1-3-2 Success by implication and reduction.
			:imp [inv16]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)

		-- Goal`5-1-4  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
		:def csb22#5 = :ctf {eq C#Cipher3  = C#EVS5-1.SubCipher3 .}

		:apply(csb22#5)

			-- Goal`5-1-4-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
			:def csb23#5 = :ctf [creator(n@Nonce)  .]

			:apply(csb23#5)

				-- Goal`5-1-4-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
				:def csb24#5 = :ctf [key(C#EVS5-1.SubCipher3)  .]

				:apply(csb24#5)

					-- Goal`5-1-4-1-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
					:def csb25#5 = :ctf [C#EVS5-1.SubCipher3 \in cenc3(N0#EVS5-1.Network)  .]

					:apply(csb25#5)

						-- Goal`5-1-4-1-1-1-1 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:imp [proven-goal2]  by {C:Cipher3 <- C#Cipher3 ;}

						:apply (rd)

						-- Goal`5-1-4-1-1-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

			-- Goal`5-1-4-2  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
			:def csb26#5 = :ctf [C#Cipher3 \in cenc3(N0#EVS5-1.Network)  .]

			:apply(csb26#5)

				-- Goal`5-1-4-2-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
				:def csb27#5 = :ctf {eq nonce(C#Cipher3)  = n@Nonce .}

				:apply(csb27#5)

					-- Goal`5-1-4-2-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
					:def csb28#5 = :ctf {eq nonce(C#EVS5-1.SubCipher3)  = n@Nonce .}

					:apply(csb28#5)

						-- Goal`5-1-4-2-1-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
						:def csb29#5 = :ctf [creator(n@Nonce)  .]

						:apply(csb29#5)

							-- Goal`5-1-4-2-1-1-1-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
							:def csb30#5 = :ctf [key(C#Cipher3)  .]

							:apply(csb30#5)

								-- Goal`5-1-4-2-1-1-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`5-1-4-2-1-1-2  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
						:def csb31#5 = :ctf [creator(n@Nonce)  .]

						:apply(csb31#5)

							-- Goal`5-1-4-2-1-1-2-1  -  inv160(fkm31(S#Sys, P#Prin, P0#Prin, C#Cipher3), n@Nonce)  - Success
							:def csb32#5 = :ctf [key(C#Cipher3)  .]

							:apply(csb32#5)

								-- Goal`5-1-4-2-1-1-2-1-1 Success by reduction
								:apply (rd)

					-- Goal`5-1-4-2-1-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

				-- Goal`5-1-4-2-2 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)


:sel(3)
	:apply(tc)

	-- Goal`3-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
	:def csb1#3 = :cvs [nw(S#Sys)  .]

	:apply(csb1#3)

		-- Goal`3-1-1 Success by reduction
		:apply (rd)

		-- Goal`3-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
		:def csb2#3 = :ctf [C#Cipher2 \in cenc2(N0#EVS3-1.Network)  .]

		:apply(csb2#3)

			-- Goal`3-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
			:def csb3#3 = :ctf {eq nonce(C#EVS3-1.SubCipher1)  = n@Nonce .}

			:apply(csb3#3)

				-- Goal`3-1-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
				:def csb4#3 = :ctf {eq nonce1(C#Cipher2)  = n@Nonce .}

				:apply(csb4#3)

					-- Goal`3-1-2-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
					:def csb5#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

					:apply(csb5#3)

						-- Goal`3-1-2-1-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb6#3 = :ctf [creator(n@Nonce)  .]

						:apply(csb6#3)

							-- Goal`3-1-2-1-1-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb7#3 = :ctf [key(C#Cipher2)  .]

							:apply(csb7#3)

								-- Goal`3-1-2-1-1-1-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`3-1-2-1-1-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb8#3 = :ctf [creator(n@Nonce)  .]

						:apply(csb8#3)

							-- Goal`3-1-2-1-1-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb9#3 = :ctf [key(C#Cipher2)  .]

							:apply(csb9#3)

								-- Goal`3-1-2-1-1-1-2-1-1 Success by reduction
								:apply (rd)

					-- Goal`3-1-2-1-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
					:def csb10#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

					:apply(csb10#3)

						-- Goal`3-1-2-1-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb11#3 = :ctf [creator(n@Nonce)  .]

						:apply(csb11#3)

							-- Goal`3-1-2-1-1-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb12#3 = :ctf [key(C#Cipher2)  .]

							:apply(csb12#3)

								-- Goal`3-1-2-1-1-2-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`3-1-2-1-1-2-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

				-- Goal`3-1-2-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
				:def csb13#3 = :ctf {eq nonce1(C#Cipher2)  = n@Nonce .}

				:apply(csb13#3)

					-- Goal`3-1-2-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
					:def csb14#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

					:apply(csb14#3)

						-- Goal`3-1-2-1-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb15#3 = :ctf [creator(n@Nonce)  .]

						:apply(csb15#3)

							-- Goal`3-1-2-1-2-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb16#3 = :ctf [key(C#Cipher2)  .]

							:apply(csb16#3)

								-- Goal`3-1-2-1-2-1-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`3-1-2-1-2-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb17#3 = :ctf [creator(n@Nonce)  .]

						:apply(csb17#3)

							-- Goal`3-1-2-1-2-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb18#3 = :ctf [key(C#Cipher2)  .]

							:apply(csb18#3)

								-- Goal`3-1-2-1-2-1-2-1-1 Success by reduction
								:apply (rd)

					-- Goal`3-1-2-1-2-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
					:def csb19#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

					:apply(csb19#3)

						-- Goal`3-1-2-1-2-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb20#3 = :ctf [creator(n@Nonce)  .]

						:apply(csb20#3)

							-- Goal`3-1-2-1-2-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb21#3 = :ctf [key(C#Cipher2)  .]

							:apply(csb21#3)

								-- Goal`3-1-2-1-2-2-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`3-1-2-1-2-2-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

			-- Goal`3-1-2-2 Success by implication and reduction.
			:imp [inv16]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)

		-- Goal`3-1-3  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
		:def csb22#3 = :ctf {eq C#Cipher2  = C#EVS3-1.SubCipher2 .}

		:apply(csb22#3)

			-- Goal`3-1-3-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
			:def csb23#3 = :ctf [creator(n@Nonce)  .]

			:apply(csb23#3)

				-- Goal`3-1-3-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
				:def csb24#3 = :ctf [key(C#EVS3-1.SubCipher2)  .]

				:apply(csb24#3)

					-- Goal`3-1-3-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
					:def csb25#3 = :ctf [C#EVS3-1.SubCipher2 \in cenc2(N0#EVS3-1.Network)  .]

					:apply(csb25#3)

						-- Goal`3-1-3-1-1-1-1 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:imp [proven-goal1]  by {C:Cipher2 <- C#Cipher2 ;}

						:apply (rd)

						-- Goal`3-1-3-1-1-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

			-- Goal`3-1-3-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
			:def csb26#3 = :ctf [C#Cipher2 \in cenc2(N0#EVS3-1.Network)  .]

			:apply(csb26#3)

				-- Goal`3-1-3-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
				:def csb27#3 = :ctf {eq nonce1(C#Cipher2)  = n@Nonce .}

				:apply(csb27#3)

					-- Goal`3-1-3-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
					:def csb28#3 = :ctf {eq nonce1(C#EVS3-1.SubCipher2)  = n@Nonce .}

					:apply(csb28#3)

						-- Goal`3-1-3-2-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb29#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

						:apply(csb29#3)

							-- Goal`3-1-3-2-1-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb30#3 = :ctf {eq nonce2(C#EVS3-1.SubCipher2)  = n@Nonce .}

							:apply(csb30#3)

								-- Goal`3-1-3-2-1-1-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
								:def csb31#3 = :ctf [creator(n@Nonce)  .]

								:apply(csb31#3)

									-- Goal`3-1-3-2-1-1-1-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
									:def csb32#3 = :ctf [key(C#Cipher2)  .]

									:apply(csb32#3)

										-- Goal`3-1-3-2-1-1-1-1-1-1-1 Success by reduction
										:apply (rd)

								-- Goal`3-1-3-2-1-1-1-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
								:def csb33#3 = :ctf [creator(n@Nonce)  .]

								:apply(csb33#3)

									-- Goal`3-1-3-2-1-1-1-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
									:def csb34#3 = :ctf [key(C#Cipher2)  .]

									:apply(csb34#3)

										-- Goal`3-1-3-2-1-1-1-1-2-1-1 Success by reduction
										:apply (rd)

							-- Goal`3-1-3-2-1-1-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb35#3 = :ctf {eq nonce2(C#EVS3-1.SubCipher2)  = n@Nonce .}

							:apply(csb35#3)

								-- Goal`3-1-3-2-1-1-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
								:def csb36#3 = :ctf [creator(n@Nonce)  .]

								:apply(csb36#3)

									-- Goal`3-1-3-2-1-1-1-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
									:def csb37#3 = :ctf [key(C#Cipher2)  .]

									:apply(csb37#3)

										-- Goal`3-1-3-2-1-1-1-2-1-1-1 Success by reduction
										:apply (rd)

								-- Goal`3-1-3-2-1-1-1-2-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
								:def csb38#3 = :ctf [creator(n@Nonce)  .]

								:apply(csb38#3)

									-- Goal`3-1-3-2-1-1-1-2-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
									:def csb39#3 = :ctf [key(C#Cipher2)  .]

									:apply(csb39#3)

										-- Goal`3-1-3-2-1-1-1-2-2-1-1 Success by reduction
										:apply (rd)

						-- Goal`3-1-3-2-1-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb40#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

						:apply(csb40#3)

							-- Goal`3-1-3-2-1-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb41#3 = :ctf {eq nonce2(C#EVS3-1.SubCipher2)  = n@Nonce .}

							:apply(csb41#3)

								-- Goal`3-1-3-2-1-1-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
								:def csb42#3 = :ctf [creator(n@Nonce)  .]

								:apply(csb42#3)

									-- Goal`3-1-3-2-1-1-2-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
									:def csb43#3 = :ctf [key(C#Cipher2)  .]

									:apply(csb43#3)

										-- Goal`3-1-3-2-1-1-2-1-1-1-1 Success by reduction
										:apply (rd)

								-- Goal`3-1-3-2-1-1-2-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
								:def csb44#3 = :ctf [creator(n@Nonce)  .]

								:apply(csb44#3)

									-- Goal`3-1-3-2-1-1-2-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
									:def csb45#3 = :ctf [key(C#Cipher2)  .]

									:apply(csb45#3)

										-- Goal`3-1-3-2-1-1-2-1-2-1-1 Success by reduction
										:apply (rd)

							-- Goal`3-1-3-2-1-1-2-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb46#3 = :ctf {eq nonce2(C#EVS3-1.SubCipher2)  = n@Nonce .}

							:apply(csb46#3)

								-- Goal`3-1-3-2-1-1-2-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
								:def csb47#3 = :ctf [creator(n@Nonce)  .]

								:apply(csb47#3)

									-- Goal`3-1-3-2-1-1-2-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
									:def csb48#3 = :ctf [key(C#Cipher2)  .]

									:apply(csb48#3)

										-- Goal`3-1-3-2-1-1-2-2-1-1-1 Success by reduction
										:apply (rd)

								-- Goal`3-1-3-2-1-1-2-2-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
								:def csb49#3 = :ctf [creator(n@Nonce)  .]

								:apply(csb49#3)

									-- Goal`3-1-3-2-1-1-2-2-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
									:def csb50#3 = :ctf [key(C#Cipher2)  .]

									:apply(csb50#3)

										-- Goal`3-1-3-2-1-1-2-2-2-1-1 Success by reduction
										:apply (rd)

					-- Goal`3-1-3-2-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
					:def csb51#3 = :ctf {eq nonce1(C#EVS3-1.SubCipher2)  = n@Nonce .}

					:apply(csb51#3)

						-- Goal`3-1-3-2-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb52#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

						:apply(csb52#3)

							-- Goal`3-1-3-2-1-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb53#3 = :ctf {eq nonce2(C#EVS3-1.SubCipher2)  = n@Nonce .}

							:apply(csb53#3)

								-- Goal`3-1-3-2-1-2-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
								:def csb54#3 = :ctf [creator(n@Nonce)  .]

								:apply(csb54#3)

									-- Goal`3-1-3-2-1-2-1-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
									:def csb55#3 = :ctf [key(C#Cipher2)  .]

									:apply(csb55#3)

										-- Goal`3-1-3-2-1-2-1-1-1-1-1 Success by reduction
										:apply (rd)

								-- Goal`3-1-3-2-1-2-1-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
								:def csb56#3 = :ctf [creator(n@Nonce)  .]

								:apply(csb56#3)

									-- Goal`3-1-3-2-1-2-1-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
									:def csb57#3 = :ctf [key(C#Cipher2)  .]

									:apply(csb57#3)

										-- Goal`3-1-3-2-1-2-1-1-2-1-1 Success by reduction
										:apply (rd)

							-- Goal`3-1-3-2-1-2-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`3-1-3-2-1-2-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb58#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

						:apply(csb58#3)

							-- Goal`3-1-3-2-1-2-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb59#3 = :ctf {eq nonce2(C#EVS3-1.SubCipher2)  = n@Nonce .}

							:apply(csb59#3)

								-- Goal`3-1-3-2-1-2-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
								:def csb60#3 = :ctf [creator(n@Nonce)  .]

								:apply(csb60#3)

									-- Goal`3-1-3-2-1-2-2-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
									:def csb61#3 = :ctf [key(C#Cipher2)  .]

									:apply(csb61#3)

										-- Goal`3-1-3-2-1-2-2-1-1-1-1 Success by reduction
										:apply (rd)

								-- Goal`3-1-3-2-1-2-2-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
								:def csb62#3 = :ctf [creator(n@Nonce)  .]

								:apply(csb62#3)

									-- Goal`3-1-3-2-1-2-2-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
									:def csb63#3 = :ctf [key(C#Cipher2)  .]

									:apply(csb63#3)

										-- Goal`3-1-3-2-1-2-2-1-2-1-1 Success by reduction
										:apply (rd)

							-- Goal`3-1-3-2-1-2-2-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

				-- Goal`3-1-3-2-2 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

		-- Goal`3-1-4  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
		:def csb64#3 = :ctf [C#Cipher2 \in cenc2(N0#EVS3-1.Network)  .]

		:apply(csb64#3)

			-- Goal`3-1-4-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
			:def csb65#3 = :ctf {eq nonce(C#EVS3-1.SubCipher3)  = n@Nonce .}

			:apply(csb65#3)

				-- Goal`3-1-4-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
				:def csb66#3 = :ctf {eq nonce1(C#Cipher2)  = n@Nonce .}

				:apply(csb66#3)

					-- Goal`3-1-4-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
					:def csb67#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

					:apply(csb67#3)

						-- Goal`3-1-4-1-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb68#3 = :ctf [creator(n@Nonce)  .]

						:apply(csb68#3)

							-- Goal`3-1-4-1-1-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb69#3 = :ctf [key(C#Cipher2)  .]

							:apply(csb69#3)

								-- Goal`3-1-4-1-1-1-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`3-1-4-1-1-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb70#3 = :ctf [creator(n@Nonce)  .]

						:apply(csb70#3)

							-- Goal`3-1-4-1-1-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb71#3 = :ctf [key(C#Cipher2)  .]

							:apply(csb71#3)

								-- Goal`3-1-4-1-1-1-2-1-1 Success by reduction
								:apply (rd)

					-- Goal`3-1-4-1-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
					:def csb72#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

					:apply(csb72#3)

						-- Goal`3-1-4-1-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb73#3 = :ctf [creator(n@Nonce)  .]

						:apply(csb73#3)

							-- Goal`3-1-4-1-1-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb74#3 = :ctf [key(C#Cipher2)  .]

							:apply(csb74#3)

								-- Goal`3-1-4-1-1-2-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`3-1-4-1-1-2-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

				-- Goal`3-1-4-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
				:def csb75#3 = :ctf {eq nonce1(C#Cipher2)  = n@Nonce .}

				:apply(csb75#3)

					-- Goal`3-1-4-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
					:def csb76#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

					:apply(csb76#3)

						-- Goal`3-1-4-1-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb77#3 = :ctf [creator(n@Nonce)  .]

						:apply(csb77#3)

							-- Goal`3-1-4-1-2-1-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb78#3 = :ctf [key(C#Cipher2)  .]

							:apply(csb78#3)

								-- Goal`3-1-4-1-2-1-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`3-1-4-1-2-1-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb79#3 = :ctf [creator(n@Nonce)  .]

						:apply(csb79#3)

							-- Goal`3-1-4-1-2-1-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb80#3 = :ctf [key(C#Cipher2)  .]

							:apply(csb80#3)

								-- Goal`3-1-4-1-2-1-2-1-1 Success by reduction
								:apply (rd)

					-- Goal`3-1-4-1-2-2  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
					:def csb81#3 = :ctf {eq nonce2(C#Cipher2)  = n@Nonce .}

					:apply(csb81#3)

						-- Goal`3-1-4-1-2-2-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
						:def csb82#3 = :ctf [creator(n@Nonce)  .]

						:apply(csb82#3)

							-- Goal`3-1-4-1-2-2-1-1  -  inv160(fkm21(S#Sys, P#Prin, P0#Prin, C#Cipher2), n@Nonce)  - Success
							:def csb83#3 = :ctf [key(C#Cipher2)  .]

							:apply(csb83#3)

								-- Goal`3-1-4-1-2-2-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`3-1-4-1-2-2-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

			-- Goal`3-1-4-2 Success by implication and reduction.
			:imp [inv16]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)


:sel(8)
	:apply(tc)

	-- Goal`8-1  -  inv160(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
	:def csb1#8 = :cvs [ur(S#Sys)  .]

	:apply(csb1#8)

		-- Goal`8-1-1  -  inv160(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
		:def csb2#8 = :ctf {eq n(P#Prin, P0#Prin, R#Rand)  = n@Nonce .}

		:apply(csb2#8)

			-- Goal`8-1-1-1  -  inv160(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
			:def csb3#8 = :ctf [P0#Prin  .]

			:apply(csb3#8)

				-- Goal`8-1-1-1-1  -  inv160(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
				:def csb4#8 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

				:apply(csb4#8)

					-- Goal`8-1-1-1-1-1 Success by reduction
					:apply (rd)

					-- Goal`8-1-1-1-1-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

			-- Goal`8-1-1-2 Success by implication and reduction.
			:imp [inv16]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)

		-- Goal`8-1-2  -  inv160(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
		:def csb5#8 = :ctf {eq EVS8-1.SubRand  = R#Rand .}

		:apply(csb5#8)

			-- Goal`8-1-2-1 Success by implication and reduction.
			:imp [inv16]  by {n:Nonce <- n@Nonce ;}

			:apply (rd)

			-- Goal`8-1-2-2  -  inv160(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
			:def csb6#8 = :ctf [R#Rand \in U0#EVS8-1.URand  .]

			:apply(csb6#8)

				-- Goal`8-1-2-2-1 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

				-- Goal`8-1-2-2-2  -  inv160(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
				:def csb7#8 = :ctf {eq n(P#Prin, P0#Prin, R#Rand)  = n@Nonce .}

				:apply(csb7#8)

					-- Goal`8-1-2-2-2-1  -  inv160(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
					:def csb8#8 = :ctf [P0#Prin  .]

					:apply(csb8#8)

						-- Goal`8-1-2-2-2-1-1  -  inv160(sdm1(S#Sys, P#Prin, P0#Prin, R#Rand), n@Nonce)  - Success
						:def csb9#8 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

						:apply(csb9#8)

							-- Goal`8-1-2-2-2-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`8-1-2-2-2-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

					-- Goal`8-1-2-2-2-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)


:sel(7)
	:apply(tc)

	-- The corresponding proof score was not present.
	:apply (rd)


:sel(6)
	:apply(tc)

	-- Goal`6-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
	:def csb1#6 = :cvs [nw(S#Sys)  .]

	:apply(csb1#6)

		-- Goal`6-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
		:def csb2#6 = :ctf [creator(N#Nonce)  .]

		:apply(csb2#6)

			-- Goal`6-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb3#6 = :ctf {eq N#Nonce  = n@Nonce .}

			:apply(csb3#6)

				-- Goal`6-1-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb4#6 = :ctf [creator(n@Nonce)  .]

				:apply(csb4#6)

					-- Goal`6-1-1-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb5#6 = :ctf [P0#Prin  .]

					:apply(csb5#6)

						-- Goal`6-1-1-1-1-1-1 Success by reduction
						:apply (rd)

				-- Goal`6-1-1-1-2 Success by reduction
				:apply (rd)

		-- Goal`6-1-2  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
		:def csb6#6 = :ctf {eq nonce(C#EVS6-1.SubCipher1)  = N#Nonce .}

		:apply(csb6#6)

			-- Goal`6-1-2-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb7#6 = :ctf [creator(n@Nonce)  .]

			:apply(csb7#6)

				-- Goal`6-1-2-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb8#6 = :ctf [key(C#EVS6-1.SubCipher1)  .]

				:apply(csb8#6)

					-- Goal`6-1-2-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb9#6 = :ctf {eq N#Nonce  = n@Nonce .}

					:apply(csb9#6)

						-- Goal`6-1-2-1-1-1-1 Success by reduction
						:apply (rd)

						-- Goal`6-1-2-1-1-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

			-- Goal`6-1-2-2  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb10#6 = :ctf [N#Nonce \in cnonce(N0#EVS6-1.Network)  .]

			:apply(csb10#6)

				-- Goal`6-1-2-2-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb11#6 = :ctf {eq N#Nonce  = n@Nonce .}

				:apply(csb11#6)

					-- Goal`6-1-2-2-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb12#6 = :ctf {eq nonce(C#EVS6-1.SubCipher1)  = n@Nonce .}

					:apply(csb12#6)

						-- Goal`6-1-2-2-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb13#6 = :ctf [creator(n@Nonce)  .]

						:apply(csb13#6)

							-- Goal`6-1-2-2-1-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
							:def csb14#6 = :ctf [key(C#EVS6-1.SubCipher1)  .]

							:apply(csb14#6)

								-- Goal`6-1-2-2-1-1-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`6-1-2-2-1-1-2  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb15#6 = :ctf [n@Nonce \in cnonce(N0#EVS6-1.Network)  .]

						:apply(csb15#6)

							-- Goal`6-1-2-2-1-1-2-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
							:def csb16#6 = :ctf [P0#Prin  .]

							:apply(csb16#6)

								-- Goal`6-1-2-2-1-1-2-1-1 Success by reduction
								:apply (rd)

							-- Goal`6-1-2-2-1-1-2-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

					-- Goal`6-1-2-2-1-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

				-- Goal`6-1-2-2-2 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

		-- Goal`6-1-3  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
		:def csb17#6 = :ctf {eq nonce1(C#EVS6-1.SubCipher2)  = N#Nonce .}

		:apply(csb17#6)

			-- Goal`6-1-3-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb18#6 = :ctf {eq nonce2(C#EVS6-1.SubCipher2)  = N#Nonce .}

			:apply(csb18#6)

				-- Goal`6-1-3-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb19#6 = :ctf [creator(n@Nonce)  .]

				:apply(csb19#6)

					-- Goal`6-1-3-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb20#6 = :ctf [key(C#EVS6-1.SubCipher2)  .]

					:apply(csb20#6)

						-- Goal`6-1-3-1-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb21#6 = :ctf {eq N#Nonce  = n@Nonce .}

						:apply(csb21#6)

							-- Goal`6-1-3-1-1-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`6-1-3-1-1-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

				-- Goal`6-1-3-1-2  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb22#6 = :ctf [creator(n@Nonce)  .]

				:apply(csb22#6)

					-- Goal`6-1-3-1-2-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb23#6 = :ctf [key(C#EVS6-1.SubCipher2)  .]

					:apply(csb23#6)

						-- Goal`6-1-3-1-2-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb24#6 = :ctf {eq N#Nonce  = n@Nonce .}

						:apply(csb24#6)

							-- Goal`6-1-3-1-2-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`6-1-3-1-2-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

			-- Goal`6-1-3-2  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb25#6 = :ctf {eq nonce2(C#EVS6-1.SubCipher2)  = N#Nonce .}

			:apply(csb25#6)

				-- Goal`6-1-3-2-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb26#6 = :ctf [creator(n@Nonce)  .]

				:apply(csb26#6)

					-- Goal`6-1-3-2-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb27#6 = :ctf [key(C#EVS6-1.SubCipher2)  .]

					:apply(csb27#6)

						-- Goal`6-1-3-2-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb28#6 = :ctf {eq N#Nonce  = n@Nonce .}

						:apply(csb28#6)

							-- Goal`6-1-3-2-1-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`6-1-3-2-1-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

				-- Goal`6-1-3-2-2  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb29#6 = :ctf [N#Nonce \in cnonce(N0#EVS6-1.Network)  .]

				:apply(csb29#6)

					-- Goal`6-1-3-2-2-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb30#6 = :ctf {eq N#Nonce  = n@Nonce .}

					:apply(csb30#6)

						-- Goal`6-1-3-2-2-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb31#6 = :ctf {eq nonce1(C#EVS6-1.SubCipher2)  = n@Nonce .}

						:apply(csb31#6)

							-- Goal`6-1-3-2-2-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
							:def csb32#6 = :ctf {eq nonce2(C#EVS6-1.SubCipher2)  = n@Nonce .}

							:apply(csb32#6)

								-- Goal`6-1-3-2-2-1-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
								:def csb33#6 = :ctf [creator(n@Nonce)  .]

								:apply(csb33#6)

									-- Goal`6-1-3-2-2-1-1-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
									:def csb34#6 = :ctf [key(C#EVS6-1.SubCipher2)  .]

									:apply(csb34#6)

										-- Goal`6-1-3-2-2-1-1-1-1-1-1 Success by reduction
										:apply (rd)

								-- Goal`6-1-3-2-2-1-1-1-2  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
								:def csb35#6 = :ctf [creator(n@Nonce)  .]

								:apply(csb35#6)

									-- Goal`6-1-3-2-2-1-1-1-2-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
									:def csb36#6 = :ctf [key(C#EVS6-1.SubCipher2)  .]

									:apply(csb36#6)

										-- Goal`6-1-3-2-2-1-1-1-2-1-1 Success by reduction
										:apply (rd)

							-- Goal`6-1-3-2-2-1-1-2  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
							:def csb37#6 = :ctf {eq nonce2(C#EVS6-1.SubCipher2)  = n@Nonce .}

							:apply(csb37#6)

								-- Goal`6-1-3-2-2-1-1-2-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
								:def csb38#6 = :ctf [creator(n@Nonce)  .]

								:apply(csb38#6)

									-- Goal`6-1-3-2-2-1-1-2-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
									:def csb39#6 = :ctf [key(C#EVS6-1.SubCipher2)  .]

									:apply(csb39#6)

										-- Goal`6-1-3-2-2-1-1-2-1-1-1 Success by reduction
										:apply (rd)

								-- Goal`6-1-3-2-2-1-1-2-2  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
								:def csb40#6 = :ctf [n@Nonce \in cnonce(N0#EVS6-1.Network)  .]

								:apply(csb40#6)

									-- Goal`6-1-3-2-2-1-1-2-2-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
									:def csb41#6 = :ctf [P0#Prin  .]

									:apply(csb41#6)

										-- Goal`6-1-3-2-2-1-1-2-2-1-1 Success by reduction
										:apply (rd)

									-- Goal`6-1-3-2-2-1-1-2-2-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

						-- Goal`6-1-3-2-2-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

					-- Goal`6-1-3-2-2-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

		-- Goal`6-1-4  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
		:def csb42#6 = :ctf {eq nonce(C#EVS6-1.SubCipher3)  = N#Nonce .}

		:apply(csb42#6)

			-- Goal`6-1-4-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb43#6 = :ctf [creator(n@Nonce)  .]

			:apply(csb43#6)

				-- Goal`6-1-4-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb44#6 = :ctf [key(C#EVS6-1.SubCipher3)  .]

				:apply(csb44#6)

					-- Goal`6-1-4-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb45#6 = :ctf {eq N#Nonce  = n@Nonce .}

					:apply(csb45#6)

						-- Goal`6-1-4-1-1-1-1 Success by reduction
						:apply (rd)

						-- Goal`6-1-4-1-1-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

			-- Goal`6-1-4-2  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
			:def csb46#6 = :ctf [N#Nonce \in cnonce(N0#EVS6-1.Network)  .]

			:apply(csb46#6)

				-- Goal`6-1-4-2-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
				:def csb47#6 = :ctf {eq N#Nonce  = n@Nonce .}

				:apply(csb47#6)

					-- Goal`6-1-4-2-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
					:def csb48#6 = :ctf {eq nonce(C#EVS6-1.SubCipher3)  = n@Nonce .}

					:apply(csb48#6)

						-- Goal`6-1-4-2-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb49#6 = :ctf [creator(n@Nonce)  .]

						:apply(csb49#6)

							-- Goal`6-1-4-2-1-1-1-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
							:def csb50#6 = :ctf [key(C#EVS6-1.SubCipher3)  .]

							:apply(csb50#6)

								-- Goal`6-1-4-2-1-1-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`6-1-4-2-1-1-2  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
						:def csb51#6 = :ctf [n@Nonce \in cnonce(N0#EVS6-1.Network)  .]

						:apply(csb51#6)

							-- Goal`6-1-4-2-1-1-2-1  -  inv160(fkm32(S#Sys, P#Prin, P0#Prin, N#Nonce), n@Nonce)  - Success
							:def csb52#6 = :ctf [P0#Prin  .]

							:apply(csb52#6)

								-- Goal`6-1-4-2-1-1-2-1-1 Success by reduction
								:apply (rd)

							-- Goal`6-1-4-2-1-1-2-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

					-- Goal`6-1-4-2-1-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

				-- Goal`6-1-4-2-2 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)


:sel(4)
	:apply(tc)

	-- Goal`4-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
	:def csb1#4 = :cvs [nw(S#Sys)  .]

	:apply(csb1#4)

		-- Goal`4-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
		:def csb2#4 = :ctf [creator(N#Nonce)  .]

		:apply(csb2#4)

			-- Goal`4-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
			:def csb3#4 = :ctf [creator(N0#Nonce)  .]

			:apply(csb3#4)

				-- Goal`4-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb4#4 = :ctf {eq N#Nonce  = n@Nonce .}

				:apply(csb4#4)

					-- Goal`4-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb5#4 = :ctf [creator(n@Nonce)  .]

					:apply(csb5#4)

						-- Goal`4-1-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb6#4 = :ctf {eq N0#Nonce  = n@Nonce .}

						:apply(csb6#4)

							-- Goal`4-1-1-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb7#4 = :ctf [P0#Prin  .]

							:apply(csb7#4)

								-- Goal`4-1-1-1-1-1-1-1-1 Success by reduction
								:apply (rd)

							-- Goal`4-1-1-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb8#4 = :ctf [P0#Prin  .]

							:apply(csb8#4)

								-- Goal`4-1-1-1-1-1-1-2-1 Success by reduction
								:apply (rd)

					-- Goal`4-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb9#4 = :ctf {eq N0#Nonce  = n@Nonce .}

					:apply(csb9#4)

						-- Goal`4-1-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb10#4 = :ctf [creator(n@Nonce)  .]

						:apply(csb10#4)

							-- Goal`4-1-1-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb11#4 = :ctf [P0#Prin  .]

							:apply(csb11#4)

								-- Goal`4-1-1-1-1-2-1-1-1 Success by reduction
								:apply (rd)

						-- Goal`4-1-1-1-1-2-2 Success by reduction
						:apply (rd)

		-- Goal`4-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
		:def csb12#4 = :ctf {eq nonce(C#EVS4-1.SubCipher1)  = N#Nonce .}

		:apply(csb12#4)

			-- Goal`4-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
			:def csb13#4 = :ctf {eq N#Nonce  = N0#Nonce .}

			:apply(csb13#4)

				-- Goal`4-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb14#4 = :ctf [creator(n@Nonce)  .]

				:apply(csb14#4)

					-- Goal`4-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb15#4 = :ctf [key(C#EVS4-1.SubCipher1)  .]

					:apply(csb15#4)

						-- Goal`4-1-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb16#4 = :ctf {eq N0#Nonce  = n@Nonce .}

						:apply(csb16#4)

							-- Goal`4-1-2-1-1-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`4-1-2-1-1-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

				-- Goal`4-1-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb17#4 = :ctf [N0#Nonce \in cnonce(N0#EVS4-1.Network)  .]

				:apply(csb17#4)

					-- Goal`4-1-2-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb18#4 = :ctf [creator(n@Nonce)  .]

					:apply(csb18#4)

						-- Goal`4-1-2-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb19#4 = :ctf [key(C#EVS4-1.SubCipher1)  .]

						:apply(csb19#4)

							-- Goal`4-1-2-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb20#4 = :ctf {eq N#Nonce  = n@Nonce .}

							:apply(csb20#4)

								-- Goal`4-1-2-1-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb21#4 = :ctf {eq N0#Nonce  = n@Nonce .}

								:apply(csb21#4)

									-- Goal`4-1-2-1-2-1-1-1-1-1 Success by reduction
									:apply (rd)

									-- Goal`4-1-2-1-2-1-1-1-1-2 Success by reduction
									:apply (rd)

								-- Goal`4-1-2-1-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb22#4 = :ctf {eq N0#Nonce  = n@Nonce .}

								:apply(csb22#4)

									-- Goal`4-1-2-1-2-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb23#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

									:apply(csb23#4)

										-- Goal`4-1-2-1-2-1-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb24#4 = :ctf [P0#Prin  .]

										:apply(csb24#4)

											-- Goal`4-1-2-1-2-1-1-1-2-1-1-1 Success by reduction
											:apply (rd)

										-- Goal`4-1-2-1-2-1-1-1-2-1-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

									-- Goal`4-1-2-1-2-1-1-1-2-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

					-- Goal`4-1-2-1-2-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

			-- Goal`4-1-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
			:def csb25#4 = :ctf {eq nonce(C#EVS4-1.SubCipher1)  = N0#Nonce .}

			:apply(csb25#4)

				-- Goal`4-1-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb26#4 = :ctf {eq N#Nonce  = N0#Nonce .}

				:apply(csb26#4)

					-- Goal`4-1-2-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb27#4 = :ctf [creator(n@Nonce)  .]

					:apply(csb27#4)

						-- Goal`4-1-2-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb28#4 = :ctf [key(C#EVS4-1.SubCipher1)  .]

						:apply(csb28#4)

							-- Goal`4-1-2-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb29#4 = :ctf {eq N0#Nonce  = n@Nonce .}

							:apply(csb29#4)

								-- Goal`4-1-2-2-1-1-1-1-1 Success by reduction
								:apply (rd)

								-- Goal`4-1-2-2-1-1-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

					-- Goal`4-1-2-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb30#4 = :ctf [N#Nonce \in cnonce(N0#EVS4-1.Network)  .]

					:apply(csb30#4)

						-- Goal`4-1-2-2-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb31#4 = :ctf [creator(n@Nonce)  .]

						:apply(csb31#4)

							-- Goal`4-1-2-2-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb32#4 = :ctf [key(C#EVS4-1.SubCipher1)  .]

							:apply(csb32#4)

								-- Goal`4-1-2-2-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb33#4 = :ctf {eq N#Nonce  = n@Nonce .}

								:apply(csb33#4)

									-- Goal`4-1-2-2-1-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb34#4 = :ctf {eq N0#Nonce  = n@Nonce .}

									:apply(csb34#4)

										-- Goal`4-1-2-2-1-2-1-1-1-1-1 Success by reduction
										:apply (rd)

										-- Goal`4-1-2-2-1-2-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb35#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

										:apply(csb35#4)

											-- Goal`4-1-2-2-1-2-1-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb36#4 = :ctf [P0#Prin  .]

											:apply(csb36#4)

												-- Goal`4-1-2-2-1-2-1-1-1-1-2-1-1 Success by reduction
												:apply (rd)

											-- Goal`4-1-2-2-1-2-1-1-1-1-2-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

									-- Goal`4-1-2-2-1-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb37#4 = :ctf {eq N0#Nonce  = n@Nonce .}

									:apply(csb37#4)

										-- Goal`4-1-2-2-1-2-1-1-1-2-1 Success by reduction
										:apply (rd)

										-- Goal`4-1-2-2-1-2-1-1-1-2-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

						-- Goal`4-1-2-2-1-2-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

				-- Goal`4-1-2-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb38#4 = :ctf [N#Nonce \in cnonce(N0#EVS4-1.Network)  .]

				:apply(csb38#4)

					-- Goal`4-1-2-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb39#4 = :ctf [N0#Nonce \in cnonce(N0#EVS4-1.Network)  .]

					:apply(csb39#4)

						-- Goal`4-1-2-2-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb40#4 = :ctf {eq N#Nonce  = n@Nonce .}

						:apply(csb40#4)

							-- Goal`4-1-2-2-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb41#4 = :ctf {eq nonce(C#EVS4-1.SubCipher1)  = n@Nonce .}

							:apply(csb41#4)

								-- Goal`4-1-2-2-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb42#4 = :ctf {eq N0#Nonce  = n@Nonce .}

								:apply(csb42#4)

									-- Goal`4-1-2-2-2-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb43#4 = :ctf [creator(n@Nonce)  .]

									:apply(csb43#4)

										-- Goal`4-1-2-2-2-1-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb44#4 = :ctf [key(C#EVS4-1.SubCipher1)  .]

										:apply(csb44#4)

											-- Goal`4-1-2-2-2-1-1-1-1-1-1-1 Success by reduction
											:apply (rd)

									-- Goal`4-1-2-2-2-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb45#4 = :ctf [creator(n@Nonce)  .]

									:apply(csb45#4)

										-- Goal`4-1-2-2-2-1-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb46#4 = :ctf [key(C#EVS4-1.SubCipher1)  .]

										:apply(csb46#4)

											-- Goal`4-1-2-2-2-1-1-1-1-2-1-1 Success by reduction
											:apply (rd)

								-- Goal`4-1-2-2-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb47#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

								:apply(csb47#4)

									-- Goal`4-1-2-2-2-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb48#4 = :ctf {eq N0#Nonce  = n@Nonce .}

									:apply(csb48#4)

										-- Goal`4-1-2-2-2-1-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb49#4 = :ctf [P0#Prin  .]

										:apply(csb49#4)

											-- Goal`4-1-2-2-2-1-1-1-2-1-1-1 Success by reduction
											:apply (rd)

										-- Goal`4-1-2-2-2-1-1-1-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb50#4 = :ctf [P0#Prin  .]

										:apply(csb50#4)

											-- Goal`4-1-2-2-2-1-1-1-2-1-2-1 Success by reduction
											:apply (rd)

									-- Goal`4-1-2-2-2-1-1-1-2-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

							-- Goal`4-1-2-2-2-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb51#4 = :ctf {eq N0#Nonce  = n@Nonce .}

							:apply(csb51#4)

								-- Goal`4-1-2-2-2-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb52#4 = :ctf {eq nonce(C#EVS4-1.SubCipher1)  = n@Nonce .}

								:apply(csb52#4)

									-- Goal`4-1-2-2-2-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb53#4 = :ctf [creator(n@Nonce)  .]

									:apply(csb53#4)

										-- Goal`4-1-2-2-2-1-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb54#4 = :ctf [key(C#EVS4-1.SubCipher1)  .]

										:apply(csb54#4)

											-- Goal`4-1-2-2-2-1-1-2-1-1-1-1 Success by reduction
											:apply (rd)

									-- Goal`4-1-2-2-2-1-1-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb55#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

									:apply(csb55#4)

										-- Goal`4-1-2-2-2-1-1-2-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb56#4 = :ctf [P0#Prin  .]

										:apply(csb56#4)

											-- Goal`4-1-2-2-2-1-1-2-1-2-1-1 Success by reduction
											:apply (rd)

										-- Goal`4-1-2-2-2-1-1-2-1-2-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

								-- Goal`4-1-2-2-2-1-1-2-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

						-- Goal`4-1-2-2-2-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

					-- Goal`4-1-2-2-2-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

		-- Goal`4-1-3  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
		:def csb57#4 = :ctf {eq nonce1(C#EVS4-1.SubCipher2)  = N#Nonce .}

		:apply(csb57#4)

			-- Goal`4-1-3-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
			:def csb58#4 = :ctf {eq N#Nonce  = N0#Nonce .}

			:apply(csb58#4)

				-- Goal`4-1-3-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb59#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N0#Nonce .}

				:apply(csb59#4)

					-- Goal`4-1-3-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb60#4 = :ctf [creator(n@Nonce)  .]

					:apply(csb60#4)

						-- Goal`4-1-3-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb61#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

						:apply(csb61#4)

							-- Goal`4-1-3-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb62#4 = :ctf {eq N0#Nonce  = n@Nonce .}

							:apply(csb62#4)

								-- Goal`4-1-3-1-1-1-1-1-1 Success by reduction
								:apply (rd)

								-- Goal`4-1-3-1-1-1-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

					-- Goal`4-1-3-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb63#4 = :ctf [creator(n@Nonce)  .]

					:apply(csb63#4)

						-- Goal`4-1-3-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb64#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

						:apply(csb64#4)

							-- Goal`4-1-3-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb65#4 = :ctf {eq N0#Nonce  = n@Nonce .}

							:apply(csb65#4)

								-- Goal`4-1-3-1-1-2-1-1-1 Success by reduction
								:apply (rd)

								-- Goal`4-1-3-1-1-2-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

				-- Goal`4-1-3-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb66#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N#Nonce .}

				:apply(csb66#4)

					-- Goal`4-1-3-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb67#4 = :ctf [N0#Nonce \in cnonce(N0#EVS4-1.Network)  .]

					:apply(csb67#4)

						-- Goal`4-1-3-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb68#4 = :ctf [creator(n@Nonce)  .]

						:apply(csb68#4)

							-- Goal`4-1-3-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb69#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

							:apply(csb69#4)

								-- Goal`4-1-3-1-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb70#4 = :ctf {eq N#Nonce  = n@Nonce .}

								:apply(csb70#4)

									-- Goal`4-1-3-1-2-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb71#4 = :ctf {eq N0#Nonce  = n@Nonce .}

									:apply(csb71#4)

										-- Goal`4-1-3-1-2-1-1-1-1-1-1 Success by reduction
										:apply (rd)

										-- Goal`4-1-3-1-2-1-1-1-1-1-2 Success by reduction
										:apply (rd)

									-- Goal`4-1-3-1-2-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb72#4 = :ctf {eq N0#Nonce  = n@Nonce .}

									:apply(csb72#4)

										-- Goal`4-1-3-1-2-1-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb73#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

										:apply(csb73#4)

											-- Goal`4-1-3-1-2-1-1-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb74#4 = :ctf [P0#Prin  .]

											:apply(csb74#4)

												-- Goal`4-1-3-1-2-1-1-1-1-2-1-1-1 Success by reduction
												:apply (rd)

											-- Goal`4-1-3-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

										-- Goal`4-1-3-1-2-1-1-1-1-2-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

						-- Goal`4-1-3-1-2-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

					-- Goal`4-1-3-1-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb75#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N0#Nonce .}

					:apply(csb75#4)

						-- Goal`4-1-3-1-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb76#4 = :ctf [creator(n@Nonce)  .]

						:apply(csb76#4)

							-- Goal`4-1-3-1-2-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb77#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

							:apply(csb77#4)

								-- Goal`4-1-3-1-2-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb78#4 = :ctf {eq N#Nonce  = n@Nonce .}

								:apply(csb78#4)

									-- Goal`4-1-3-1-2-2-1-1-1-1 Success by reduction
									:apply (rd)

									-- Goal`4-1-3-1-2-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb79#4 = :ctf {eq N0#Nonce  = n@Nonce .}

									:apply(csb79#4)

										-- Goal`4-1-3-1-2-2-1-1-1-2-1 Success by reduction
										:apply (rd)

										-- Goal`4-1-3-1-2-2-1-1-1-2-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

						-- Goal`4-1-3-1-2-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb80#4 = :ctf [N0#Nonce \in cnonce(N0#EVS4-1.Network)  .]

						:apply(csb80#4)

							-- Goal`4-1-3-1-2-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb81#4 = :ctf [creator(n@Nonce)  .]

							:apply(csb81#4)

								-- Goal`4-1-3-1-2-2-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb82#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

								:apply(csb82#4)

									-- Goal`4-1-3-1-2-2-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb83#4 = :ctf {eq N#Nonce  = n@Nonce .}

									:apply(csb83#4)

										-- Goal`4-1-3-1-2-2-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb84#4 = :ctf {eq N0#Nonce  = n@Nonce .}

										:apply(csb84#4)

											-- Goal`4-1-3-1-2-2-2-1-1-1-1-1 Success by reduction
											:apply (rd)

											-- Goal`4-1-3-1-2-2-2-1-1-1-1-2 Success by reduction
											:apply (rd)

										-- Goal`4-1-3-1-2-2-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb85#4 = :ctf {eq N0#Nonce  = n@Nonce .}

										:apply(csb85#4)

											-- Goal`4-1-3-1-2-2-2-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb86#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = n@Nonce .}

											:apply(csb86#4)

												-- Goal`4-1-3-1-2-2-2-1-1-1-2-1-1 Success by reduction
												:apply (rd)

												-- Goal`4-1-3-1-2-2-2-1-1-1-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb87#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

												:apply(csb87#4)

													-- Goal`4-1-3-1-2-2-2-1-1-1-2-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb88#4 = :ctf [P0#Prin  .]

													:apply(csb88#4)

														-- Goal`4-1-3-1-2-2-2-1-1-1-2-1-2-1-1 Success by reduction
														:apply (rd)

													-- Goal`4-1-3-1-2-2-2-1-1-1-2-1-2-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

											-- Goal`4-1-3-1-2-2-2-1-1-1-2-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

							-- Goal`4-1-3-1-2-2-2-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

			-- Goal`4-1-3-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
			:def csb89#4 = :ctf {eq nonce1(C#EVS4-1.SubCipher2)  = N0#Nonce .}

			:apply(csb89#4)

				-- Goal`4-1-3-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb90#4 = :ctf {eq N#Nonce  = N0#Nonce .}

				:apply(csb90#4)

					-- Goal`4-1-3-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb91#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N0#Nonce .}

					:apply(csb91#4)

						-- Goal`4-1-3-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb92#4 = :ctf [creator(n@Nonce)  .]

						:apply(csb92#4)

							-- Goal`4-1-3-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb93#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

							:apply(csb93#4)

								-- Goal`4-1-3-2-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb94#4 = :ctf {eq N0#Nonce  = n@Nonce .}

								:apply(csb94#4)

									-- Goal`4-1-3-2-1-1-1-1-1-1 Success by reduction
									:apply (rd)

									-- Goal`4-1-3-2-1-1-1-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

						-- Goal`4-1-3-2-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb95#4 = :ctf [creator(n@Nonce)  .]

						:apply(csb95#4)

							-- Goal`4-1-3-2-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb96#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

							:apply(csb96#4)

								-- Goal`4-1-3-2-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb97#4 = :ctf {eq N0#Nonce  = n@Nonce .}

								:apply(csb97#4)

									-- Goal`4-1-3-2-1-1-2-1-1-1 Success by reduction
									:apply (rd)

									-- Goal`4-1-3-2-1-1-2-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

					-- Goal`4-1-3-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb98#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N#Nonce .}

					:apply(csb98#4)

						-- Goal`4-1-3-2-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb99#4 = :ctf [creator(n@Nonce)  .]

						:apply(csb99#4)

							-- Goal`4-1-3-2-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb100#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

							:apply(csb100#4)

								-- Goal`4-1-3-2-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb101#4 = :ctf {eq N#Nonce  = n@Nonce .}

								:apply(csb101#4)

									-- Goal`4-1-3-2-1-2-1-1-1-1 Success by reduction
									:apply (rd)

									-- Goal`4-1-3-2-1-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb102#4 = :ctf {eq N0#Nonce  = n@Nonce .}

									:apply(csb102#4)

										-- Goal`4-1-3-2-1-2-1-1-1-2-1 Success by reduction
										:apply (rd)

										-- Goal`4-1-3-2-1-2-1-1-1-2-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

						-- Goal`4-1-3-2-1-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb103#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N0#Nonce .}

						:apply(csb103#4)

							-- Goal`4-1-3-2-1-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb104#4 = :ctf [N#Nonce \in cnonce(N0#EVS4-1.Network)  .]

							:apply(csb104#4)

								-- Goal`4-1-3-2-1-2-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb105#4 = :ctf [creator(n@Nonce)  .]

								:apply(csb105#4)

									-- Goal`4-1-3-2-1-2-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb106#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

									:apply(csb106#4)

										-- Goal`4-1-3-2-1-2-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb107#4 = :ctf {eq N#Nonce  = n@Nonce .}

										:apply(csb107#4)

											-- Goal`4-1-3-2-1-2-2-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb108#4 = :ctf {eq N0#Nonce  = n@Nonce .}

											:apply(csb108#4)

												-- Goal`4-1-3-2-1-2-2-1-1-1-1-1-1 Success by reduction
												:apply (rd)

												-- Goal`4-1-3-2-1-2-2-1-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb109#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

												:apply(csb109#4)

													-- Goal`4-1-3-2-1-2-2-1-1-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb110#4 = :ctf [P0#Prin  .]

													:apply(csb110#4)

														-- Goal`4-1-3-2-1-2-2-1-1-1-1-1-2-1-1 Success by reduction
														:apply (rd)

													-- Goal`4-1-3-2-1-2-2-1-1-1-1-1-2-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

											-- Goal`4-1-3-2-1-2-2-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb111#4 = :ctf {eq N0#Nonce  = n@Nonce .}

											:apply(csb111#4)

												-- Goal`4-1-3-2-1-2-2-1-1-1-1-2-1 Success by reduction
												:apply (rd)

												-- Goal`4-1-3-2-1-2-2-1-1-1-1-2-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

								-- Goal`4-1-3-2-1-2-2-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`4-1-3-2-1-2-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb112#4 = :ctf [N#Nonce \in cnonce(N0#EVS4-1.Network)  .]

							:apply(csb112#4)

								-- Goal`4-1-3-2-1-2-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb113#4 = :ctf [creator(n@Nonce)  .]

								:apply(csb113#4)

									-- Goal`4-1-3-2-1-2-2-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb114#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

									:apply(csb114#4)

										-- Goal`4-1-3-2-1-2-2-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb115#4 = :ctf {eq N#Nonce  = n@Nonce .}

										:apply(csb115#4)

											-- Goal`4-1-3-2-1-2-2-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb116#4 = :ctf {eq N0#Nonce  = n@Nonce .}

											:apply(csb116#4)

												-- Goal`4-1-3-2-1-2-2-2-1-1-1-1-1 Success by reduction
												:apply (rd)

												-- Goal`4-1-3-2-1-2-2-2-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb117#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = n@Nonce .}

												:apply(csb117#4)

													-- Goal`4-1-3-2-1-2-2-2-1-1-1-1-2-1 Success by reduction
													:apply (rd)

													-- Goal`4-1-3-2-1-2-2-2-1-1-1-1-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb118#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

													:apply(csb118#4)

														-- Goal`4-1-3-2-1-2-2-2-1-1-1-1-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
														:def csb119#4 = :ctf [P0#Prin  .]

														:apply(csb119#4)

															-- Goal`4-1-3-2-1-2-2-2-1-1-1-1-2-2-1-1 Success by reduction
															:apply (rd)

														-- Goal`4-1-3-2-1-2-2-2-1-1-1-1-2-2-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

											-- Goal`4-1-3-2-1-2-2-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb120#4 = :ctf {eq N0#Nonce  = n@Nonce .}

											:apply(csb120#4)

												-- Goal`4-1-3-2-1-2-2-2-1-1-1-2-1 Success by reduction
												:apply (rd)

												-- Goal`4-1-3-2-1-2-2-2-1-1-1-2-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

								-- Goal`4-1-3-2-1-2-2-2-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

				-- Goal`4-1-3-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb121#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N#Nonce .}

				:apply(csb121#4)

					-- Goal`4-1-3-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb122#4 = :ctf {eq N#Nonce  = N0#Nonce .}

					:apply(csb122#4)

						-- Goal`4-1-3-2-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb123#4 = :ctf [creator(n@Nonce)  .]

						:apply(csb123#4)

							-- Goal`4-1-3-2-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb124#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

							:apply(csb124#4)

								-- Goal`4-1-3-2-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb125#4 = :ctf {eq N0#Nonce  = n@Nonce .}

								:apply(csb125#4)

									-- Goal`4-1-3-2-2-1-1-1-1-1 Success by reduction
									:apply (rd)

									-- Goal`4-1-3-2-2-1-1-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

						-- Goal`4-1-3-2-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb126#4 = :ctf [N0#Nonce \in cnonce(N0#EVS4-1.Network)  .]

						:apply(csb126#4)

							-- Goal`4-1-3-2-2-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb127#4 = :ctf [creator(n@Nonce)  .]

							:apply(csb127#4)

								-- Goal`4-1-3-2-2-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb128#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

								:apply(csb128#4)

									-- Goal`4-1-3-2-2-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb129#4 = :ctf {eq N#Nonce  = n@Nonce .}

									:apply(csb129#4)

										-- Goal`4-1-3-2-2-1-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb130#4 = :ctf {eq N0#Nonce  = n@Nonce .}

										:apply(csb130#4)

											-- Goal`4-1-3-2-2-1-2-1-1-1-1-1 Success by reduction
											:apply (rd)

											-- Goal`4-1-3-2-2-1-2-1-1-1-1-2 Success by reduction
											:apply (rd)

										-- Goal`4-1-3-2-2-1-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb131#4 = :ctf {eq N0#Nonce  = n@Nonce .}

										:apply(csb131#4)

											-- Goal`4-1-3-2-2-1-2-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb132#4 = :ctf {eq nonce1(C#EVS4-1.SubCipher2)  = n@Nonce .}

											:apply(csb132#4)

												-- Goal`4-1-3-2-2-1-2-1-1-1-2-1-1 Success by reduction
												:apply (rd)

												-- Goal`4-1-3-2-2-1-2-1-1-1-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb133#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

												:apply(csb133#4)

													-- Goal`4-1-3-2-2-1-2-1-1-1-2-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb134#4 = :ctf [P0#Prin  .]

													:apply(csb134#4)

														-- Goal`4-1-3-2-2-1-2-1-1-1-2-1-2-1-1 Success by reduction
														:apply (rd)

													-- Goal`4-1-3-2-2-1-2-1-1-1-2-1-2-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

											-- Goal`4-1-3-2-2-1-2-1-1-1-2-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

							-- Goal`4-1-3-2-2-1-2-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

					-- Goal`4-1-3-2-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb135#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = N0#Nonce .}

					:apply(csb135#4)

						-- Goal`4-1-3-2-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb136#4 = :ctf {eq N#Nonce  = N0#Nonce .}

						:apply(csb136#4)

							-- Goal`4-1-3-2-2-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb137#4 = :ctf [creator(n@Nonce)  .]

							:apply(csb137#4)

								-- Goal`4-1-3-2-2-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb138#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

								:apply(csb138#4)

									-- Goal`4-1-3-2-2-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb139#4 = :ctf {eq N0#Nonce  = n@Nonce .}

									:apply(csb139#4)

										-- Goal`4-1-3-2-2-2-1-1-1-1-1 Success by reduction
										:apply (rd)

										-- Goal`4-1-3-2-2-2-1-1-1-1-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

							-- Goal`4-1-3-2-2-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb140#4 = :ctf [N#Nonce \in cnonce(N0#EVS4-1.Network)  .]

							:apply(csb140#4)

								-- Goal`4-1-3-2-2-2-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb141#4 = :ctf [creator(n@Nonce)  .]

								:apply(csb141#4)

									-- Goal`4-1-3-2-2-2-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb142#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

									:apply(csb142#4)

										-- Goal`4-1-3-2-2-2-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb143#4 = :ctf {eq N#Nonce  = n@Nonce .}

										:apply(csb143#4)

											-- Goal`4-1-3-2-2-2-1-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb144#4 = :ctf {eq N0#Nonce  = n@Nonce .}

											:apply(csb144#4)

												-- Goal`4-1-3-2-2-2-1-2-1-1-1-1-1 Success by reduction
												:apply (rd)

												-- Goal`4-1-3-2-2-2-1-2-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb145#4 = :ctf {eq nonce1(C#EVS4-1.SubCipher2)  = n@Nonce .}

												:apply(csb145#4)

													-- Goal`4-1-3-2-2-2-1-2-1-1-1-1-2-1 Success by reduction
													:apply (rd)

													-- Goal`4-1-3-2-2-2-1-2-1-1-1-1-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb146#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

													:apply(csb146#4)

														-- Goal`4-1-3-2-2-2-1-2-1-1-1-1-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
														:def csb147#4 = :ctf [P0#Prin  .]

														:apply(csb147#4)

															-- Goal`4-1-3-2-2-2-1-2-1-1-1-1-2-2-1-1 Success by reduction
															:apply (rd)

														-- Goal`4-1-3-2-2-2-1-2-1-1-1-1-2-2-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

											-- Goal`4-1-3-2-2-2-1-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb148#4 = :ctf {eq N0#Nonce  = n@Nonce .}

											:apply(csb148#4)

												-- Goal`4-1-3-2-2-2-1-2-1-1-1-2-1 Success by reduction
												:apply (rd)

												-- Goal`4-1-3-2-2-2-1-2-1-1-1-2-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

								-- Goal`4-1-3-2-2-2-1-2-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

						-- Goal`4-1-3-2-2-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb149#4 = :ctf [N#Nonce \in cnonce(N0#EVS4-1.Network)  .]

						:apply(csb149#4)

							-- Goal`4-1-3-2-2-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb150#4 = :ctf [N0#Nonce \in cnonce(N0#EVS4-1.Network)  .]

							:apply(csb150#4)

								-- Goal`4-1-3-2-2-2-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb151#4 = :ctf {eq N#Nonce  = n@Nonce .}

								:apply(csb151#4)

									-- Goal`4-1-3-2-2-2-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb152#4 = :ctf {eq nonce1(C#EVS4-1.SubCipher2)  = n@Nonce .}

									:apply(csb152#4)

										-- Goal`4-1-3-2-2-2-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb153#4 = :ctf {eq N0#Nonce  = n@Nonce .}

										:apply(csb153#4)

											-- Goal`4-1-3-2-2-2-2-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb154#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = n@Nonce .}

											:apply(csb154#4)

												-- Goal`4-1-3-2-2-2-2-1-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb155#4 = :ctf [creator(n@Nonce)  .]

												:apply(csb155#4)

													-- Goal`4-1-3-2-2-2-2-1-1-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb156#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

													:apply(csb156#4)

														-- Goal`4-1-3-2-2-2-2-1-1-1-1-1-1-1-1 Success by reduction
														:apply (rd)

												-- Goal`4-1-3-2-2-2-2-1-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb157#4 = :ctf [creator(n@Nonce)  .]

												:apply(csb157#4)

													-- Goal`4-1-3-2-2-2-2-1-1-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb158#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

													:apply(csb158#4)

														-- Goal`4-1-3-2-2-2-2-1-1-1-1-1-2-1-1 Success by reduction
														:apply (rd)

											-- Goal`4-1-3-2-2-2-2-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb159#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = n@Nonce .}

											:apply(csb159#4)

												-- Goal`4-1-3-2-2-2-2-1-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb160#4 = :ctf [creator(n@Nonce)  .]

												:apply(csb160#4)

													-- Goal`4-1-3-2-2-2-2-1-1-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb161#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

													:apply(csb161#4)

														-- Goal`4-1-3-2-2-2-2-1-1-1-1-2-1-1-1 Success by reduction
														:apply (rd)

												-- Goal`4-1-3-2-2-2-2-1-1-1-1-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb162#4 = :ctf [creator(n@Nonce)  .]

												:apply(csb162#4)

													-- Goal`4-1-3-2-2-2-2-1-1-1-1-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb163#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

													:apply(csb163#4)

														-- Goal`4-1-3-2-2-2-2-1-1-1-1-2-2-1-1 Success by reduction
														:apply (rd)

										-- Goal`4-1-3-2-2-2-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb164#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = n@Nonce .}

										:apply(csb164#4)

											-- Goal`4-1-3-2-2-2-2-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb165#4 = :ctf {eq N0#Nonce  = n@Nonce .}

											:apply(csb165#4)

												-- Goal`4-1-3-2-2-2-2-1-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb166#4 = :ctf [creator(n@Nonce)  .]

												:apply(csb166#4)

													-- Goal`4-1-3-2-2-2-2-1-1-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb167#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

													:apply(csb167#4)

														-- Goal`4-1-3-2-2-2-2-1-1-1-2-1-1-1-1 Success by reduction
														:apply (rd)

												-- Goal`4-1-3-2-2-2-2-1-1-1-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb168#4 = :ctf [creator(n@Nonce)  .]

												:apply(csb168#4)

													-- Goal`4-1-3-2-2-2-2-1-1-1-2-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb169#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

													:apply(csb169#4)

														-- Goal`4-1-3-2-2-2-2-1-1-1-2-1-2-1-1 Success by reduction
														:apply (rd)

											-- Goal`4-1-3-2-2-2-2-1-1-1-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb170#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

											:apply(csb170#4)

												-- Goal`4-1-3-2-2-2-2-1-1-1-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb171#4 = :ctf {eq N0#Nonce  = n@Nonce .}

												:apply(csb171#4)

													-- Goal`4-1-3-2-2-2-2-1-1-1-2-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb172#4 = :ctf [P0#Prin  .]

													:apply(csb172#4)

														-- Goal`4-1-3-2-2-2-2-1-1-1-2-2-1-1-1 Success by reduction
														:apply (rd)

													-- Goal`4-1-3-2-2-2-2-1-1-1-2-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb173#4 = :ctf [P0#Prin  .]

													:apply(csb173#4)

														-- Goal`4-1-3-2-2-2-2-1-1-1-2-2-1-2-1 Success by reduction
														:apply (rd)

												-- Goal`4-1-3-2-2-2-2-1-1-1-2-2-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

									-- Goal`4-1-3-2-2-2-2-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb174#4 = :ctf {eq N0#Nonce  = n@Nonce .}

									:apply(csb174#4)

										-- Goal`4-1-3-2-2-2-2-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb175#4 = :ctf {eq nonce1(C#EVS4-1.SubCipher2)  = n@Nonce .}

										:apply(csb175#4)

											-- Goal`4-1-3-2-2-2-2-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb176#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = n@Nonce .}

											:apply(csb176#4)

												-- Goal`4-1-3-2-2-2-2-1-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb177#4 = :ctf [creator(n@Nonce)  .]

												:apply(csb177#4)

													-- Goal`4-1-3-2-2-2-2-1-1-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb178#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

													:apply(csb178#4)

														-- Goal`4-1-3-2-2-2-2-1-1-2-1-1-1-1-1 Success by reduction
														:apply (rd)

												-- Goal`4-1-3-2-2-2-2-1-1-2-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb179#4 = :ctf [creator(n@Nonce)  .]

												:apply(csb179#4)

													-- Goal`4-1-3-2-2-2-2-1-1-2-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb180#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

													:apply(csb180#4)

														-- Goal`4-1-3-2-2-2-2-1-1-2-1-1-2-1-1 Success by reduction
														:apply (rd)

											-- Goal`4-1-3-2-2-2-2-1-1-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb181#4 = :ctf {eq nonce2(C#EVS4-1.SubCipher2)  = n@Nonce .}

											:apply(csb181#4)

												-- Goal`4-1-3-2-2-2-2-1-1-2-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb182#4 = :ctf [creator(n@Nonce)  .]

												:apply(csb182#4)

													-- Goal`4-1-3-2-2-2-2-1-1-2-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb183#4 = :ctf [key(C#EVS4-1.SubCipher2)  .]

													:apply(csb183#4)

														-- Goal`4-1-3-2-2-2-2-1-1-2-1-2-1-1-1 Success by reduction
														:apply (rd)

												-- Goal`4-1-3-2-2-2-2-1-1-2-1-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
												:def csb184#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

												:apply(csb184#4)

													-- Goal`4-1-3-2-2-2-2-1-1-2-1-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
													:def csb185#4 = :ctf [P0#Prin  .]

													:apply(csb185#4)

														-- Goal`4-1-3-2-2-2-2-1-1-2-1-2-2-1-1 Success by reduction
														:apply (rd)

													-- Goal`4-1-3-2-2-2-2-1-1-2-1-2-2-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

										-- Goal`4-1-3-2-2-2-2-1-1-2-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

								-- Goal`4-1-3-2-2-2-2-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`4-1-3-2-2-2-2-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

		-- Goal`4-1-4  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
		:def csb186#4 = :ctf {eq nonce(C#EVS4-1.SubCipher3)  = N#Nonce .}

		:apply(csb186#4)

			-- Goal`4-1-4-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
			:def csb187#4 = :ctf {eq N#Nonce  = N0#Nonce .}

			:apply(csb187#4)

				-- Goal`4-1-4-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb188#4 = :ctf [creator(n@Nonce)  .]

				:apply(csb188#4)

					-- Goal`4-1-4-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb189#4 = :ctf [key(C#EVS4-1.SubCipher3)  .]

					:apply(csb189#4)

						-- Goal`4-1-4-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb190#4 = :ctf {eq N0#Nonce  = n@Nonce .}

						:apply(csb190#4)

							-- Goal`4-1-4-1-1-1-1-1 Success by reduction
							:apply (rd)

							-- Goal`4-1-4-1-1-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

				-- Goal`4-1-4-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb191#4 = :ctf [N0#Nonce \in cnonce(N0#EVS4-1.Network)  .]

				:apply(csb191#4)

					-- Goal`4-1-4-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb192#4 = :ctf [creator(n@Nonce)  .]

					:apply(csb192#4)

						-- Goal`4-1-4-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb193#4 = :ctf [key(C#EVS4-1.SubCipher3)  .]

						:apply(csb193#4)

							-- Goal`4-1-4-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb194#4 = :ctf {eq N#Nonce  = n@Nonce .}

							:apply(csb194#4)

								-- Goal`4-1-4-1-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb195#4 = :ctf {eq N0#Nonce  = n@Nonce .}

								:apply(csb195#4)

									-- Goal`4-1-4-1-2-1-1-1-1-1 Success by reduction
									:apply (rd)

									-- Goal`4-1-4-1-2-1-1-1-1-2 Success by reduction
									:apply (rd)

								-- Goal`4-1-4-1-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb196#4 = :ctf {eq N0#Nonce  = n@Nonce .}

								:apply(csb196#4)

									-- Goal`4-1-4-1-2-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb197#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

									:apply(csb197#4)

										-- Goal`4-1-4-1-2-1-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb198#4 = :ctf [P0#Prin  .]

										:apply(csb198#4)

											-- Goal`4-1-4-1-2-1-1-1-2-1-1-1 Success by reduction
											:apply (rd)

										-- Goal`4-1-4-1-2-1-1-1-2-1-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

									-- Goal`4-1-4-1-2-1-1-1-2-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

					-- Goal`4-1-4-1-2-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

			-- Goal`4-1-4-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
			:def csb199#4 = :ctf {eq nonce(C#EVS4-1.SubCipher3)  = N0#Nonce .}

			:apply(csb199#4)

				-- Goal`4-1-4-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb200#4 = :ctf {eq N#Nonce  = N0#Nonce .}

				:apply(csb200#4)

					-- Goal`4-1-4-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb201#4 = :ctf [creator(n@Nonce)  .]

					:apply(csb201#4)

						-- Goal`4-1-4-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb202#4 = :ctf [key(C#EVS4-1.SubCipher3)  .]

						:apply(csb202#4)

							-- Goal`4-1-4-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb203#4 = :ctf {eq N0#Nonce  = n@Nonce .}

							:apply(csb203#4)

								-- Goal`4-1-4-2-1-1-1-1-1 Success by reduction
								:apply (rd)

								-- Goal`4-1-4-2-1-1-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

					-- Goal`4-1-4-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb204#4 = :ctf [N#Nonce \in cnonce(N0#EVS4-1.Network)  .]

					:apply(csb204#4)

						-- Goal`4-1-4-2-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb205#4 = :ctf [creator(n@Nonce)  .]

						:apply(csb205#4)

							-- Goal`4-1-4-2-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb206#4 = :ctf [key(C#EVS4-1.SubCipher3)  .]

							:apply(csb206#4)

								-- Goal`4-1-4-2-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb207#4 = :ctf {eq N#Nonce  = n@Nonce .}

								:apply(csb207#4)

									-- Goal`4-1-4-2-1-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb208#4 = :ctf {eq N0#Nonce  = n@Nonce .}

									:apply(csb208#4)

										-- Goal`4-1-4-2-1-2-1-1-1-1-1 Success by reduction
										:apply (rd)

										-- Goal`4-1-4-2-1-2-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb209#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

										:apply(csb209#4)

											-- Goal`4-1-4-2-1-2-1-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
											:def csb210#4 = :ctf [P0#Prin  .]

											:apply(csb210#4)

												-- Goal`4-1-4-2-1-2-1-1-1-1-2-1-1 Success by reduction
												:apply (rd)

											-- Goal`4-1-4-2-1-2-1-1-1-1-2-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

									-- Goal`4-1-4-2-1-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb211#4 = :ctf {eq N0#Nonce  = n@Nonce .}

									:apply(csb211#4)

										-- Goal`4-1-4-2-1-2-1-1-1-2-1 Success by reduction
										:apply (rd)

										-- Goal`4-1-4-2-1-2-1-1-1-2-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

						-- Goal`4-1-4-2-1-2-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

				-- Goal`4-1-4-2-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
				:def csb212#4 = :ctf [N#Nonce \in cnonce(N0#EVS4-1.Network)  .]

				:apply(csb212#4)

					-- Goal`4-1-4-2-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
					:def csb213#4 = :ctf [N0#Nonce \in cnonce(N0#EVS4-1.Network)  .]

					:apply(csb213#4)

						-- Goal`4-1-4-2-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
						:def csb214#4 = :ctf {eq N#Nonce  = n@Nonce .}

						:apply(csb214#4)

							-- Goal`4-1-4-2-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb215#4 = :ctf {eq nonce(C#EVS4-1.SubCipher3)  = n@Nonce .}

							:apply(csb215#4)

								-- Goal`4-1-4-2-2-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb216#4 = :ctf {eq N0#Nonce  = n@Nonce .}

								:apply(csb216#4)

									-- Goal`4-1-4-2-2-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb217#4 = :ctf [creator(n@Nonce)  .]

									:apply(csb217#4)

										-- Goal`4-1-4-2-2-1-1-1-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb218#4 = :ctf [key(C#EVS4-1.SubCipher3)  .]

										:apply(csb218#4)

											-- Goal`4-1-4-2-2-1-1-1-1-1-1-1 Success by reduction
											:apply (rd)

									-- Goal`4-1-4-2-2-1-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb219#4 = :ctf [creator(n@Nonce)  .]

									:apply(csb219#4)

										-- Goal`4-1-4-2-2-1-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb220#4 = :ctf [key(C#EVS4-1.SubCipher3)  .]

										:apply(csb220#4)

											-- Goal`4-1-4-2-2-1-1-1-1-2-1-1 Success by reduction
											:apply (rd)

								-- Goal`4-1-4-2-2-1-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb221#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

								:apply(csb221#4)

									-- Goal`4-1-4-2-2-1-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb222#4 = :ctf {eq N0#Nonce  = n@Nonce .}

									:apply(csb222#4)

										-- Goal`4-1-4-2-2-1-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb223#4 = :ctf [P0#Prin  .]

										:apply(csb223#4)

											-- Goal`4-1-4-2-2-1-1-1-2-1-1-1 Success by reduction
											:apply (rd)

										-- Goal`4-1-4-2-2-1-1-1-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb224#4 = :ctf [P0#Prin  .]

										:apply(csb224#4)

											-- Goal`4-1-4-2-2-1-1-1-2-1-2-1 Success by reduction
											:apply (rd)

									-- Goal`4-1-4-2-2-1-1-1-2-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

							-- Goal`4-1-4-2-2-1-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
							:def csb225#4 = :ctf {eq N0#Nonce  = n@Nonce .}

							:apply(csb225#4)

								-- Goal`4-1-4-2-2-1-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
								:def csb226#4 = :ctf {eq nonce(C#EVS4-1.SubCipher3)  = n@Nonce .}

								:apply(csb226#4)

									-- Goal`4-1-4-2-2-1-1-2-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb227#4 = :ctf [creator(n@Nonce)  .]

									:apply(csb227#4)

										-- Goal`4-1-4-2-2-1-1-2-1-1-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb228#4 = :ctf [key(C#EVS4-1.SubCipher3)  .]

										:apply(csb228#4)

											-- Goal`4-1-4-2-2-1-1-2-1-1-1-1 Success by reduction
											:apply (rd)

									-- Goal`4-1-4-2-2-1-1-2-1-2  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
									:def csb229#4 = :ctf [n@Nonce \in cnonce(N0#EVS4-1.Network)  .]

									:apply(csb229#4)

										-- Goal`4-1-4-2-2-1-1-2-1-2-1  -  inv160(fkm22(S#Sys, P#Prin, P0#Prin, N#Nonce, N0#Nonce), n@Nonce)  - Success
										:def csb230#4 = :ctf [P0#Prin  .]

										:apply(csb230#4)

											-- Goal`4-1-4-2-2-1-1-2-1-2-1-1 Success by reduction
											:apply (rd)

										-- Goal`4-1-4-2-2-1-1-2-1-2-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

								-- Goal`4-1-4-2-2-1-1-2-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

						-- Goal`4-1-4-2-2-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

					-- Goal`4-1-4-2-2-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)


:sel(10)
	:apply(tc)

	:def csb1#10 = :ctf [M#Msg \in nw(S#Sys)  .]

	:apply(csb1#10)

	:def csb2#10 = :ctf [M0#Msg \in nw(S#Sys)  .]

	:apply(csb2#10)

	:def csb3#10 = :ctf [m1?(M#Msg)  .]

	:apply(csb3#10)

	:def csb4#10 = :ctf [m2?(M0#Msg)  .]

	:apply(csb4#10)

	:def csb5#10 = :ctf {eq creator(M#Msg)  = P#Prin .}

	:apply(csb5#10)

	:def csb6#10 = :ctf {eq sender(M#Msg)  = P#Prin .}

	:apply(csb6#10)

	:def csb7#10 = :ctf {eq receiver(M#Msg)  = sender(M0#Msg) .}

	:apply(csb7#10)

	:def csb8#10 = :ctf {eq key(cipher1(M#Msg))  = sender(M0#Msg) .}

	:apply(csb8#10)

	:def csb9#10 = :ctf {eq nonce(cipher1(M#Msg))  = n(P#Prin, sender(M0#Msg), R#Rand) .}

	:apply(csb9#10)

	:def csb10#10 = :ctf {eq principal(cipher1(M#Msg))  = P#Prin .}

	:apply(csb10#10)

	:def csb11#10 = :ctf {eq receiver(M0#Msg)  = P#Prin .}

	:apply(csb11#10)

	:def csb12#10 = :ctf {eq key(cipher2(M0#Msg))  = P#Prin .}

	:apply(csb12#10)

	:def csb13#10 = :ctf {eq nonce1(cipher2(M0#Msg))  = n(P#Prin, sender(M0#Msg), R#Rand) .}

	:apply(csb13#10)

	:def csb14#10 = :ctf {eq principal(cipher2(M0#Msg))  = sender(M0#Msg) .}

	:apply(csb14#10)

	:def csb15#10 = :ctf {eq sender(M0#Msg)  = intruder .}

	:apply(csb15#10)

	:def csb16#10 = :ctf {eq n@Nonce  = nonce2(cipher2(M0#Msg)) .}

	:apply(csb16#10)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)

	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

	:apply (rd)


:sel(9)
	:apply(tc)

	-- Goal`9-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
	:def csb1#9 = :cvs [nw(S#Sys)  .]

	:apply(csb1#9)

		-- Goal`9-1-1 Success by reduction
		:apply (rd)

		-- Goal`9-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
	:def csb2#9 = :cvs [ur(S#Sys)  .]

	:apply(csb2#9)

			-- Goal`9-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
			:def csb3#9 = :ctf {eq cipher1(M#Msg)  = C#EVS9-1.SubCipher1 .}

			:apply(csb3#9)

				-- Goal`9-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
				:def csb4#9 = :ctf {eq creator(M#Msg)  = P#EVS9-1.SubPrin .}

				:apply(csb4#9)

					-- Goal`9-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb5#9 = :ctf {eq key(C#EVS9-1.SubCipher1)  = P#Prin .}

					:apply(csb5#9)

						-- Goal`9-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb6#9 = :ctf {eq principal(C#EVS9-1.SubCipher1)  = sender(M#Msg) .}

						:apply(csb6#9)

							-- Goal`9-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb7#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

							:apply(csb7#9)

								-- Goal`9-1-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb8#9 = :ctf {eq P#Prin  = P1#EVS9-1.SubPrin .}

								:apply(csb8#9)

									-- Goal`9-1-2-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb9#9 = :ctf {eq sender(M#Msg)  = P0#EVS9-1.SubPrin .}

									:apply(csb9#9)

										-- Goal`9-1-2-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb10#9 = :ctf [creator(n@Nonce)  .]

										:apply(csb10#9)

											-- Goal`9-1-2-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb11#9 = :ctf [m1?(M#Msg)  .]

											:apply(csb11#9)

												-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb12#9 = :ctf {eq n(P1#EVS9-1.SubPrin, P0#EVS9-1.SubPrin, R#Rand)  = n@Nonce .}

												:apply(csb12#9)

													-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb13#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

													:apply(csb13#9)

														-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb14#9 = :ctf [P0#EVS9-1.SubPrin  .]

														:apply(csb14#9)

															-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-1-1-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb15#9 = :ctf [P0#EVS9-1.SubPrin  .]

														:apply(csb15#9)

															-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb16#9 = :ctf {eq n(P1#EVS9-1.SubPrin, intruder, R#Rand)  = n@Nonce .}

															:apply(csb16#9)

																-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-1-1-2-1-1 Success by reduction
																:apply (rd)

																-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-1-1-2-1-2 Success by implication and reduction.
																:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																:apply (rd)

													-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb17#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

													:apply(csb17#9)

														-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb18#9 = :ctf [P0#EVS9-1.SubPrin  .]

														:apply(csb18#9)

															-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-1-2-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-1-2-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

												-- Goal`9-1-2-1-1-1-1-1-1-1-1-1-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

										-- Goal`9-1-2-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb19#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

										:apply(csb19#9)

											-- Goal`9-1-2-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb20#9 = :ctf [creator(n@Nonce)  .]

											:apply(csb20#9)

												-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb21#9 = :ctf [m1?(M#Msg)  .]

												:apply(csb21#9)

													-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb22#9 = :ctf {eq n(P1#EVS9-1.SubPrin, sender(M#Msg), R#Rand)  = n@Nonce .}

													:apply(csb22#9)

														-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb23#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

														:apply(csb23#9)

															-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb24#9 = :ctf [P1#EVS9-1.SubPrin  .]

															:apply(csb24#9)

																-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-1-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb25#9 = :ctf [sender(M#Msg)  .]

															:apply(csb25#9)

																-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb26#9 = :ctf {eq n(P1#EVS9-1.SubPrin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb26#9)

																	-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb27#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

														:apply(csb27#9)

															-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb28#9 = :ctf [P1#EVS9-1.SubPrin  .]

															:apply(csb28#9)

																-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-1-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-1-2-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

													-- Goal`9-1-2-1-1-1-1-1-1-1-2-1-1-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

											-- Goal`9-1-2-1-1-1-1-1-1-1-2-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

									-- Goal`9-1-2-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb29#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

									:apply(csb29#9)

										-- Goal`9-1-2-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb30#9 = :ctf [creator(n@Nonce)  .]

										:apply(csb30#9)

											-- Goal`9-1-2-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb31#9 = :ctf [m1?(M#Msg)  .]

											:apply(csb31#9)

												-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb32#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

												:apply(csb32#9)

													-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb33#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

													:apply(csb33#9)

														-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb34#9 = :ctf [P#Prin  .]

														:apply(csb34#9)

															-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-1-1-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb35#9 = :ctf [sender(M#Msg)  .]

														:apply(csb35#9)

															-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb36#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

															:apply(csb36#9)

																-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-1-1-2-1-1 Success by reduction
																:apply (rd)

																-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
																:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																:apply (rd)

													-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb37#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

													:apply(csb37#9)

														-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb38#9 = :ctf [P#Prin  .]

														:apply(csb38#9)

															-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-1-2-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-1-2-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

												-- Goal`9-1-2-1-1-1-1-1-1-2-1-1-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

										-- Goal`9-1-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

								-- Goal`9-1-2-1-1-1-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-2-1-1-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-2-1-1-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

					-- Goal`9-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb39#9 = :ctf {eq key(C#EVS9-1.SubCipher1)  = P#Prin .}

					:apply(csb39#9)

						-- Goal`9-1-2-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb40#9 = :ctf {eq principal(C#EVS9-1.SubCipher1)  = sender(M#Msg) .}

						:apply(csb40#9)

							-- Goal`9-1-2-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb41#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

							:apply(csb41#9)

								-- Goal`9-1-2-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb42#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

								:apply(csb42#9)

									-- Goal`9-1-2-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb43#9 = :ctf [creator(n@Nonce)  .]

									:apply(csb43#9)

										-- Goal`9-1-2-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb44#9 = :ctf [m1?(M#Msg)  .]

										:apply(csb44#9)

											-- Goal`9-1-2-1-1-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb45#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

											:apply(csb45#9)

												-- Goal`9-1-2-1-1-2-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb46#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

												:apply(csb46#9)

													-- Goal`9-1-2-1-1-2-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb47#9 = :ctf [P#Prin  .]

													:apply(csb47#9)

														-- Goal`9-1-2-1-1-2-1-1-1-1-1-1-1-1-1 Success by reduction
														:apply (rd)

													-- Goal`9-1-2-1-1-2-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb48#9 = :ctf [sender(M#Msg)  .]

													:apply(csb48#9)

														-- Goal`9-1-2-1-1-2-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb49#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

														:apply(csb49#9)

															-- Goal`9-1-2-1-1-2-1-1-1-1-1-1-1-2-1-1 Success by reduction
															:apply (rd)

															-- Goal`9-1-2-1-1-2-1-1-1-1-1-1-1-2-1-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

												-- Goal`9-1-2-1-1-2-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb50#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

												:apply(csb50#9)

													-- Goal`9-1-2-1-1-2-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb51#9 = :ctf [P#Prin  .]

													:apply(csb51#9)

														-- Goal`9-1-2-1-1-2-1-1-1-1-1-1-2-1-1 Success by reduction
														:apply (rd)

													-- Goal`9-1-2-1-1-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

											-- Goal`9-1-2-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

									-- Goal`9-1-2-1-1-2-1-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

								-- Goal`9-1-2-1-1-2-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-2-1-1-2-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-2-1-1-2-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

				-- Goal`9-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
				:def csb52#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

				:apply(csb52#9)

					-- Goal`9-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb53#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

					:apply(csb53#9)

						-- Goal`9-1-2-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb54#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

						:apply(csb54#9)

							-- Goal`9-1-2-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb55#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

							:apply(csb55#9)

								-- Goal`9-1-2-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb56#9 = :ctf [creator(n@Nonce)  .]

								:apply(csb56#9)

									-- Goal`9-1-2-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb57#9 = :ctf [m1?(M#Msg)  .]

									:apply(csb57#9)

										-- Goal`9-1-2-1-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb58#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

										:apply(csb58#9)

											-- Goal`9-1-2-1-2-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb59#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

											:apply(csb59#9)

												-- Goal`9-1-2-1-2-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb60#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

												:apply(csb60#9)

													-- Goal`9-1-2-1-2-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb61#9 = :ctf [key(C#EVS9-1.SubCipher1)  .]

													:apply(csb61#9)

														-- Goal`9-1-2-1-2-1-1-1-1-1-1-1-1-1-1 Success by reduction
														:apply (rd)

													-- Goal`9-1-2-1-2-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb62#9 = :ctf [key(C#EVS9-1.SubCipher1)  .]

													:apply(csb62#9)

														-- Goal`9-1-2-1-2-1-1-1-1-1-1-1-1-2-1 Success by reduction
														:apply (rd)

												-- Goal`9-1-2-1-2-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb63#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

												:apply(csb63#9)

													-- Goal`9-1-2-1-2-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb64#9 = :ctf [sender(M#Msg)  .]

													:apply(csb64#9)

														-- Goal`9-1-2-1-2-1-1-1-1-1-1-1-2-1-1 Success by reduction
														:apply (rd)

													-- Goal`9-1-2-1-2-1-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb65#9 = :ctf [sender(M#Msg)  .]

													:apply(csb65#9)

														-- Goal`9-1-2-1-2-1-1-1-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb66#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

														:apply(csb66#9)

															-- Goal`9-1-2-1-2-1-1-1-1-1-1-1-2-2-1-1 Success by reduction
															:apply (rd)

															-- Goal`9-1-2-1-2-1-1-1-1-1-1-1-2-2-1-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

											-- Goal`9-1-2-1-2-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb67#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

											:apply(csb67#9)

												-- Goal`9-1-2-1-2-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb68#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

												:apply(csb68#9)

													-- Goal`9-1-2-1-2-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb69#9 = :ctf [key(C#EVS9-1.SubCipher1)  .]

													:apply(csb69#9)

														-- Goal`9-1-2-1-2-1-1-1-1-1-1-2-1-1-1 Success by reduction
														:apply (rd)

													-- Goal`9-1-2-1-2-1-1-1-1-1-1-2-1-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

												-- Goal`9-1-2-1-2-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb70#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

												:apply(csb70#9)

													-- Goal`9-1-2-1-2-1-1-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb71#9 = :ctf [sender(M#Msg)  .]

													:apply(csb71#9)

														-- Goal`9-1-2-1-2-1-1-1-1-1-1-2-2-1-1 Success by reduction
														:apply (rd)

													-- Goal`9-1-2-1-2-1-1-1-1-1-1-2-2-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

										-- Goal`9-1-2-1-2-1-1-1-1-1-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

								-- Goal`9-1-2-1-2-1-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-2-1-2-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-2-1-2-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

					-- Goal`9-1-2-1-2-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

			-- Goal`9-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
			:def csb72#9 = :ctf {eq EVS9-1-2.SubRand  = R#Rand .}

			:apply(csb72#9)

				-- Goal`9-1-2-2-1 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

				-- Goal`9-1-2-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
				:def csb73#9 = :ctf {eq cipher1(M#Msg)  = C#EVS9-1.SubCipher1 .}

				:apply(csb73#9)

					-- Goal`9-1-2-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb74#9 = :ctf {eq creator(M#Msg)  = P#EVS9-1.SubPrin .}

					:apply(csb74#9)

						-- Goal`9-1-2-2-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb75#9 = :ctf {eq key(C#EVS9-1.SubCipher1)  = P#Prin .}

						:apply(csb75#9)

							-- Goal`9-1-2-2-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb76#9 = :ctf {eq principal(C#EVS9-1.SubCipher1)  = sender(M#Msg) .}

							:apply(csb76#9)

								-- Goal`9-1-2-2-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb77#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb77#9)

									-- Goal`9-1-2-2-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb78#9 = :ctf {eq P#Prin  = P1#EVS9-1.SubPrin .}

									:apply(csb78#9)

										-- Goal`9-1-2-2-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb79#9 = :ctf {eq sender(M#Msg)  = P0#EVS9-1.SubPrin .}

										:apply(csb79#9)

											-- Goal`9-1-2-2-2-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb80#9 = :ctf [R#Rand \in U0#EVS9-1-2.URand  .]

											:apply(csb80#9)

												-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-1 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

												-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb81#9 = :ctf [creator(n@Nonce)  .]

												:apply(csb81#9)

													-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb82#9 = :ctf [m1?(M#Msg)  .]

													:apply(csb82#9)

														-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb83#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

														:apply(csb83#9)

															-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb84#9 = :ctf {eq n(P1#EVS9-1.SubPrin, P0#EVS9-1.SubPrin, R#Rand)  = n@Nonce .}

															:apply(csb84#9)

																-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb85#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb85#9)

																	-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb86#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb86#9)

																	-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb87#9 = :ctf [P0#EVS9-1.SubPrin  .]

															:apply(csb87#9)

																-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb88#9 = :ctf {eq n(P1#EVS9-1.SubPrin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb88#9)

																	-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2-1-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2-1-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-2-2-2-1-1-1-1-1-1-1-2-1-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

											-- Goal`9-1-2-2-2-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb89#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

											:apply(csb89#9)

												-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb90#9 = :ctf [R#Rand \in U0#EVS9-1-2.URand  .]

												:apply(csb90#9)

													-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-1 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

													-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb91#9 = :ctf [m1?(M#Msg)  .]

													:apply(csb91#9)

														-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb92#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

														:apply(csb92#9)

															-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb93#9 = :ctf {eq n(P1#EVS9-1.SubPrin, sender(M#Msg), R#Rand)  = n@Nonce .}

															:apply(csb93#9)

																-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb94#9 = :ctf [P1#EVS9-1.SubPrin  .]

																:apply(csb94#9)

																	-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb95#9 = :ctf [P1#EVS9-1.SubPrin  .]

																:apply(csb95#9)

																	-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-2-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb96#9 = :ctf [sender(M#Msg)  .]

															:apply(csb96#9)

																-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb97#9 = :ctf {eq n(P1#EVS9-1.SubPrin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb97#9)

																	-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-2-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-2-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-1-2-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

												-- Goal`9-1-2-2-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

										-- Goal`9-1-2-2-2-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb98#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

										:apply(csb98#9)

											-- Goal`9-1-2-2-2-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb99#9 = :ctf [R#Rand \in U0#EVS9-1-2.URand  .]

											:apply(csb99#9)

												-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-1 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

												-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb100#9 = :ctf [creator(n@Nonce)  .]

												:apply(csb100#9)

													-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb101#9 = :ctf [m1?(M#Msg)  .]

													:apply(csb101#9)

														-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb102#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

														:apply(csb102#9)

															-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb103#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

															:apply(csb103#9)

																-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb104#9 = :ctf [P#Prin  .]

																:apply(csb104#9)

																	-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb105#9 = :ctf [P#Prin  .]

																:apply(csb105#9)

																	-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb106#9 = :ctf [sender(M#Msg)  .]

															:apply(csb106#9)

																-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb107#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb107#9)

																	-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2-1-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2-1-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-2-2-2-1-1-1-1-1-2-1-2-1-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

											-- Goal`9-1-2-2-2-1-1-1-1-1-2-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

									-- Goal`9-1-2-2-2-1-1-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

								-- Goal`9-1-2-2-2-1-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-2-2-2-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-2-2-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb108#9 = :ctf {eq key(C#EVS9-1.SubCipher1)  = P#Prin .}

						:apply(csb108#9)

							-- Goal`9-1-2-2-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb109#9 = :ctf {eq principal(C#EVS9-1.SubCipher1)  = sender(M#Msg) .}

							:apply(csb109#9)

								-- Goal`9-1-2-2-2-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb110#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb110#9)

									-- Goal`9-1-2-2-2-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb111#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

									:apply(csb111#9)

										-- Goal`9-1-2-2-2-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb112#9 = :ctf [R#Rand \in U0#EVS9-1-2.URand  .]

										:apply(csb112#9)

											-- Goal`9-1-2-2-2-1-2-1-1-1-1-1 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

											-- Goal`9-1-2-2-2-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb113#9 = :ctf [creator(n@Nonce)  .]

											:apply(csb113#9)

												-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb114#9 = :ctf [m1?(M#Msg)  .]

												:apply(csb114#9)

													-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb115#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

													:apply(csb115#9)

														-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb116#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

														:apply(csb116#9)

															-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb117#9 = :ctf [P#Prin  .]

															:apply(csb117#9)

																-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-1-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb118#9 = :ctf [sender(M#Msg)  .]

															:apply(csb118#9)

																-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb119#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb119#9)

																	-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-1-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb120#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

														:apply(csb120#9)

															-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb121#9 = :ctf [P#Prin  .]

															:apply(csb121#9)

																-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-1-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-1-2-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

													-- Goal`9-1-2-2-2-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

										-- Goal`9-1-2-2-2-1-2-1-1-1-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

									-- Goal`9-1-2-2-2-1-2-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

								-- Goal`9-1-2-2-2-1-2-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-2-2-2-1-2-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

					-- Goal`9-1-2-2-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb122#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

					:apply(csb122#9)

						-- Goal`9-1-2-2-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb123#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

						:apply(csb123#9)

							-- Goal`9-1-2-2-2-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb124#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

							:apply(csb124#9)

								-- Goal`9-1-2-2-2-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb125#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

								:apply(csb125#9)

									-- Goal`9-1-2-2-2-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb126#9 = :ctf [R#Rand \in U0#EVS9-1-2.URand  .]

									:apply(csb126#9)

										-- Goal`9-1-2-2-2-2-1-1-1-1-1 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

										-- Goal`9-1-2-2-2-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb127#9 = :ctf [creator(n@Nonce)  .]

										:apply(csb127#9)

											-- Goal`9-1-2-2-2-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb128#9 = :ctf [m1?(M#Msg)  .]

											:apply(csb128#9)

												-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb129#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

												:apply(csb129#9)

													-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb130#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

													:apply(csb130#9)

														-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb131#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb131#9)

															-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb132#9 = :ctf [key(C#EVS9-1.SubCipher1)  .]

															:apply(csb132#9)

																-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb133#9 = :ctf [key(C#EVS9-1.SubCipher1)  .]

															:apply(csb133#9)

																-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1-1-2-1 Success by reduction
																:apply (rd)

														-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb134#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb134#9)

															-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb135#9 = :ctf [sender(M#Msg)  .]

															:apply(csb135#9)

																-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb136#9 = :ctf [sender(M#Msg)  .]

															:apply(csb136#9)

																-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb137#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb137#9)

																	-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1-2-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-1-2-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

													-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb138#9 = :ctf {eq nonce(C#EVS9-1.SubCipher1)  = n@Nonce .}

													:apply(csb138#9)

														-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb139#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb139#9)

															-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb140#9 = :ctf [key(C#EVS9-1.SubCipher1)  .]

															:apply(csb140#9)

																-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-2-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-2-1-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

														-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb141#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb141#9)

															-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb142#9 = :ctf [sender(M#Msg)  .]

															:apply(csb142#9)

																-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-2-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-1-2-2-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

												-- Goal`9-1-2-2-2-2-1-1-1-1-2-1-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

									-- Goal`9-1-2-2-2-2-1-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

								-- Goal`9-1-2-2-2-2-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-2-2-2-2-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-2-2-2-2-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

		-- Goal`9-1-3  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
	:def csb143#9 = :cvs [ur(S#Sys)  .]

	:apply(csb143#9)

			-- Goal`9-1-3-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
			:def csb144#9 = :ctf {eq cipher2(M#Msg)  = C#EVS9-1.SubCipher2 .}

			:apply(csb144#9)

				-- Goal`9-1-3-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
				:def csb145#9 = :ctf {eq creator(M#Msg)  = P#EVS9-1.SubPrin .}

				:apply(csb145#9)

					-- Goal`9-1-3-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb146#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

					:apply(csb146#9)

						-- Goal`9-1-3-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb147#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

						:apply(csb147#9)

							-- Goal`9-1-3-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb148#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

							:apply(csb148#9)

								-- Goal`9-1-3-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb149#9 = :ctf {eq P#Prin  = P1#EVS9-1.SubPrin .}

								:apply(csb149#9)

									-- Goal`9-1-3-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb150#9 = :ctf {eq sender(M#Msg)  = P0#EVS9-1.SubPrin .}

									:apply(csb150#9)

										-- Goal`9-1-3-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb151#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

										:apply(csb151#9)

											-- Goal`9-1-3-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb152#9 = :ctf [creator(n@Nonce)  .]

											:apply(csb152#9)

												-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb153#9 = :ctf [m1?(M#Msg)  .]

												:apply(csb153#9)

													-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb154#9 = :ctf {eq n(P1#EVS9-1.SubPrin, P0#EVS9-1.SubPrin, R#Rand)  = n@Nonce .}

													:apply(csb154#9)

														-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb155#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb155#9)

															-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb156#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb156#9)

																-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb157#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb157#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb158#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb158#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb159#9 = :ctf [P0#EVS9-1.SubPrin  .]

															:apply(csb159#9)

																-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb160#9 = :ctf {eq n(P1#EVS9-1.SubPrin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb160#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb161#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb161#9)

															-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb162#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb162#9)

																-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb163#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb163#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb164#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb164#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-2-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-1-2-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

													-- Goal`9-1-3-1-1-1-1-1-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

											-- Goal`9-1-3-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb165#9 = :ctf [creator(n@Nonce)  .]

											:apply(csb165#9)

												-- Goal`9-1-3-1-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb166#9 = :ctf [m1?(M#Msg)  .]

												:apply(csb166#9)

													-- Goal`9-1-3-1-1-1-1-1-1-1-1-2-1-1 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

													-- Goal`9-1-3-1-1-1-1-1-1-1-1-2-1-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

										-- Goal`9-1-3-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb167#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

										:apply(csb167#9)

											-- Goal`9-1-3-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb168#9 = :ctf [creator(n@Nonce)  .]

											:apply(csb168#9)

												-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb169#9 = :ctf [m1?(M#Msg)  .]

												:apply(csb169#9)

													-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb170#9 = :ctf {eq n(P1#EVS9-1.SubPrin, sender(M#Msg), R#Rand)  = n@Nonce .}

													:apply(csb170#9)

														-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb171#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb171#9)

															-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb172#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb172#9)

																-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb173#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb173#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb174#9 = :ctf [sender(M#Msg)  .]

																:apply(csb174#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb175#9 = :ctf [sender(M#Msg)  .]

															:apply(csb175#9)

																-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb176#9 = :ctf {eq n(P1#EVS9-1.SubPrin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb176#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb177#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb177#9)

															-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb178#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb178#9)

																-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb179#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb179#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb180#9 = :ctf [sender(M#Msg)  .]

																:apply(csb180#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-2-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-1-2-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

													-- Goal`9-1-3-1-1-1-1-1-1-1-2-1-1-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

											-- Goal`9-1-3-1-1-1-1-1-1-1-2-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

									-- Goal`9-1-3-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb181#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

									:apply(csb181#9)

										-- Goal`9-1-3-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb182#9 = :ctf [creator(n@Nonce)  .]

										:apply(csb182#9)

											-- Goal`9-1-3-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb183#9 = :ctf [m1?(M#Msg)  .]

											:apply(csb183#9)

												-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb184#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

												:apply(csb184#9)

													-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb185#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

													:apply(csb185#9)

														-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb186#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

														:apply(csb186#9)

															-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb187#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb187#9)

																-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb188#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb188#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb189#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb189#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb190#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb190#9)

																-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb191#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb191#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb192#9 = :ctf [sender(M#Msg)  .]

																:apply(csb192#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-1-2-2-1 Success by reduction
																	:apply (rd)

														-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb193#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

														:apply(csb193#9)

															-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb194#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb194#9)

																-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb195#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb195#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb196#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb196#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-2-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb197#9 = :ctf [sender(M#Msg)  .]

															:apply(csb197#9)

																-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb198#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb198#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-2-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-1-2-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

													-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb199#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

													:apply(csb199#9)

														-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb200#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

														:apply(csb200#9)

															-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb201#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb201#9)

																-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb202#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb202#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb203#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb203#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb204#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb204#9)

																-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb205#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb205#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2-1-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb206#9 = :ctf [sender(M#Msg)  .]

																:apply(csb206#9)

																	-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2-1-2-2-1 Success by reduction
																	:apply (rd)

														-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-1-2-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

												-- Goal`9-1-3-1-1-1-1-1-1-2-1-1-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

										-- Goal`9-1-3-1-1-1-1-1-1-2-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

								-- Goal`9-1-3-1-1-1-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-3-1-1-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-3-1-1-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

					-- Goal`9-1-3-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb207#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

					:apply(csb207#9)

						-- Goal`9-1-3-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb208#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

						:apply(csb208#9)

							-- Goal`9-1-3-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb209#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

							:apply(csb209#9)

								-- Goal`9-1-3-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb210#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

								:apply(csb210#9)

									-- Goal`9-1-3-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb211#9 = :ctf [creator(n@Nonce)  .]

									:apply(csb211#9)

										-- Goal`9-1-3-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb212#9 = :ctf [m1?(M#Msg)  .]

										:apply(csb212#9)

											-- Goal`9-1-3-1-1-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb213#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

											:apply(csb213#9)

												-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb214#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

												:apply(csb214#9)

													-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb215#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

													:apply(csb215#9)

														-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb216#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

														:apply(csb216#9)

															-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb217#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

															:apply(csb217#9)

																-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-1-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb218#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

															:apply(csb218#9)

																-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-1-1-2-1 Success by reduction
																:apply (rd)

														-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb219#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

														:apply(csb219#9)

															-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb220#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

															:apply(csb220#9)

																-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-1-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb221#9 = :ctf [sender(M#Msg)  .]

															:apply(csb221#9)

																-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-1-2-2-1 Success by reduction
																:apply (rd)

													-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb222#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

													:apply(csb222#9)

														-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb223#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

														:apply(csb223#9)

															-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb224#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

															:apply(csb224#9)

																-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb225#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

															:apply(csb225#9)

																-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2-1-2-1 Success by reduction
																:apply (rd)

														-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb226#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

														:apply(csb226#9)

															-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb227#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

															:apply(csb227#9)

																-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb228#9 = :ctf [sender(M#Msg)  .]

															:apply(csb228#9)

																-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb229#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb229#9)

																	-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2-2-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-1-2-2-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

												-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb230#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

												:apply(csb230#9)

													-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb231#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

													:apply(csb231#9)

														-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb232#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

														:apply(csb232#9)

															-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb233#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

															:apply(csb233#9)

																-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2-1-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb234#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

															:apply(csb234#9)

																-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2-1-1-2-1 Success by reduction
																:apply (rd)

														-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb235#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

														:apply(csb235#9)

															-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb236#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

															:apply(csb236#9)

																-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2-1-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb237#9 = :ctf [sender(M#Msg)  .]

															:apply(csb237#9)

																-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2-1-2-2-1 Success by reduction
																:apply (rd)

													-- Goal`9-1-3-1-1-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

											-- Goal`9-1-3-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

									-- Goal`9-1-3-1-1-2-1-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

								-- Goal`9-1-3-1-1-2-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-3-1-1-2-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-3-1-1-2-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

				-- Goal`9-1-3-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
				:def csb238#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

				:apply(csb238#9)

					-- Goal`9-1-3-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb239#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

					:apply(csb239#9)

						-- Goal`9-1-3-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb240#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

						:apply(csb240#9)

							-- Goal`9-1-3-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb241#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

							:apply(csb241#9)

								-- Goal`9-1-3-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb242#9 = :ctf [creator(n@Nonce)  .]

								:apply(csb242#9)

									-- Goal`9-1-3-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb243#9 = :ctf [m1?(M#Msg)  .]

									:apply(csb243#9)

										-- Goal`9-1-3-1-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb244#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

										:apply(csb244#9)

											-- Goal`9-1-3-1-2-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb245#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

											:apply(csb245#9)

												-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb246#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

												:apply(csb246#9)

													-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb247#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

													:apply(csb247#9)

														-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb248#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

														:apply(csb248#9)

															-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-1-1-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb249#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

														:apply(csb249#9)

															-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-1-1-2-1 Success by reduction
															:apply (rd)

													-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb250#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

													:apply(csb250#9)

														-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb251#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

														:apply(csb251#9)

															-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-1-2-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb252#9 = :ctf [sender(M#Msg)  .]

														:apply(csb252#9)

															-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-1-2-2-1 Success by reduction
															:apply (rd)

												-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb253#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

												:apply(csb253#9)

													-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb254#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

													:apply(csb254#9)

														-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb255#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

														:apply(csb255#9)

															-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2-1-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb256#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

														:apply(csb256#9)

															-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2-1-2-1 Success by reduction
															:apply (rd)

													-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb257#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

													:apply(csb257#9)

														-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb258#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

														:apply(csb258#9)

															-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2-2-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb259#9 = :ctf [sender(M#Msg)  .]

														:apply(csb259#9)

															-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb260#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

															:apply(csb260#9)

																-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2-2-2-1-1 Success by reduction
																:apply (rd)

																-- Goal`9-1-3-1-2-1-1-1-1-1-1-1-2-2-2-1-2 Success by implication and reduction.
																:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																:apply (rd)

											-- Goal`9-1-3-1-2-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb261#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

											:apply(csb261#9)

												-- Goal`9-1-3-1-2-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb262#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

												:apply(csb262#9)

													-- Goal`9-1-3-1-2-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb263#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

													:apply(csb263#9)

														-- Goal`9-1-3-1-2-1-1-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb264#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

														:apply(csb264#9)

															-- Goal`9-1-3-1-2-1-1-1-1-1-1-2-1-1-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-3-1-2-1-1-1-1-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb265#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

														:apply(csb265#9)

															-- Goal`9-1-3-1-2-1-1-1-1-1-1-2-1-1-2-1 Success by reduction
															:apply (rd)

													-- Goal`9-1-3-1-2-1-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb266#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

													:apply(csb266#9)

														-- Goal`9-1-3-1-2-1-1-1-1-1-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb267#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

														:apply(csb267#9)

															-- Goal`9-1-3-1-2-1-1-1-1-1-1-2-1-2-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-3-1-2-1-1-1-1-1-1-2-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb268#9 = :ctf [sender(M#Msg)  .]

														:apply(csb268#9)

															-- Goal`9-1-3-1-2-1-1-1-1-1-1-2-1-2-2-1 Success by reduction
															:apply (rd)

												-- Goal`9-1-3-1-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

										-- Goal`9-1-3-1-2-1-1-1-1-1-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

								-- Goal`9-1-3-1-2-1-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-3-1-2-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-3-1-2-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

					-- Goal`9-1-3-1-2-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

			-- Goal`9-1-3-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
			:def csb269#9 = :ctf {eq EVS9-1-3.SubRand  = R#Rand .}

			:apply(csb269#9)

				-- Goal`9-1-3-2-1 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

				-- Goal`9-1-3-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
				:def csb270#9 = :ctf {eq cipher2(M#Msg)  = C#EVS9-1.SubCipher2 .}

				:apply(csb270#9)

					-- Goal`9-1-3-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb271#9 = :ctf {eq creator(M#Msg)  = P#EVS9-1.SubPrin .}

					:apply(csb271#9)

						-- Goal`9-1-3-2-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb272#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

						:apply(csb272#9)

							-- Goal`9-1-3-2-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb273#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

							:apply(csb273#9)

								-- Goal`9-1-3-2-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb274#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb274#9)

									-- Goal`9-1-3-2-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb275#9 = :ctf {eq P#Prin  = P1#EVS9-1.SubPrin .}

									:apply(csb275#9)

										-- Goal`9-1-3-2-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb276#9 = :ctf {eq sender(M#Msg)  = P0#EVS9-1.SubPrin .}

										:apply(csb276#9)

											-- Goal`9-1-3-2-2-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb277#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

											:apply(csb277#9)

												-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb278#9 = :ctf [R#Rand \in U0#EVS9-1-3.URand  .]

												:apply(csb278#9)

													-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-1 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

													-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb279#9 = :ctf [m1?(M#Msg)  .]

													:apply(csb279#9)

														-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb280#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb280#9)

															-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb281#9 = :ctf {eq n(P1#EVS9-1.SubPrin, P0#EVS9-1.SubPrin, R#Rand)  = n@Nonce .}

															:apply(csb281#9)

																-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb282#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb282#9)

																	-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb283#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb283#9)

																	-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-2-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb284#9 = :ctf [P0#EVS9-1.SubPrin  .]

															:apply(csb284#9)

																-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb285#9 = :ctf {eq n(P1#EVS9-1.SubPrin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb285#9)

																	-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-2-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-2-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-1-2-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

												-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb286#9 = :ctf [R#Rand \in U0#EVS9-1-3.URand  .]

												:apply(csb286#9)

													-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-2-1 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

													-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb287#9 = :ctf [creator(n@Nonce)  .]

													:apply(csb287#9)

														-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb288#9 = :ctf [m1?(M#Msg)  .]

														:apply(csb288#9)

															-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-2-2-1-1 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

															-- Goal`9-1-3-2-2-1-1-1-1-1-1-1-2-2-1-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

											-- Goal`9-1-3-2-2-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb289#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

											:apply(csb289#9)

												-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb290#9 = :ctf [R#Rand \in U0#EVS9-1-3.URand  .]

												:apply(csb290#9)

													-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-1 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

													-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb291#9 = :ctf [m1?(M#Msg)  .]

													:apply(csb291#9)

														-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb292#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb292#9)

															-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb293#9 = :ctf {eq n(P1#EVS9-1.SubPrin, sender(M#Msg), R#Rand)  = n@Nonce .}

															:apply(csb293#9)

																-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb294#9 = :ctf [sender(M#Msg)  .]

																:apply(csb294#9)

																	-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb295#9 = :ctf [sender(M#Msg)  .]

																:apply(csb295#9)

																	-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-2-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb296#9 = :ctf [sender(M#Msg)  .]

															:apply(csb296#9)

																-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb297#9 = :ctf {eq n(P1#EVS9-1.SubPrin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb297#9)

																	-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-2-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-2-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-1-2-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

												-- Goal`9-1-3-2-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

										-- Goal`9-1-3-2-2-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb298#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

										:apply(csb298#9)

											-- Goal`9-1-3-2-2-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb299#9 = :ctf [R#Rand \in U0#EVS9-1-3.URand  .]

											:apply(csb299#9)

												-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-1 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

												-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb300#9 = :ctf [creator(n@Nonce)  .]

												:apply(csb300#9)

													-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb301#9 = :ctf [m1?(M#Msg)  .]

													:apply(csb301#9)

														-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb302#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb302#9)

															-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb303#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

															:apply(csb303#9)

																-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb304#9 = :ctf [sender(M#Msg)  .]

																:apply(csb304#9)

																	-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb305#9 = :ctf [sender(M#Msg)  .]

																:apply(csb305#9)

																	-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb306#9 = :ctf [sender(M#Msg)  .]

															:apply(csb306#9)

																-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb307#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb307#9)

																	-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2-1-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2-1-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-3-2-2-1-1-1-1-1-2-1-2-1-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

											-- Goal`9-1-3-2-2-1-1-1-1-1-2-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

									-- Goal`9-1-3-2-2-1-1-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

								-- Goal`9-1-3-2-2-1-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-3-2-2-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-3-2-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb308#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

						:apply(csb308#9)

							-- Goal`9-1-3-2-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb309#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

							:apply(csb309#9)

								-- Goal`9-1-3-2-2-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb310#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb310#9)

									-- Goal`9-1-3-2-2-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb311#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

									:apply(csb311#9)

										-- Goal`9-1-3-2-2-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb312#9 = :ctf [R#Rand \in U0#EVS9-1-3.URand  .]

										:apply(csb312#9)

											-- Goal`9-1-3-2-2-1-2-1-1-1-1-1 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

											-- Goal`9-1-3-2-2-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb313#9 = :ctf [creator(n@Nonce)  .]

											:apply(csb313#9)

												-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb314#9 = :ctf [m1?(M#Msg)  .]

												:apply(csb314#9)

													-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb315#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

													:apply(csb315#9)

														-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb316#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb316#9)

															-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb317#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb317#9)

																-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb318#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb318#9)

																	-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb319#9 = :ctf [sender(M#Msg)  .]

																:apply(csb319#9)

																	-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb320#9 = :ctf [sender(M#Msg)  .]

															:apply(csb320#9)

																-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb321#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb321#9)

																	-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb322#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb322#9)

															-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb323#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb323#9)

																-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb324#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb324#9)

																	-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb325#9 = :ctf [sender(M#Msg)  .]

																:apply(csb325#9)

																	-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-2-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-1-2-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

													-- Goal`9-1-3-2-2-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

										-- Goal`9-1-3-2-2-1-2-1-1-1-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

									-- Goal`9-1-3-2-2-1-2-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

								-- Goal`9-1-3-2-2-1-2-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-3-2-2-1-2-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

					-- Goal`9-1-3-2-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb326#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

					:apply(csb326#9)

						-- Goal`9-1-3-2-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb327#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

						:apply(csb327#9)

							-- Goal`9-1-3-2-2-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb328#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

							:apply(csb328#9)

								-- Goal`9-1-3-2-2-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb329#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

								:apply(csb329#9)

									-- Goal`9-1-3-2-2-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb330#9 = :ctf [R#Rand \in U0#EVS9-1-3.URand  .]

									:apply(csb330#9)

										-- Goal`9-1-3-2-2-2-1-1-1-1-1 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

										-- Goal`9-1-3-2-2-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb331#9 = :ctf [creator(n@Nonce)  .]

										:apply(csb331#9)

											-- Goal`9-1-3-2-2-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb332#9 = :ctf [m1?(M#Msg)  .]

											:apply(csb332#9)

												-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb333#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

												:apply(csb333#9)

													-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb334#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

													:apply(csb334#9)

														-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb335#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

														:apply(csb335#9)

															-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb336#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb336#9)

																-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb337#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb337#9)

																	-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb338#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb338#9)

																	-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb339#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb339#9)

																-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb340#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb340#9)

																	-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb341#9 = :ctf [sender(M#Msg)  .]

																:apply(csb341#9)

																	-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-1-2-2-1 Success by reduction
																	:apply (rd)

														-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb342#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

														:apply(csb342#9)

															-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb343#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb343#9)

																-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb344#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb344#9)

																	-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb345#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb345#9)

																	-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-2-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb346#9 = :ctf [sender(M#Msg)  .]

															:apply(csb346#9)

																-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb347#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb347#9)

																	-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-2-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-1-2-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

													-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb348#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

													:apply(csb348#9)

														-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb349#9 = :ctf {eq nonce1(C#EVS9-1.SubCipher2)  = n@Nonce .}

														:apply(csb349#9)

															-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb350#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb350#9)

																-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb351#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb351#9)

																	-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb352#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb352#9)

																	-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb353#9 = :ctf {eq nonce2(C#EVS9-1.SubCipher2)  = n@Nonce .}

															:apply(csb353#9)

																-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb354#9 = :ctf [key(C#EVS9-1.SubCipher2)  .]

																:apply(csb354#9)

																	-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2-1-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb355#9 = :ctf [sender(M#Msg)  .]

																:apply(csb355#9)

																	-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2-1-2-2-1 Success by reduction
																	:apply (rd)

														-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-1-2-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

												-- Goal`9-1-3-2-2-2-1-1-1-1-2-1-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

									-- Goal`9-1-3-2-2-2-1-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

								-- Goal`9-1-3-2-2-2-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-3-2-2-2-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-3-2-2-2-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

		-- Goal`9-1-4  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
	:def csb356#9 = :cvs [ur(S#Sys)  .]

	:apply(csb356#9)

			-- Goal`9-1-4-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
			:def csb357#9 = :ctf {eq cipher3(M#Msg)  = C#EVS9-1.SubCipher3 .}

			:apply(csb357#9)

				-- Goal`9-1-4-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
				:def csb358#9 = :ctf {eq creator(M#Msg)  = P#EVS9-1.SubPrin .}

				:apply(csb358#9)

					-- Goal`9-1-4-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb359#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

					:apply(csb359#9)

						-- Goal`9-1-4-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb360#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

						:apply(csb360#9)

							-- Goal`9-1-4-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb361#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

							:apply(csb361#9)

								-- Goal`9-1-4-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb362#9 = :ctf {eq P#Prin  = P1#EVS9-1.SubPrin .}

								:apply(csb362#9)

									-- Goal`9-1-4-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb363#9 = :ctf {eq sender(M#Msg)  = P0#EVS9-1.SubPrin .}

									:apply(csb363#9)

										-- Goal`9-1-4-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb364#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

										:apply(csb364#9)

											-- Goal`9-1-4-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb365#9 = :ctf [creator(n@Nonce)  .]

											:apply(csb365#9)

												-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb366#9 = :ctf [m1?(M#Msg)  .]

												:apply(csb366#9)

													-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb367#9 = :ctf {eq n(P1#EVS9-1.SubPrin, P0#EVS9-1.SubPrin, R#Rand)  = n@Nonce .}

													:apply(csb367#9)

														-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb368#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb368#9)

															-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb369#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

															:apply(csb369#9)

																-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb370#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb370#9)

																	-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb371#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb371#9)

																	-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb372#9 = :ctf [P0#EVS9-1.SubPrin  .]

															:apply(csb372#9)

																-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb373#9 = :ctf {eq n(P1#EVS9-1.SubPrin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb373#9)

																	-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb374#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

														:apply(csb374#9)

															-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb375#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

															:apply(csb375#9)

																-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb376#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb376#9)

																	-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-2-1-2 Success by implication and reduction.
																:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																:apply (rd)

															-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb377#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

															:apply(csb377#9)

																-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb378#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb378#9)

																	-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-2-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-1-2-2-2 Success by implication and reduction.
																:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																:apply (rd)

													-- Goal`9-1-4-1-1-1-1-1-1-1-1-1-1-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

											-- Goal`9-1-4-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb379#9 = :ctf [creator(n@Nonce)  .]

											:apply(csb379#9)

												-- Goal`9-1-4-1-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb380#9 = :ctf [m1?(M#Msg)  .]

												:apply(csb380#9)

													-- Goal`9-1-4-1-1-1-1-1-1-1-1-2-1-1 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

													-- Goal`9-1-4-1-1-1-1-1-1-1-1-2-1-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

										-- Goal`9-1-4-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb381#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

										:apply(csb381#9)

											-- Goal`9-1-4-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb382#9 = :ctf [creator(n@Nonce)  .]

											:apply(csb382#9)

												-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb383#9 = :ctf [m1?(M#Msg)  .]

												:apply(csb383#9)

													-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb384#9 = :ctf {eq n(P1#EVS9-1.SubPrin, sender(M#Msg), R#Rand)  = n@Nonce .}

													:apply(csb384#9)

														-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb385#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb385#9)

															-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb386#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

															:apply(csb386#9)

																-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb387#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

																:apply(csb387#9)

																	-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb388#9 = :ctf [sender(M#Msg)  .]

																:apply(csb388#9)

																	-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb389#9 = :ctf [sender(M#Msg)  .]

															:apply(csb389#9)

																-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb390#9 = :ctf {eq n(P1#EVS9-1.SubPrin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb390#9)

																	-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb391#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

														:apply(csb391#9)

															-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb392#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

															:apply(csb392#9)

																-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb393#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

																:apply(csb393#9)

																	-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-2-1-2 Success by implication and reduction.
																:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																:apply (rd)

															-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb394#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

															:apply(csb394#9)

																-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb395#9 = :ctf [sender(M#Msg)  .]

																:apply(csb395#9)

																	-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-2-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-1-2-2-2 Success by implication and reduction.
																:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																:apply (rd)

													-- Goal`9-1-4-1-1-1-1-1-1-1-2-1-1-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

											-- Goal`9-1-4-1-1-1-1-1-1-1-2-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

									-- Goal`9-1-4-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb396#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

									:apply(csb396#9)

										-- Goal`9-1-4-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb397#9 = :ctf [creator(n@Nonce)  .]

										:apply(csb397#9)

											-- Goal`9-1-4-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb398#9 = :ctf [m1?(M#Msg)  .]

											:apply(csb398#9)

												-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb399#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

												:apply(csb399#9)

													-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb400#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

													:apply(csb400#9)

														-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb401#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb401#9)

															-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb402#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

															:apply(csb402#9)

																-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb403#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

															:apply(csb403#9)

																-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1-1-2-1 Success by reduction
																:apply (rd)

														-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb404#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb404#9)

															-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb405#9 = :ctf [sender(M#Msg)  .]

															:apply(csb405#9)

																-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb406#9 = :ctf [sender(M#Msg)  .]

															:apply(csb406#9)

																-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb407#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb407#9)

																	-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1-2-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-1-2-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

													-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb408#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

													:apply(csb408#9)

														-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb409#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb409#9)

															-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb410#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

															:apply(csb410#9)

																-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-2-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-2-1-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

														-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb411#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb411#9)

															-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb412#9 = :ctf [sender(M#Msg)  .]

															:apply(csb412#9)

																-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-2-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-1-2-2-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

												-- Goal`9-1-4-1-1-1-1-1-1-2-1-1-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

										-- Goal`9-1-4-1-1-1-1-1-1-2-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

								-- Goal`9-1-4-1-1-1-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-4-1-1-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-4-1-1-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

					-- Goal`9-1-4-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb413#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

					:apply(csb413#9)

						-- Goal`9-1-4-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb414#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

						:apply(csb414#9)

							-- Goal`9-1-4-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb415#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

							:apply(csb415#9)

								-- Goal`9-1-4-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb416#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

								:apply(csb416#9)

									-- Goal`9-1-4-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb417#9 = :ctf [creator(n@Nonce)  .]

									:apply(csb417#9)

										-- Goal`9-1-4-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb418#9 = :ctf [m1?(M#Msg)  .]

										:apply(csb418#9)

											-- Goal`9-1-4-1-1-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb419#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

											:apply(csb419#9)

												-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb420#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

												:apply(csb420#9)

													-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb421#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

													:apply(csb421#9)

														-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb422#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

														:apply(csb422#9)

															-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1-1-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb423#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

														:apply(csb423#9)

															-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1-1-2-1 Success by reduction
															:apply (rd)

													-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb424#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

													:apply(csb424#9)

														-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb425#9 = :ctf [sender(M#Msg)  .]

														:apply(csb425#9)

															-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1-2-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb426#9 = :ctf [sender(M#Msg)  .]

														:apply(csb426#9)

															-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb427#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

															:apply(csb427#9)

																-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1-2-2-1-1 Success by reduction
																:apply (rd)

																-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-1-2-2-1-2 Success by implication and reduction.
																:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																:apply (rd)

												-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb428#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

												:apply(csb428#9)

													-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb429#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

													:apply(csb429#9)

														-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb430#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

														:apply(csb430#9)

															-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-2-1-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-2-1-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

													-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb431#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

													:apply(csb431#9)

														-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb432#9 = :ctf [sender(M#Msg)  .]

														:apply(csb432#9)

															-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-2-2-1-1 Success by reduction
															:apply (rd)

														-- Goal`9-1-4-1-1-2-1-1-1-1-1-1-2-2-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

											-- Goal`9-1-4-1-1-2-1-1-1-1-1-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

									-- Goal`9-1-4-1-1-2-1-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

								-- Goal`9-1-4-1-1-2-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-4-1-1-2-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-4-1-1-2-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

				-- Goal`9-1-4-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
				:def csb433#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

				:apply(csb433#9)

					-- Goal`9-1-4-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb434#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

					:apply(csb434#9)

						-- Goal`9-1-4-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb435#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

						:apply(csb435#9)

							-- Goal`9-1-4-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb436#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

							:apply(csb436#9)

								-- Goal`9-1-4-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb437#9 = :ctf [creator(n@Nonce)  .]

								:apply(csb437#9)

									-- Goal`9-1-4-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb438#9 = :ctf [m1?(M#Msg)  .]

									:apply(csb438#9)

										-- Goal`9-1-4-1-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb439#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

										:apply(csb439#9)

											-- Goal`9-1-4-1-2-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb440#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

											:apply(csb440#9)

												-- Goal`9-1-4-1-2-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb441#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

												:apply(csb441#9)

													-- Goal`9-1-4-1-2-1-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb442#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

													:apply(csb442#9)

														-- Goal`9-1-4-1-2-1-1-1-1-1-1-1-1-1-1 Success by reduction
														:apply (rd)

													-- Goal`9-1-4-1-2-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb443#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

													:apply(csb443#9)

														-- Goal`9-1-4-1-2-1-1-1-1-1-1-1-1-2-1 Success by reduction
														:apply (rd)

												-- Goal`9-1-4-1-2-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb444#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

												:apply(csb444#9)

													-- Goal`9-1-4-1-2-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb445#9 = :ctf [sender(M#Msg)  .]

													:apply(csb445#9)

														-- Goal`9-1-4-1-2-1-1-1-1-1-1-1-2-1-1 Success by reduction
														:apply (rd)

													-- Goal`9-1-4-1-2-1-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb446#9 = :ctf [sender(M#Msg)  .]

													:apply(csb446#9)

														-- Goal`9-1-4-1-2-1-1-1-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb447#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

														:apply(csb447#9)

															-- Goal`9-1-4-1-2-1-1-1-1-1-1-1-2-2-1-1 Success by reduction
															:apply (rd)

															-- Goal`9-1-4-1-2-1-1-1-1-1-1-1-2-2-1-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

											-- Goal`9-1-4-1-2-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb448#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

											:apply(csb448#9)

												-- Goal`9-1-4-1-2-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb449#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

												:apply(csb449#9)

													-- Goal`9-1-4-1-2-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb450#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

													:apply(csb450#9)

														-- Goal`9-1-4-1-2-1-1-1-1-1-1-2-1-1-1 Success by reduction
														:apply (rd)

													-- Goal`9-1-4-1-2-1-1-1-1-1-1-2-1-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

												-- Goal`9-1-4-1-2-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb451#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

												:apply(csb451#9)

													-- Goal`9-1-4-1-2-1-1-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb452#9 = :ctf [sender(M#Msg)  .]

													:apply(csb452#9)

														-- Goal`9-1-4-1-2-1-1-1-1-1-1-2-2-1-1 Success by reduction
														:apply (rd)

													-- Goal`9-1-4-1-2-1-1-1-1-1-1-2-2-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

										-- Goal`9-1-4-1-2-1-1-1-1-1-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

								-- Goal`9-1-4-1-2-1-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-4-1-2-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-4-1-2-1-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

					-- Goal`9-1-4-1-2-2 Success by implication and reduction.
					:imp [inv16]  by {n:Nonce <- n@Nonce ;}

					:apply (rd)

			-- Goal`9-1-4-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
			:def csb453#9 = :ctf {eq EVS9-1-4.SubRand  = R#Rand .}

			:apply(csb453#9)

				-- Goal`9-1-4-2-1 Success by implication and reduction.
				:imp [inv16]  by {n:Nonce <- n@Nonce ;}

				:apply (rd)

				-- Goal`9-1-4-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
				:def csb454#9 = :ctf {eq cipher3(M#Msg)  = C#EVS9-1.SubCipher3 .}

				:apply(csb454#9)

					-- Goal`9-1-4-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb455#9 = :ctf {eq creator(M#Msg)  = P#EVS9-1.SubPrin .}

					:apply(csb455#9)

						-- Goal`9-1-4-2-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb456#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

						:apply(csb456#9)

							-- Goal`9-1-4-2-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb457#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

							:apply(csb457#9)

								-- Goal`9-1-4-2-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb458#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb458#9)

									-- Goal`9-1-4-2-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb459#9 = :ctf {eq P#Prin  = P1#EVS9-1.SubPrin .}

									:apply(csb459#9)

										-- Goal`9-1-4-2-2-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb460#9 = :ctf {eq sender(M#Msg)  = P0#EVS9-1.SubPrin .}

										:apply(csb460#9)

											-- Goal`9-1-4-2-2-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb461#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

											:apply(csb461#9)

												-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb462#9 = :ctf [R#Rand \in U0#EVS9-1-4.URand  .]

												:apply(csb462#9)

													-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-1 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

													-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb463#9 = :ctf [m1?(M#Msg)  .]

													:apply(csb463#9)

														-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb464#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb464#9)

															-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb465#9 = :ctf {eq n(P1#EVS9-1.SubPrin, P0#EVS9-1.SubPrin, R#Rand)  = n@Nonce .}

															:apply(csb465#9)

																-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb466#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb466#9)

																	-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb467#9 = :ctf [P0#EVS9-1.SubPrin  .]

																:apply(csb467#9)

																	-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-2-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb468#9 = :ctf [P0#EVS9-1.SubPrin  .]

															:apply(csb468#9)

																-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb469#9 = :ctf {eq n(P1#EVS9-1.SubPrin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb469#9)

																	-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-2-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-2-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-1-2-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

												-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb470#9 = :ctf [R#Rand \in U0#EVS9-1-4.URand  .]

												:apply(csb470#9)

													-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-2-1 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

													-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb471#9 = :ctf [creator(n@Nonce)  .]

													:apply(csb471#9)

														-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb472#9 = :ctf [m1?(M#Msg)  .]

														:apply(csb472#9)

															-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-2-2-1-1 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

															-- Goal`9-1-4-2-2-1-1-1-1-1-1-1-2-2-1-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

											-- Goal`9-1-4-2-2-1-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb473#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

											:apply(csb473#9)

												-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb474#9 = :ctf [R#Rand \in U0#EVS9-1-4.URand  .]

												:apply(csb474#9)

													-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-1 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

													-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb475#9 = :ctf [m1?(M#Msg)  .]

													:apply(csb475#9)

														-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb476#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb476#9)

															-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb477#9 = :ctf {eq n(P1#EVS9-1.SubPrin, sender(M#Msg), R#Rand)  = n@Nonce .}

															:apply(csb477#9)

																-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb478#9 = :ctf [sender(M#Msg)  .]

																:apply(csb478#9)

																	-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-2-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb479#9 = :ctf [sender(M#Msg)  .]

																:apply(csb479#9)

																	-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-2-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb480#9 = :ctf [sender(M#Msg)  .]

															:apply(csb480#9)

																-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb481#9 = :ctf {eq n(P1#EVS9-1.SubPrin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb481#9)

																	-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-2-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-2-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-1-2-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

												-- Goal`9-1-4-2-2-1-1-1-1-1-1-2-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

										-- Goal`9-1-4-2-2-1-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb482#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

										:apply(csb482#9)

											-- Goal`9-1-4-2-2-1-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb483#9 = :ctf [R#Rand \in U0#EVS9-1-4.URand  .]

											:apply(csb483#9)

												-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-1 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

												-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb484#9 = :ctf [creator(n@Nonce)  .]

												:apply(csb484#9)

													-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb485#9 = :ctf [m1?(M#Msg)  .]

													:apply(csb485#9)

														-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb486#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb486#9)

															-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb487#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

															:apply(csb487#9)

																-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb488#9 = :ctf [sender(M#Msg)  .]

																:apply(csb488#9)

																	-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb489#9 = :ctf [sender(M#Msg)  .]

																:apply(csb489#9)

																	-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb490#9 = :ctf [sender(M#Msg)  .]

															:apply(csb490#9)

																-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb491#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb491#9)

																	-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2-1-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2-1-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-4-2-2-1-1-1-1-1-2-1-2-1-2 Success by implication and reduction.
														:imp [inv16]  by {n:Nonce <- n@Nonce ;}

														:apply (rd)

											-- Goal`9-1-4-2-2-1-1-1-1-1-2-2 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

									-- Goal`9-1-4-2-2-1-1-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

								-- Goal`9-1-4-2-2-1-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-4-2-2-1-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-4-2-2-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb492#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

						:apply(csb492#9)

							-- Goal`9-1-4-2-2-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb493#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

							:apply(csb493#9)

								-- Goal`9-1-4-2-2-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb494#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

								:apply(csb494#9)

									-- Goal`9-1-4-2-2-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb495#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

									:apply(csb495#9)

										-- Goal`9-1-4-2-2-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb496#9 = :ctf [R#Rand \in U0#EVS9-1-4.URand  .]

										:apply(csb496#9)

											-- Goal`9-1-4-2-2-1-2-1-1-1-1-1 Success by implication and reduction.
											:imp [inv16]  by {n:Nonce <- n@Nonce ;}

											:apply (rd)

											-- Goal`9-1-4-2-2-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb497#9 = :ctf [creator(n@Nonce)  .]

											:apply(csb497#9)

												-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb498#9 = :ctf [m1?(M#Msg)  .]

												:apply(csb498#9)

													-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb499#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

													:apply(csb499#9)

														-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb500#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb500#9)

															-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb501#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

															:apply(csb501#9)

																-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb502#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

																:apply(csb502#9)

																	-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-1-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb503#9 = :ctf [sender(M#Msg)  .]

																:apply(csb503#9)

																	-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-1-1-2-1 Success by reduction
																	:apply (rd)

															-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb504#9 = :ctf [sender(M#Msg)  .]

															:apply(csb504#9)

																-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb505#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb505#9)

																	-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-1-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-1-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

														-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb506#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

														:apply(csb506#9)

															-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb507#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

															:apply(csb507#9)

																-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb508#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

																:apply(csb508#9)

																	-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-2-1-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-2-1-2 Success by implication and reduction.
																:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																:apply (rd)

															-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb509#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

															:apply(csb509#9)

																-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb510#9 = :ctf [sender(M#Msg)  .]

																:apply(csb510#9)

																	-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-2-2-1-1 Success by reduction
																	:apply (rd)

																-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-1-2-2-2 Success by implication and reduction.
																:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																:apply (rd)

													-- Goal`9-1-4-2-2-1-2-1-1-1-1-2-1-2 Success by implication and reduction.
													:imp [inv16]  by {n:Nonce <- n@Nonce ;}

													:apply (rd)

										-- Goal`9-1-4-2-2-1-2-1-1-1-2 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

									-- Goal`9-1-4-2-2-1-2-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

								-- Goal`9-1-4-2-2-1-2-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-4-2-2-1-2-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

					-- Goal`9-1-4-2-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
					:def csb511#9 = :ctf {eq key(cipher1(M#Msg))  = P#Prin .}

					:apply(csb511#9)

						-- Goal`9-1-4-2-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
						:def csb512#9 = :ctf {eq principal(cipher1(M#Msg))  = sender(M#Msg) .}

						:apply(csb512#9)

							-- Goal`9-1-4-2-2-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
							:def csb513#9 = :ctf {eq receiver(M#Msg)  = P#Prin .}

							:apply(csb513#9)

								-- Goal`9-1-4-2-2-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
								:def csb514#9 = :ctf [M#Msg \in N0#EVS9-1.Network  .]

								:apply(csb514#9)

									-- Goal`9-1-4-2-2-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
									:def csb515#9 = :ctf [R#Rand \in U0#EVS9-1-4.URand  .]

									:apply(csb515#9)

										-- Goal`9-1-4-2-2-2-1-1-1-1-1 Success by implication and reduction.
										:imp [inv16]  by {n:Nonce <- n@Nonce ;}

										:apply (rd)

										-- Goal`9-1-4-2-2-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
										:def csb516#9 = :ctf [creator(n@Nonce)  .]

										:apply(csb516#9)

											-- Goal`9-1-4-2-2-2-1-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
											:def csb517#9 = :ctf [m1?(M#Msg)  .]

											:apply(csb517#9)

												-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
												:def csb518#9 = :ctf {eq n(P#Prin, sender(M#Msg), R#Rand)  = n@Nonce .}

												:apply(csb518#9)

													-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb519#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

													:apply(csb519#9)

														-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb520#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb520#9)

															-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb521#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

															:apply(csb521#9)

																-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb522#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

															:apply(csb522#9)

																-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1-1-2-1 Success by reduction
																:apply (rd)

														-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb523#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb523#9)

															-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb524#9 = :ctf [sender(M#Msg)  .]

															:apply(csb524#9)

																-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb525#9 = :ctf [sender(M#Msg)  .]

															:apply(csb525#9)

																-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
																:def csb526#9 = :ctf {eq n(P#Prin, intruder, R#Rand)  = n@Nonce .}

																:apply(csb526#9)

																	-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1-2-2-1-1 Success by reduction
																	:apply (rd)

																	-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-1-2-2-1-2 Success by implication and reduction.
																	:imp [inv16]  by {n:Nonce <- n@Nonce ;}

																	:apply (rd)

													-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
													:def csb527#9 = :ctf {eq nonce(C#EVS9-1.SubCipher3)  = n@Nonce .}

													:apply(csb527#9)

														-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb528#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb528#9)

															-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-2-1-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb529#9 = :ctf [key(C#EVS9-1.SubCipher3)  .]

															:apply(csb529#9)

																-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-2-1-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-2-1-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

														-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-2-2  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
														:def csb530#9 = :ctf {eq nonce(cipher1(M#Msg))  = n@Nonce .}

														:apply(csb530#9)

															-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-2-2-1  -  inv160(sdm2(S#Sys, P#Prin, R#Rand, M#Msg), n@Nonce)  - Success
															:def csb531#9 = :ctf [sender(M#Msg)  .]

															:apply(csb531#9)

																-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-2-2-1-1 Success by reduction
																:apply (rd)

															-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-1-2-2-2 Success by implication and reduction.
															:imp [inv16]  by {n:Nonce <- n@Nonce ;}

															:apply (rd)

												-- Goal`9-1-4-2-2-2-1-1-1-1-2-1-2 Success by implication and reduction.
												:imp [inv16]  by {n:Nonce <- n@Nonce ;}

												:apply (rd)

									-- Goal`9-1-4-2-2-2-1-1-1-2 Success by implication and reduction.
									:imp [inv16]  by {n:Nonce <- n@Nonce ;}

									:apply (rd)

								-- Goal`9-1-4-2-2-2-1-1-2 Success by implication and reduction.
								:imp [inv16]  by {n:Nonce <- n@Nonce ;}

								:apply (rd)

							-- Goal`9-1-4-2-2-2-1-2 Success by implication and reduction.
							:imp [inv16]  by {n:Nonce <- n@Nonce ;}

							:apply (rd)

						-- Goal`9-1-4-2-2-2-2 Success by implication and reduction.
						:imp [inv16]  by {n:Nonce <- n@Nonce ;}

						:apply (rd)

