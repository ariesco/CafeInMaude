open INV .
	:goal{
		eq [inv23 :nonexec] : inv230(S:System,P:Principal,P0:Principal,R:Random) = true .
	}

	:ind on (S:System)

	:apply(si)
-- fkm11
	:apply(tc)

	:def csb1 = :ctf [C#Cipher1 \in cenc1(nw(S#System)) .]

	:apply(csb1)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)
-- fkm12
	:apply(tc)

	:def csb2 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb2)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)
-- fkm21
	:apply(tc)

	:def csb3 = :ctf [C#Cipher2 \in cenc2(nw(S#System)) .]

	:apply(csb3)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)
-- fkm22
	:apply(tc)

	:def csb4 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb4)

	:def csb5 = :ctf [N0#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb5)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)
-- fkm31
	:apply(tc)

	:def csb6 = :ctf [C#Cipher3 \in cenc3(nw(S#System)) .]

	:apply(csb6)

	:def csb7 = :ctf {eq enc3(P0@Principal,n(P0@Principal,P@Principal,R@Random)) = C#Cipher3 .}

	:apply(csb7)

	:def csb8 = :ctf {eq m3(P@Principal,P@Principal,P0@Principal,C#Cipher3) = m3(intruder,P#Principal,P0#Principal,C#Cipher3).}

	:apply(csb8)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)
-- fkm32
	:apply(tc)

	:def csb9 = :ctf [n(P0@Principal,P@Principal,R@Random)\in cnonce(nw(S#System)) .]

	:apply(csb9)

	:def csb10 = :ctf {eq P0#Principal  = P0@Principal .}

	:apply(csb10)

	:def csb11 = :ctf {eq N#Nonce  = n(P0@Principal,P@Principal,R@Random) .}

	:apply(csb11)

	:def csb12 = :ctf {eq intruder  = P@Principal .}

	:apply(csb12)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:def csb13 = :ctf {eq intruder  = P0@Principal .}

	:apply(csb13)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:postpone . -- inv130

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:postpone . -- inv130

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:postpone . -- inv130

	:def csb14 = :ctf {eq intruder  = P0@Principal .}

	:apply(csb14)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:def csb15 = :ctf {eq intruder  = P@Principal .}

	:apply(csb15)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:def csb16 = :ctf {eq N#Nonce  = n(P0@Principal,P@Principal,R@Random) .}

	:apply(csb16)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:def csb17 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb17)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

-- init
	:apply(tc)

	:apply (rd)

-- sdm1
	:apply(tc)

	:def csb18 = :ctf [R#Random \in ur(S#System) .]

	:apply(csb18)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)
-- sdm2
	:apply(tc)

	:def csb19 = :ctf [M#Message \in nw(S#System) .]

	:apply(csb19)

	:def csb20 = :ctf [m1?(M#Message) .]

	:apply(csb20)

	:def csb21 = :ctf {eq receiver(M#Message) = P#Principal .}

	:apply(csb21)

	:def csb22 = :ctf {eq key(cipher1(M#Message)) = P#Principal .}

	:apply(csb22)

	:def csb23 = :ctf {eq principal(cipher1(M#Message)) = sender(M#Message) .}

	:apply(csb23)

	:def csb24 = :ctf [R#Random \in ur(S#System) .]

	:apply(csb24)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)
-- sdm3
	:apply(tc)

	:def csb25 = :ctf [M#Message \in nw(S#System) .]

	:apply(csb25)

	:def csb26 = :ctf [M0#Message \in nw(S#System) .]

	:apply(csb26)

	:def csb27 = :ctf [m1?(M#Message) .]

	:apply(csb27)

	:def csb28 = :ctf [m2?(M0#Message) .]

	:apply(csb28)

	:def csb29 = :ctf {eq P#Principal  = creator(M#Message) .}

	:apply(csb29)

	:def csb30 = :ctf {eq sender(M#Message) = creator(M#Message) .}

	:apply(csb30)

	:def csb31 = :ctf {eq receiver(M#Message) = sender(M0#Message) .}

	:apply(csb31)

	:def csb32 = :ctf {eq key(cipher1(M#Message)) = sender(M0#Message) .}

	:apply(csb32)

	:def csb33 = :ctf {eq principal(cipher1(M#Message)) = creator(M#Message) .}

	:apply(csb33)

	:def csb34 = :ctf {eq receiver(M0#Message) = creator(M#Message) .}

	:apply(csb34)

	:def csb35 = :ctf {eq key(cipher2(M0#Message)) = creator(M#Message) .}

	:apply(csb35)

	:def csb36 = :ctf {eq principal(cipher2(M0#Message)) = sender(M0#Message) .}

	:apply(csb36)

	:def csb37 = :ctf {eq P0@Principal  = sender(M0#Message) .}

	:apply(csb37)

	:def csb38 = :ctf {eq nonce(cipher1(M#Message)) = n(creator(M#Message),sender(M0#Message),R#Random) .}

	:apply(csb38)

	:def csb39 = :ctf {eq nonce1(cipher2(M0#Message)) = n(creator(M#Message),sender(M0#Message),R#Random) .}

	:apply(csb39)

	:def csb40 = :ctf {eq nonce2(cipher2(M0#Message)) = n(sender(M0#Message),P@Principal,R@Random) .}

	:apply(csb40)

	:def csb41 = :ctf {eq sender(M0#Message) = intruder .}

	:apply(csb41)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:def csb42 = :ctf {eq P@Principal  = intruder .}

	:apply(csb42)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:def csb43 = :ctf {eq P@Principal  = creator(M#Message) .}

	:apply(csb43)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:def csb44 = :ctf [enc3(sender(M0#Message),n(sender(M0#Message),P@Principal,R@Random))\in cenc3(nw(S#System)) .]

	:apply(csb44)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:def csb45 = :ctf [m3(P@Principal,P@Principal,sender(M0#Message),enc3(sender(M0#Message),n(sender(M0#Message),P@Principal,R@Random)))\in nw(S#System)
    .]

	:apply(csb45)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:def csb46 = :ctf {eq creator(M#Message) = intruder .}

	:apply(csb46)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:postpone . -- inv13

	:def csb47 = :ctf [m2(sender(M0#Message),sender(M0#Message),creator(M#Message),enc2(creator(M#Message),n(creator(M#Message),sender(M0#Message),
    R#Random),n(sender(M0#Message),P@Principal,R@Random),sender(M0#Message)))\in nw(S#System) .]

	:apply(csb47)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:postpone . -- inv26

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:postpone . -- inv17

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:def csb48 = :ctf {eq nonce(cipher1(M#Message)) = n(creator(M#Message),sender(M0#Message),R#Random) .}

	:apply(csb48)

	:def csb49 = :ctf {eq nonce1(cipher2(M0#Message)) = n(creator(M#Message),sender(M0#Message),R#Random) .}

	:apply(csb49)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv23] by {P0:Principal <- P0@Principal ; P:Principal <- P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

close