open INV .
	:goal{
		eq [inv12 :nonexec] : inv120(S:Sys,C:Cipher3) = true .
	}

	:ind on (S:Sys)

	:apply(si)

-- fkm11
	:apply(tc)

	:def csb1 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys)) .]

	:apply(csb1)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

-- fkm12
	:apply(tc)

	:def csb2 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb2)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

-- fkm21
	:apply(tc)

	:def csb3 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys)) .]

	:apply(csb3)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

-- fkm22
	:apply(tc)

	:def csb4 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb4)

	:def csb5 = :ctf [N0#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb5)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

-- fkm31
	:apply(tc)

	:def csb6 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys)) .]

	:apply(csb6)

	:def csb7 = :ctf {eq C@Cipher3  = C#Cipher3 .}

	:apply(csb7)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

-- fkm32
	:apply(tc)

	:def csb8 = :ctf [N#Nonce \in cnonce(nw(S#Sys)) .]

	:apply(csb8)

	:def csb9 = :ctf {eq C@Cipher3  = enc3(P0#Prin,N#Nonce) .}

	:apply(csb9)

	:def csb10 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb10)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

-- init
	:apply(tc)

	:apply (rd)

-- sdm1
	:apply(tc)

	:def csb11 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb11)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

-- sdm2
	:apply(tc)

	:def csb12 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb12)

	:def csb13 = :ctf [m1?(M#Msg) .]

	:apply(csb13)

	:def csb14 = :ctf {eq receiver(M#Msg) = P#Prin .}

	:apply(csb14)

	:def csb15 = :ctf {eq key(cipher1(M#Msg)) = P#Prin .}

	:apply(csb15)

	:def csb16 = :ctf {eq principal(cipher1(M#Msg)) = sender(M#Msg) .}

	:apply(csb16)

	:def csb17 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(csb17)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

-- sdm3
	:apply(tc)

	:def csb18 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(csb18)

	:def csb19 = :ctf [M0#Msg \in nw(S#Sys) .]

	:apply(csb19)

	:def csb20 = :ctf [m1?(M#Msg) .]

	:apply(csb20)

	:def csb21 = :ctf [m2?(M0#Msg) .]

	:apply(csb21)

	:def csb22 = :ctf {eq creator(M#Msg) = P#Prin .}

	:apply(csb22)

	:def csb23 = :ctf {eq sender(M#Msg) = P#Prin .}

	:apply(csb23)

	:def csb24 = :ctf {eq receiver(M#Msg) = sender(M0#Msg) .}

	:apply(csb24)

	:def csb25 = :ctf {eq key(cipher1(M#Msg)) = sender(M0#Msg) .}

	:apply(csb25)

	:def csb26 = :ctf {eq nonce(cipher1(M#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb26)

	:def csb27 = :ctf {eq principal(cipher1(M#Msg)) = P#Prin .}

	:apply(csb27)

	:def csb28 = :ctf {eq receiver(M0#Msg) = P#Prin .}

	:apply(csb28)

	:def csb29 = :ctf {eq key(cipher2(M0#Msg)) = P#Prin .}

	:apply(csb29)

	:def csb30 = :ctf {eq nonce1(cipher2(M0#Msg)) = n(P#Prin,sender(M0#Msg),R#Rand) .}

	:apply(csb30)

	:def csb31 = :ctf {eq principal(cipher2(M0#Msg)) = sender(M0#Msg) .}

	:apply(csb31)

	:def csb32 = :ctf {eq C@Cipher3  = enc3(sender(M0#Msg),nonce2(cipher2(M0#Msg))) .}

	:apply(csb32)

	:def csb33 = :ctf {eq sender(M0#Msg) = intruder .}

	:apply(csb33)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

	:imp [inv12] by {C:Cipher3 <- C@Cipher3 ;}

	:apply (rd)

close
