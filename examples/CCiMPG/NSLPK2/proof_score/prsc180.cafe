--> I) Base case
--> init
open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
  red inv180(init,p,q,p1,r,n) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm11(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm11(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm12(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm12(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm21(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm21(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm22(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm22(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm22(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .

  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq intruder = p .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .

  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq (intruder = p) = false .
  eq intruder = q .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .

  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq (intruder = p) = false .
  eq (intruder = q) = false .
  eq m3(p,p,q,enc3(q,n(q,p,r))) \in nw(s) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .

  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq (intruder = p) = false .
  eq (intruder = q) = false .
  eq m3(p,p,q,enc3(q,n(q,p,r))) \in nw(s) = false .
	red inv230(s,p,q,r) implies inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .

  eq p1 = intruder .
  eq r1 = p .
  eq (r2 = q) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .

  eq p1 = intruder .
  eq (r1 = p) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .
  eq (p1 = intruder) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq (r3 = enc3(q,n(q,p,r))) = false .
	eq (r3 \in cenc3(nw(s))) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq (r3 = enc3(q,n(q,p,r))) = false .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq q = intruder .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq (q = intruder) = false .
  eq p = intruder .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq (q = intruder) = false .
  eq (p = intruder) = false .
	red inv130(s,n(q,p,r)) implies inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq p1 = intruder .
  eq r1 = p .
  eq (r2 = q) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq p1 = intruder .
  eq (r1 = p) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq (p1 = intruder) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq (r3 = n(q,p,r)) = false .
  eq r3 \in cnonce(nw(s)) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq (r3 = n(q,p,r)) = false .
  eq r3 \in cnonce(nw(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm1(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm1(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq q = intruder .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (q = intruder) = false .

  eq r1 = q .
  eq sender(r3) = p .
  eq nonce(cipher1(r3)) = n .
  eq r = r2 .

  eq enc3(q,n(q,p,r2)) \in cenc3(nw(s)) = true .
	red inv240(s,p,q,r) implies inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (q = intruder) = false .

  eq r1 = q .
  eq sender(r3) = p .
  eq nonce(cipher1(r3)) = n .
  eq r = r2 .

  eq enc3(q,n(q,p,r2)) \in cenc3(nw(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close


open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (q = intruder) = false .

  eq r1 = q .
  eq sender(r3) = p .
  eq nonce(cipher1(r3)) = n .
  eq (r = r2) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (q = intruder) = false .

  eq r1 = q .
  eq sender(r3) = p .
  eq (nonce(cipher1(r3)) = n) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (q = intruder) = false .

  eq r1 = q .
  eq (sender(r3) = p) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (q = intruder) = false .

  eq (r1 = q) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq (key(cipher1(r3)) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq (receiver(r3) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq (receiver(r4) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq (receiver(r3) = sender(r4)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq (sender(r3) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(inv18)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :proof(inv18)
close