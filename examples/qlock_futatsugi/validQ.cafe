-- formal parameter for VALIDq
--  pred q : Ste Ste
-- defines a relation between current and next states
-- that is to be checked
mod* STE {[Ste] pred q : Ste Ste}
--
-- a module for defining valid-q
mod! VALIDq (X :: STE) {inc(RWL)
-- information constructor
[Info] op i : Ste Ste Bool -> Info .
-- for checking conditions of ctrans rules
pred (_then_) : Bool Bool .
eq (true  then B:Bool) = B .
eq (false then B:Bool) = true .
-- predicate to be checked for s:Ste
pred valid-q : Ste Ste Bool .
eq valid-q(S:Ste,SS:Ste,CC:Bool) =
     not(S =(*,1)=>+ SS if CC suchThat
         not((CC then q(S, SS)) == true) {i(S,SS,CC)}) .
}

provide VALIDq


eof


