-- init
open CLOUD .
  :id(cloud)

  ops i k : -> Client .
  red inv3(init,i,k) .
close

-- modval
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq statusp(s,j) = idlep .
  red inv3(s,i,k) implies inv3(modval(s,j),i,k) .
close
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq (statusp(s,j) = idlep) = false .
  red inv3(s,i,k) implies inv3(modval(s,j),i,k) .
close

-- getval
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq statusp(s,j) = idlep .
  eq statusc(s) = idlec .
  eq i = j .
  red inv3(s,i,k) implies inv3(getval(s,j),i,k) .
close
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq statusp(s,j) = idlep .
  eq statusc(s) = idlec .
  eq (i = j) = false  .
  red inv5(s,i) implies inv3(s,i,k) implies inv3(getval(s,j),i,k) .
close
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq statusp(s,j) = idlep .
  eq (statusc(s) = idlec) = false .
  red inv3(s,i,k) implies inv3(getval(s,j),i,k) .
close
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq (statusp(s,j) = idlep) = false .
  red inv3(s,i,k) implies inv3(getval(s,j),i,k) .
close

-- update
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq statusc(s) = busy .
  eq statusp(s,j) = gotval .
  eq k = j .
  red inv3(s,i,k) implies inv3(update(s,j),i,k) .
close
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq statusc(s) = busy .
  eq statusp(s,j) = gotval .
  eq (k = j) = false .
  red inv4(s,j,k) implies inv3(s,i,k) implies inv3(update(s,j),i,k) .
close
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq statusc(s) = busy .
  eq (statusp(s,j) = gotval) = false .
  red inv3(s,i,k) implies inv3(update(s,j),i,k) .
close
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq (statusc(s) = busy) = false .
  red inv3(s,i,k) implies inv3(update(s,j),i,k) .
close

-- gotoidle
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq statusc(s) = busy .
  eq statusp(s,j) = updated .
  eq k = j .
  red inv3(s,i,k) implies inv3(gotoidle(s,j),i,k) .
close
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq statusc(s) = busy .
  eq statusp(s,j) = updated .
  eq (k = j) = false .
  red inv3(s,j,k) implies inv3(s,i,k) implies inv3(gotoidle(s,j),i,k) .
close
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq statusc(s) = busy .
  eq (statusp(s,j) = updated) = false .
  red inv3(s,i,k) implies inv3(gotoidle(s,j),i,k) .
close
open CLOUD .
  :id(cloud)

  op s : -> Sys .
  ops i j k : -> Client .
  eq [inv1 :nonexec] : inv1(s,K:Client) = true .
  eq [inv2 :nonexec] : inv2(s,K:Client) = true .
  eq [inv3 :nonexec] : inv3(s,K1:Client,K2:Client) = true .
  eq [inv4 :nonexec] : inv4(s,K1:Client,K2:Client) = true .
  eq [inv5 :nonexec] : inv5(s,K1:Client) = true .
  eq [inv6 :nonexec] : inv6(s,K1:Client) = true .
  eq [inv7 :nonexec] : inv7(s,K1:Client,K2:Client) = true .
  eq (statusc(s) = busy) = false .
  red inv3(s,i,k) implies inv3(gotoidle(s,j),i,k) .
close

-- QED
