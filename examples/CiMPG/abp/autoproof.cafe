open ABP .
	:goal{
		eq [proofABP :nonexec] : inv10(S:Sys,B:Bit) = true .
		eq [proofABP1 :nonexec] : inv4(S:Sys,B:Bit) = true .
		eq [proofABP2 :nonexec] : inv5(S:Sys,B:Bit) = true .
	}

	:ind on (S:Sys)

	:apply(si)

	:apply(tc)

	:apply (rd)

	:apply (rd)

	:apply (rd)

	:apply(tc)

	:def csb1 = :cevs [ac(S#Sys) .]

	:apply(csb1)

	:imp [proofABP] by {B:Bit <- B@Bit ;}

	:apply (rd)

	:def csb2 = :ctf {eq sb(S#Sys) = B@Bit .}

	:apply(csb2)

	:def csb3 = :ctf {eq B@Bit  = B0EVS21Bit .}

	:apply(csb3)

	:imp [proofABP] by {B:Bit <- B@Bit ;}

	:apply (rd)

	:def csb4 = :ctf [B@Bit \in B0#EVS21BSeq  .]

	:apply(csb4)

	:imp [proofABP] by {B:Bit <- B@Bit ;}

	:imp [proofABP1] by {B:Bit <- B@Bit ;}

	:apply (rd)

	:imp [proofABP] by {B:Bit <- B@Bit ;}

	:apply (rd)

	:def csb5 = :ctf [B@Bit \in B0#EVS21BSeq  .]

	:apply(csb5)

	:def csb6 = :ctf {eq rb(S#Sys) = sb(S#Sys).}

	:apply(csb6)

	:def csb7 = :ctf {eq sb(S#Sys) = B0EVS21Bit .}

	:apply(csb7)

	:imp [proofABP] by {B:Bit <- B@Bit ;}

	:apply (rd)

	:imp [proofABP] by {B:Bit <- B@Bit ;}

	:apply (rd)

	:def csb8 = :ctf {eq sb(S#Sys) = B0EVS21Bit .}

	:apply(csb8)



 :desc proof
close

