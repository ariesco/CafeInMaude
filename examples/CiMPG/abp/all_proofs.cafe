-- init
open ABP .
  :id(proofABP)
  red inv1(init) .
close

-- snd1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  red inv1(s) implies inv1(snd1(s)) .
close

-- rec1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv1(s) implies inv1(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq sb(s) = b10 .
  red inv1(s) implies inv1(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq rb(s) = b10 .
  eq psr(s) = mksq(p2s(s)) .
  red inv1(s) implies inv1(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq rb(s) = b10 .
  eq (psr(s) = mksq(p2s(s))) = false .
  red inv1(s) implies inv1(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq (rb(s) = b10) = false .
  red inv2(s) implies inv1(s) implies inv1(rec1(s)) .
close

-- snd2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  red inv1(s) implies inv1(snd2(s)) .
close

-- rec2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv1(s) implies inv1(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (rb(s) = b10) = false .
  red inv1(s) implies inv1(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq (p2s(s) = p10) = false .
  red inv3(s) implies inv1(s) implies inv1(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq p2s(s) = p10 .
  eq sb(s) = b10 .
  red inv1(s) implies inv1(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq p2s(s) = p10 .
  eq (sb(s) = b10) = false .
  red inv3(s) implies inv1(s) implies inv1(rec2(s)) .
close

-- dup1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv1(s) implies inv1(dup1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv1(s) implies inv1(dup1(s)) .
close

-- drp1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv1(s) implies inv1(drp1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv1(s) implies inv1(drp1(s)) .
close

-- dup2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv1(s) implies inv1(dup2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv1(s) implies inv1(dup2(s)) .
close

-- drp2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv1(s) implies inv1(drp2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv1(s) implies inv1(drp2(s)) .
close

--
-- QED
--


--
--                                inv02
--

-- init
open ABP .
  :id(proofABP)
  red inv2(init) .
close

-- snd1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  red inv2(s) implies inv2(snd1(s)) .
close

-- rec1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv2(s) implies inv2(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = e .
  red inv2(s) implies inv2(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq sb(s) = b10 .
  red inv5(s,b20) implies inv2(s) implies inv2(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq (sb(s) = b10) = false .
  eq rb(s) = b10 .
  red inv4(s,b20) implies inv2(s) implies inv2(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq (sb(s) = b10) = false .
  eq (rb(s) = b10) = false .
  red inv2(s) implies inv2(rec1(s)) .
close

-- snd2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv2(s) implies inv2(snd2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv2(s) implies inv2(snd2(s)) .
close

-- rec2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv2(s) implies inv2(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq sb(s) = b10 .
  red inv2(s) implies inv2(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq (sb(s) = b10) = false .
  red inv3(s) implies inv2(s) implies inv2(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (rb(s) = b10) = false .
  red inv2(s) implies inv2(rec2(s)) .
close

-- dup1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv2(s) implies inv2(dup1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv2(s) implies inv2(dup1(s)) .
close

-- drp1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv2(s) implies inv2(drp1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv2(s) implies inv2(drp1(s)) .
close

-- dup2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv2(s) implies inv2(dup2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv2(s) implies inv2(dup2(s)) .
close

-- drp2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv2(s) implies inv2(drp2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = e .
  red inv2(s) implies inv2(drp2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  red inv5(s,b20) implies inv2(s) implies inv2(drp2(s)) .
close

--
-- QED
--


--
--                                 inv03
--

-- init
open ABP .
  :id(proofABP)
  red inv3(init) .
close

-- snd1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv3(s) implies inv3(snd1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv3(s) implies inv3(snd1(s)) .
close

-- rec1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv3(s) implies inv3(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq sb(s) = b10 .
  red inv3(s) implies inv3(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq rb(s) = b10 .
  eq p2s(s) = 1st(hd(dc(s))) .
  eq 2nd(hd(dc(s))) = sb(s) .
  red inv3(s) implies inv3(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq rb(s) = b10 .
  eq p2s(s) = 1st(hd(dc(s))) .
  eq (2nd(hd(dc(s))) = sb(s)) = false .
  red inv3(s) implies inv3(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq rb(s) = b10 .
  eq (p2s(s) = 1st(hd(dc(s)))) = false .
  red inv3(s) implies inv3(rec1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq (rb(s) = b10) = false .
  red inv2(s) implies inv3(s) implies inv3(rec1(s)) .
close

-- snd2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  red inv3(s) implies inv3(snd2(s)) .
close

-- rec2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv3(s) implies inv3(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = e .
  red inv3(s) implies inv3(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq rb(s) = b10 .
  eq p10 = p20 .
  eq b10 = b20 .
  red inv3(s) implies inv3(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq rb(s) = b10 .
  eq p10 = p20 .
  eq (b10 = b20) = false .
  red inv6(s,p20,b20) implies inv3(s) implies inv3(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq rb(s) = b10 .
  eq (p10 = p20) = false .
  red inv6(s,p20,b20) implies inv3(s) implies inv3(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (rb(s) = b10) = false .
  eq p20 = p10 .
  eq b20 = b10 .
  red inv3(s) implies inv3(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (rb(s) = b10) = false .
  eq p20 = p10 .
  eq (b20 = b10) = false .
  red inv7(s,p20,b20) implies inv3(s) implies inv3(rec2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (rb(s) = b10) = false .
  eq (p20 = p10) = false .
  red inv7(s,p20,b20) implies inv3(s) implies inv3(rec2(s)) .
close

-- dup1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv3(s) implies inv3(dup1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv3(s) implies inv3(dup1(s)) .
close

-- drp1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv3(s) implies inv3(drp1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = e .
  red inv3(s) implies inv3(drp1(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  red inv7(s,p20,b20) implies inv3(s) implies inv3(drp1(s)) .
close

-- dup2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv3(s) implies inv3(dup2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv3(s) implies inv3(dup2(s)) .
close

-- drp2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv3(s) implies inv3(drp2(s)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv3(s) implies inv3(drp2(s)) .
close

--
-- QED
--


--
--                                 inv04
--

-- init
open ABP .
  :id(proofABP)
  op b : -> Bit .
  red inv4(init,b) .
close

-- snd1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  red inv4(s,b) implies inv4(snd1(s),b) .
close

-- rec1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv4(s,b) implies inv4(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = e .
  red inv4(s,b) implies inv4(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq b = b20 .
  red inv4(s,b) implies inv4(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq (b = b20) = false .
  eq b \in bs20 = true .
  eq b10 = b20 .
  eq sb(s) = b20 .
  red inv4(s,b) implies inv4(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq (b = b20) = false .
  eq b \in bs20 = true .
  eq b10 = b20 .
  eq (sb(s) = b20) = false .
  red inv4(s,b) implies inv4(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq (b = b20) = false .
  eq b \in bs20 = true .
  eq (b10 = b20) = false .
  red inv8(s,b10,b20,b,e,bs20) implies inv4(s,b) implies inv4(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq (b = b20) = false .
  eq b \in bs20 = false .
  red inv4(s,b) implies inv4(rec1(s),b) .
close

-- snd2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  eq rb(s) = b .
  red inv4(s,b) implies inv4(snd2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  eq (rb(s) = b) = false .
  red inv4(s,b) implies inv4(snd2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq b10 = b .
  red inv4(s,b) implies inv4(snd2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (b10 = b) = false .
  eq b \in bs10 = true .
  red inv4(s,b) implies inv4(snd2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (b10 = b) = false .
  eq b \in bs10 = false .
  eq rb(s) = b .
  red inv2(s) implies inv4(s,b) implies inv4(snd2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (b10 = b) = false .
  eq b \in bs10 = false .
  eq (rb(s) = b) = false .
  red inv4(s,b) implies inv4(snd2(s),b) .
close

-- rec2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv4(s,b) implies inv4(rec2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv4(s,b) implies inv4(rec2(s),b) .
close

-- dup1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv4(s,b) implies inv4(dup1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv4(s,b) implies inv4(dup1(s),b) .
close

-- drp1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv4(s,b) implies inv4(drp1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv4(s,b) implies inv4(drp1(s),b) .
close

-- dup2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv4(s,b) implies inv4(dup2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv4(s,b) implies inv4(dup2(s),b) .
close

-- drp2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv4(s,b) implies inv4(drp2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = e .
  red inv4(s,b) implies inv4(drp2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq b = b20 .
  red inv4(s,b) implies inv4(drp2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq (b = b20) = false .
  eq b \in bs20 = true .
  eq b10 = b20 .
  red inv4(s,b) implies inv4(drp2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq (b = b20) = false .
  eq b \in bs20 = true .
  eq (b10 = b20) = false .
  red inv8(s,b10,b20,b,e,bs20) implies inv4(s,b) implies inv4(drp2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq (b = b20) = false .
  eq b \in bs20 = false .
  red inv4(s,b) implies inv4(drp2(s),b) .
close

--
-- QED
--


--
--                                inv05
--

-- init
open ABP .
  :id(proofABP)
  op b : -> Bit .
  red inv5(init,b) .
close

-- snd1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  red inv5(s,b) implies inv5(snd1(s),b) .
close

-- rec1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv5(s,b) implies inv5(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = e .
  red inv5(s,b) implies inv5(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq sb(s) = b10 .
  red inv5(s,b) implies inv5(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq (sb(s) = b10) = false .
  eq b = b10 .
  red inv5(s,b) implies inv5(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = b20,bs20 .
  eq (sb(s) = b10) = false .
  eq (b = b10) = false .
  red inv4(s,b) implies inv5(s,b) implies inv5(rec1(s),b) .
close

-- snd2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv5(s,b) implies inv5(snd2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq b10 = b .
  red inv5(s,b) implies inv5(snd2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (b10 = b) = false .
  eq b \in bs10 = true .
  red inv5(s,b) implies inv5(snd2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (b10 = b) = false .
  eq b \in bs10 = false .
  eq rb(s) = b .
  red inv2(s) implies inv5(s,b) implies inv5(snd2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (b10 = b) = false .
  eq b \in bs10 = false .
  eq (rb(s) = b) = false .
  red inv5(s,b) implies inv5(snd2(s),b) .
close

-- rec2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv5(s,b) implies inv5(rec2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq sb(s) = b10 .
  red inv5(s,b) implies inv5(rec2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq (sb(s) = b10) = false .
  red inv3(s) implies inv5(s,b) implies inv5(rec2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (rb(s) = b10) = false .
  red inv5(s,b) implies inv5(rec2(s),b) .
close

-- dup1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv5(s,b) implies inv5(dup1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv5(s,b) implies inv5(dup1(s),b) .
close

-- drp1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv5(s,b) implies inv5(drp1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv5(s,b) implies inv5(drp1(s),b) .
close

-- dup2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv5(s,b) implies inv5(dup2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv5(s,b) implies inv5(dup2(s),b) .
close

-- drp2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv5(s,b) implies inv5(drp2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv5(s,b) implies inv5(drp2(s),b) .
close

--
-- QED
--


--
--                                 inv06
--

-- init
open ABP .
  :id(proofABP)
  op p : -> Packet .
  op b : -> Bit .
  red inv6(init,p,b) .
close

-- snd1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv6(s,p,b) implies inv6(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq p10 = p .
  eq b10 = b .
  red inv6(s,p,b) implies inv6(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq p10 = p .
  eq (b10 = b) = false .
  eq < p,b > \in prs10 = true .
  red inv6(s,p,b) implies inv6(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq p10 = p .
  eq (b10 = b) = false .
  eq < p,b > \in prs10 = false .
  eq rb(s) = b10 .
  eq sb(s) = b .
  red inv3(s) implies inv6(s,p,b) implies inv6(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq p10 = p .
  eq (b10 = b) = false .
  eq < p,b > \in prs10 = false .
  eq rb(s) = b10 .
  eq (sb(s) = b) = false .
  red inv6(s,p,b) implies inv6(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq p10 = p .
  eq (b10 = b) = false .
  eq < p,b > \in prs10 = false .
  eq (rb(s) = b10) = false .
  red inv6(s,p,b) implies inv6(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (p10 = p) = false .
  eq < p,b > \in prs10 = true .
  red inv6(s,p,b) implies inv6(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (p10 = p) = false .
  eq < p,b > \in prs10 = false .
  eq rb(s) = b10 .
  eq p2s(s) = p .
  red inv3(s) implies inv6(s,p,b) implies inv6(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (p10 = p) = false .
  eq < p,b > \in prs10 = false .
  eq rb(s) = b10 .
  eq (p2s(s) = p) = false .
  red inv6(s,p,b) implies inv6(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (p10 = p) = false .
  eq < p,b > \in prs10 = false .
  eq (rb(s) = b10) = false .
  red inv6(s,p,b) implies inv6(snd1(s),p,b) .
close

-- rec1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv6(s,p,b) implies inv6(rec1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv6(s,p,b) implies inv6(rec1(s),p,b) .
close

-- snd2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  red inv6(s,p,b) implies inv6(snd2(s),p,b) .
close

-- rec2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = e .
  red inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq b20 = b .
  red inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq p10 = p .
  eq b10 = b .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq p10 = p .
  eq (b10 = b) = false .
  eq b10 = b20 .
  eq rb(s) = b20 .
  red inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq p10 = p .
  eq (b10 = b) = false .
  eq b10 = b20 .
  eq (rb(s) = b20) = false .
  red inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq p10 = p .
  eq (b10 = b) = false .
  eq (b10 = b20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq (p10 = p) = false .
  eq b10 = b20 .
  eq rb(s) = b20 .
  red inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq (p10 = p) = false .
  eq b10 = b20 .
  eq (rb(s) = b20) = false .
  red inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq (p10 = p) = false .
  eq (b10 = b20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = false .
  red inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p20 = p) = false .
  eq b10 = b20 .
  eq rb(s) = b20 .
  red inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p20 = p) = false .
  eq b10 = b20 .
  eq (rb(s) = b20) = false .
  red inv6(s,p,b) implies inv6(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p20 = p) = false .
  eq (b10 = b20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv6(s,p,b) implies inv6(rec2(s),p,b) .
close

-- dup1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv6(s,p,b) implies inv6(dup1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv6(s,p,b) implies inv6(dup1(s),p,b) .
close

-- drp1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = e .
  red inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq b20 = b .
  red inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq p10 = p .
  eq b10 = b .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq p10 = p .
  eq (b10 = b) = false .
  eq b10 = b20 .
  eq rb(s) = b20 .
  red inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq p10 = p .
  eq (b10 = b) = false .
  eq b10 = b20 .
  eq (rb(s) = b20) = false .
  red inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq p10 = p .
  eq (b10 = b) = false .
  eq (b10 = b20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq (p10 = p) = false .
  eq b10 = b20 .
  eq rb(s) = b20 .
  red inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq (p10 = p) = false .
  eq b10 = b20 .
  eq (rb(s) = b20) = false .
  red inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = true .
  eq (p10 = p) = false .
  eq (b10 = b20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p20 = p .
  eq (b20 = b) = false .
  eq < p,b > \in prs20 = false .
  red inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p20 = p) = false .
  eq < p,b > \in prs20 = true .
  eq p10 = p .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p20 = p) = false .
  eq < p,b > \in prs20 = true .
  eq (p10 = p) = false .
  eq rb(s) = b20 .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p20 = p) = false .
  eq < p,b > \in prs20 = true .
  eq (p10 = p) = false .
  eq (rb(s) = b20) = false .
  red inv6(s,p,b) implies inv6(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p20 = p) = false .
  eq < p,b > \in prs20 = false .
  red inv6(s,p,b) implies inv6(drp1(s),p,b) .
close

-- dup2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv6(s,p,b) implies inv6(dup2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv6(s,p,b) implies inv6(dup2(s),p,b) .
close

-- drp2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv6(s,p,b) implies inv6(drp2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv6(s,p,b) implies inv6(drp2(s),p,b) .
close

--
-- QED
--


--
--                                 inv07
--

-- init
open ABP .
  :id(proofABP)
  op p : -> Packet .
  op b : -> Bit .
  red inv7(init,p,b) .
close

-- snd1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv7(s,p,b) implies inv7(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq p10 = p .
  eq b10 = b .
  red inv7(s,p,b) implies inv7(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq p10 = p .
  eq (b10 = b) = false .
  eq < p,b > \in prs10 = true .
  red inv7(s,p,b) implies inv7(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq p10 = p .
  eq (b10 = b) = false .
  eq < p,b > \in prs10 = false .
  eq p2s(s) = p .
  eq sb(s) = b .
  red inv7(s,p,b) implies inv7(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq p10 = p .
  eq (b10 = b) = false .
  eq < p,b > \in prs10 = false .
  eq p2s(s) = p .
  eq (sb(s) = b) = false .
  red inv7(s,p,b) implies inv7(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq p10 = p .
  eq (b10 = b) = false .
  eq < p,b > \in prs10 = false .
  eq (p2s(s) = p) = false .
  red inv7(s,p,b) implies inv7(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (p10 = p) = false .
  eq < p,b > \in prs10 = true .
  red inv7(s,p,b) implies inv7(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (p10 = p) = false .
  eq < p,b > \in prs10 = false .
  eq p2s(s) = p .
  eq sb(s) = b .
  red inv7(s,p,b) implies inv7(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (p10 = p) = false .
  eq < p,b > \in prs10 = false .
  eq p2s(s) = p .
  eq (sb(s) = b) = false .
  red inv7(s,p,b) implies inv7(snd1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (p10 = p) = false .
  eq < p,b > \in prs10 = false .
  eq (p2s(s) = p) = false .
  red inv7(s,p,b) implies inv7(snd1(s),p,b) .
close

-- rec1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv7(s,p,b) implies inv7(rec1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq sb(s) = b10 .
  red inv7(s,p,b) implies inv7(rec1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq b = b10 .
  red inv7(s,p,b) implies inv7(rec1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq (b = b10) = false .
  eq < p,b > \in dc(s) = true .
  eq rb(s) = b .
  eq sb(s) = b .
  red inv2(s) implies inv7(s,p,b) implies inv7(rec1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq (b = b10) = false .
  eq < p,b > \in dc(s) = true .
  eq rb(s) = b .
  eq (sb(s) = b) = false .
  red inv7(s,p,b) implies inv7(rec1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq (b = b10) = false .
  eq < p,b > \in dc(s) = true .
  eq (rb(s) = b) = false .
  red inv7(s,p,b) implies inv7(rec1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq (b = b10) = false .
  eq < p,b > \in dc(s) = false .
  red inv7(s,p,b) implies inv7(rec1(s),p,b) .
close

-- snd2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  red inv7(s,p,b) implies inv7(snd2(s),p,b) .
close

-- rec2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = e .
  red inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq b10 = b20 .
  eq rb(s) = b20 .
  eq p = p20 .
  eq b = b20 .
  red inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq b10 = b20 .
  eq rb(s) = b20 .
  eq p = p20 .
  eq (b = b20) = false .
  red inv6(s,p,b) implies inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq b10 = b20 .
  eq rb(s) = b20 .
  eq (p = p20) = false .
  red inv6(s,p,b) implies inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq b10 = b20 .
  eq (rb(s) = b20) = false .
  red inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq (b10 = b20) = false .
  eq rb(s) = b20 .
  red inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq (b10 = b20) = false .
  eq (rb(s) = b20) = false .
  eq p = p20 .
  eq b = b20 .
  eq sb(s) = b20 .
  eq p2s(s) = p20 .
  red inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq (b10 = b20) = false .
  eq (rb(s) = b20) = false .
  eq p = p20 .
  eq b = b20 .
  eq sb(s) = b20 .
  eq (p2s(s) = p20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq (b10 = b20) = false .
  eq (rb(s) = b20) = false .
  eq p = p20 .
  eq b = b20 .
  eq (sb(s) = b20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq (b10 = b20) = false .
  eq (rb(s) = b20) = false .
  eq p = p20 .
  eq (b = b20) = false .
  eq rb(s) = b10 .
  eq sb(s) = b .
  eq p2s(s) = p .
  red inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq (b10 = b20) = false .
  eq (rb(s) = b20) = false .
  eq p = p20 .
  eq (b = b20) = false .
  eq rb(s) = b10 .
  eq sb(s) = b .
  eq (p2s(s) = p) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq (b10 = b20) = false .
  eq (rb(s) = b20) = false .
  eq p = p20 .
  eq (b = b20) = false .
  eq rb(s) = b10 .
  eq (sb(s) = b) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq (b10 = b20) = false .
  eq (rb(s) = b20) = false .
  eq p = p20 .
  eq (b = b20) = false .
  eq (rb(s) = b10) = false .
  red inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq p10 = p20 .
  eq (b10 = b20) = false .
  eq (rb(s) = b20) = false .
  eq (p = p20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p10 = p20) = false .
  eq rb(s) = b20 .
  eq p = p20 .
  eq b = b20 .
  red inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p10 = p20) = false .
  eq rb(s) = b20 .
  eq p = p20 .
  eq (b = b20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p10 = p20) = false .
  eq rb(s) = b20 .
  eq (p = p20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p10 = p20) = false .
  eq (rb(s) = b20) = false .
  eq p = p20 .
  eq b = b20 .
  eq rb(s) = b20 .
  red inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p10 = p20) = false .
  eq (rb(s) = b20) = false .
  eq p = p20 .
  eq b = b20 .
  eq (rb(s) = b20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p10 = p20) = false .
  eq (rb(s) = b20) = false .
  eq p = p20 .
  eq (b = b20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv7(s,p,b) implies inv7(rec2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = < p20,b20 >,prs20 .
  eq (p10 = p20) = false .
  eq (rb(s) = b20) = false .
  eq (p = p20) = false .
  red inv9(s,b10,b20,b,p10,p20,p,e,prs20)
      implies inv7(s,p,b) implies inv7(rec2(s),p,b) .
close

-- dup1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv7(s,p,b) implies inv7(dup1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv7(s,p,b) implies inv7(dup1(s),p,b) .
close

-- drp1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv7(s,p,b) implies inv7(drp1(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv7(s,p,b) implies inv7(drp1(s),p,b) .
close

-- dup2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv7(s,p,b) implies inv7(dup2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv7(s,p,b) implies inv7(dup2(s),p,b) .
close

-- drp2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv7(s,p,b) implies inv7(drp2(s),p,b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op p : -> Packet .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv7(s,p,b) implies inv7(drp2(s),p,b) .
close

--
-- QED
--


--
--                                 inv08
--

-- init
open ABP .
  :id(proofABP)
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  red inv8(init,b1,b2,b3,bs1,bs2) .
close

-- snd1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(snd1(s),b1,b2,b3,bs1,bs2) .
close

-- rec1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(rec1(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs10 = bs1,b1,b2,bs2 .
  red inv8(s,b1,b2,b3,(b10,bs1),bs2) implies
      (inv8(s,b1,b2,b3,bs1,bs2) implies inv8(rec1(s),b1,b2,b3,bs1,bs2)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (bs10 = bs1,b1,b2,bs2) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(rec1(s),b1,b2,b3,bs1,bs2) .
close

-- snd2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = bs1,b1 .
  eq rb(s) = b2 .
  eq bs2 = e .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(snd2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = bs1,b1 .
  eq rb(s) = b2 .
  eq bs2 = b10,bs10 .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(snd2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = bs1,b1 .
  eq (rb(s) = b2) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(snd2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (ac(s) = bs1,b1) = false .
  eq bs2 = e .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(snd2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (ac(s) = bs1,b1) = false .
  eq bs2 = bs10,b10 .
  eq ac(s) = bs1,b1,b2,bs10 .
  eq rb(s) = b10 .
  eq b1 = b2 .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(snd2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (ac(s) = bs1,b1) = false .
  eq bs2 = bs10,b10 .
  eq ac(s) = bs1,b1,b2,bs10 .
  eq rb(s) = b10 .
  eq (b1 = b2) = false .
  eq b10 = b3 .
  red inv8(s,b1,b2,b3,bs1,bs10) implies
      (inv8(s,b1,b2,b3,bs1,bs2) implies inv8(snd2(s),b1,b2,b3,bs1,bs2)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (ac(s) = bs1,b1) = false .
  eq bs2 = bs10,b10 .
  eq ac(s) = bs1,b1,b2,bs10 .
  eq rb(s) = b10 .
  eq (b1 = b2) = false .
  eq (b10 = b3) = false .
  red inv8(s,b1,b2,b3,bs1,bs10) implies
      (inv8(s,b1,b2,b3,bs1,bs2) implies inv8(snd2(s),b1,b2,b3,bs1,bs2)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (ac(s) = bs1,b1) = false .
  eq bs2 = bs10,b10 .
  eq ac(s) = bs1,b1,b2,bs10 .
  eq (rb(s) = b10) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(snd2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (ac(s) = bs1,b1) = false .
  eq bs2 = bs10,b10 .
  eq (ac(s) = bs1,b1,b2,bs10) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(snd2(s),b1,b2,b3,bs1,bs2) .
close

-- rec2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(rec2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq ac(s) = bs1,b1,b2,bs2 .
  eq b1 = b10 .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(rec2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq ac(s) = bs1,b1,b2,bs2 .
  eq (b1 = b10) = false .
  red inv10(s,b1) implies inv11(s,b10,p10) implies
      (inv8(s,b1,b2,b3,bs1,bs2) implies inv8(rec2(s),b1,b2,b3,bs1,bs2)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq (ac(s) = bs1,b1,b2,bs2) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(rec2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (rb(s) = b10) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(rec2(s),b1,b2,b3,bs1,bs2) .
close

-- dup1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(dup1(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(dup1(s),b1,b2,b3,bs1,bs2) .
close

-- drp1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(drp1(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(drp1(s),b1,b2,b3,bs1,bs2) .
close

-- dup2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(dup2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = e .
  eq b1 = b10 .
  eq b2 = b10 .
  eq bs2 = bs10 .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(dup2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = e .
  eq b1 = b10 .
  eq b2 = b10 .
  eq (bs2 = bs10) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(dup2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = e .
  eq b1 = b10 .
  eq (b2 = b10) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(dup2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = e .
  eq (b1 = b10) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(dup2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = b20,bs20 .
  eq b20 = b10 .
  eq bs20,b1,b2,bs2 = b10,bs10 .
  red inv8(s,b1,b2,b3,bs20,bs2) implies
      (inv8(s,b1,b2,b3,bs1,bs2) implies inv8(dup2(s),b1,b2,b3,bs1,bs2)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = b20,bs20 .
  eq b20 = b10 .
  eq (bs20,b1,b2,bs2 = b10,bs10) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(dup2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = b20,bs20 .
  eq (b20 = b10) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(dup2(s),b1,b2,b3,bs1,bs2) .
close

-- drp2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(drp2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = e .
  eq bs10 = b1,b2,bs2 .
  red inv8(s,b1,b2,b3,b10,bs2) implies
      (inv8(s,b1,b2,b3,bs1,bs2) implies inv8(drp2(s),b1,b2,b3,bs1,bs2)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = e .
  eq (bs10 = b1,b2,bs2) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(drp2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = b20,bs20 .
  eq bs10 = b20,bs20,b1,b2,bs2 .
  eq b1 = b2 .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(drp2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = b20,bs20 .
  eq bs10 = b20,bs20,b1,b2,bs2 .
  eq (b1 = b2) = false .
  eq rb(s) = b2 .
  eq b3 = b2 .
  eq b2 \in bs2 = true .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(drp2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = b20,bs20 .
  eq bs10 = b20,bs20,b1,b2,bs2 .
  eq (b1 = b2) = false .
  eq rb(s) = b2 .
  eq b3 = b2 .
  eq b2 \in bs2 = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(drp2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = b20,bs20 .
  eq bs10 = b20,bs20,b1,b2,bs2 .
  eq (b1 = b2) = false .
  eq rb(s) = b2 .
  eq (b3 = b2) = false .
  eq b3 \in bs2 = true .
  red inv8(s,b1,b2,b3,(b10,bs1),bs2) implies
      (inv8(s,b1,b2,b3,bs1,bs2) implies inv8(drp2(s),b1,b2,b3,bs1,bs2)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = b20,bs20 .
  eq bs10 = b20,bs20,b1,b2,bs2 .
  eq (b1 = b2) = false .
  eq rb(s) = b2 .
  eq (b3 = b2) = false .
  eq b3 \in bs2 = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(drp2(s),b1,b2,b3,bs1,bs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = b20,bs20 .
  eq bs10 = b20,bs20,b1,b2,bs2 .
  eq (b1 = b2) = false .
  eq (rb(s) = b2) = false .
  red inv8(s,b1,b2,b3,(b10,bs1),bs2) implies
      (inv8(s,b1,b2,b3,bs1,bs2) implies inv8(drp2(s),b1,b2,b3,bs1,bs2)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops bs1 bs2 : -> BSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  op b20 : -> Bit .
  op bs20 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq bs1 = b20,bs20 .
  eq (bs10 = b20,bs20,b1,b2,bs2) = false .
  red inv8(s,b1,b2,b3,bs1,bs2) implies inv8(drp2(s),b1,b2,b3,bs1,bs2) .
close

--
-- QED
--


--
--                                 inv09
--

-- init
open ABP .
  :id(proofABP)
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  red inv9(init,b1,b2,b3,p1,p2,p3,prs1,prs2) .
close

-- snd1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = prs1,< p1,b1 > .
  eq sb(s) = b2 .
  eq p2s(s) = p2 .
  eq prs2 = e .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(snd1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op p10 : -> Packet .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = prs1,< p1,b1 > .
  eq sb(s) = b2 .
  eq p2s(s) = p2 .
  eq prs2 = < p10,b10 >,prs10 .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(snd1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op p10 : -> Packet .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = prs1,< p1,b1 > .
  eq sb(s) = b2 .
  eq (p2s(s) = p2) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(snd1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op p10 : -> Packet .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = prs1,< p1,b1 > .
  eq (sb(s) = b2) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(snd1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (dc(s) = prs1,< p1,b1 >) = false .
  eq prs2 = e .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(snd1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op p10 : -> Packet .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (dc(s) = prs1,< p1,b1 >) = false .
  eq prs2 = prs10,< p10,b10 > .
  eq dc(s) = prs1,< p1,b1 >,< p2,b2 >,prs10 .
  eq < p1,b1 > = < p2,b2 > .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(snd1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op p10 : -> Packet .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (dc(s) = prs1,< p1,b1 >) = false .
  eq prs2 = prs10,< p10,b10 > .
  eq dc(s) = prs1,< p1,b1 >,< p2,b2 >,prs10 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq < p2s(s),sb(s) > = < p10,b10 > .
  eq < p10,b10 > = < p3,b3 > .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs10)
      implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(snd1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op p10 : -> Packet .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (dc(s) = prs1,< p1,b1 >) = false .
  eq prs2 = prs10,< p10,b10 > .
  eq dc(s) = prs1,< p1,b1 >,< p2,b2 >,prs10 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq < p2s(s),sb(s) > = < p10,b10 > .
  eq (< p10,b10 > = < p3,b3 >) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs10)
      implies (inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(snd1(s),b1,b2,b3,p1,p2,p3,prs1,prs2)) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op p10 : -> Packet .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (dc(s) = prs1,< p1,b1 >) = false .
  eq prs2 = prs10,< p10,b10 > .
  eq dc(s) = prs1,< p1,b1 >,< p2,b2 >,prs10 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq (< p2s(s),sb(s) > = < p10,b10 >) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(snd1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op p10 : -> Packet .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (dc(s) = prs1,< p1,b1 >) = false .
  eq prs2 = prs10,< p10,b10 > .
  eq (dc(s) = prs1,< p1,b1 >,< p2,b2 >,prs10) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(snd1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close

-- rec1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq sb(s) = b10 .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq dc(s) = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq p1 = p2s(s) .
  eq b1 = sb(s) .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq dc(s) = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq p1 = p2s(s) .
  eq (b1 = sb(s)) = false .
  eq rb(s) = b10 .
  red inv11(s,b1,p1)
      implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq dc(s) = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq p1 = p2s(s) .
  eq (b1 = sb(s)) = false .
  eq (rb(s) = b10) = false .
  red inv10(s,b10) implies inv11(s,b1,p1)
      implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq dc(s) = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq (p1 = p2s(s)) = false .
  eq rb(s) = b10 .
  red inv11(s,b1,p1)
      implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq dc(s) = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq (p1 = p2s(s)) = false .
  eq (rb(s) = b10) = false .
  red inv10(s,b10) implies inv11(s,b1,p1)
      implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq (dc(s) = prs1,< p1,b1 >,< p2,b2 >,prs2) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close

-- snd2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(snd2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close

-- rec2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq < p1,b1 > = < p2,b2 > .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq < p3,b3 > = < p2,b2 > .
  eq < p2,b2 > \in prs2 = true .
  eq < p2s(s),sb(s) > = < p2,b2 > .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq < p3,b3 > = < p2,b2 > .
  eq < p2,b2 > \in prs2 = true .
  eq (< p2s(s),sb(s) > = < p2,b2 >) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,(< p10,b10 >,prs1),prs2)
     implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq < p3,b3 > = < p2,b2 > .
  eq < p2,b2 > \in prs2 = false .
  eq < p2s(s),sb(s) > = < p2,b2 > .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq < p3,b3 > = < p2,b2 > .
  eq < p2,b2 > \in prs2 = false .
  eq (< p2s(s),sb(s) > = < p2,b2 >) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,(< p10,b10 >,prs1),prs2)
     implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq (< p3,b3 > = < p2,b2 >) = false .
  eq < p3,b3 > \in prs2 = true .
  red inv9(s,b1,b2,b3,p1,p2,p3,(< p10,b10 >,prs1),prs2)
     implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq (< p3,b3 > = < p2,b2 >) = false .
  eq < p3,b3 > \in prs2 = false .
  eq < p2s(s),sb(s) > = < p2,b2 > .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs10 = prs1,< p1,b1 >,< p2,b2 >,prs2 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq (< p3,b3 > = < p2,b2 >) = false .
  eq < p3,b3 > \in prs2 = false .
  eq (< p2s(s),sb(s) > = < p2,b2 >) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,(< p10,b10 >,prs1),prs2)
     implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (prs10 = prs1,< p1,b1 >,< p2,b2 >,prs2) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(rec2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close

-- dup1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(dup1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = e .
  eq < p1,b1 > = < p10,b10 > .
  eq < p2,b2 > = < p10,b10 > .
  eq prs2 = prs10 .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(dup1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = e .
  eq < p1,b1 > = < p10,b10 > .
  eq < p2,b2 > = < p10,b10 > .
  eq (prs2 = prs10) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(dup1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = e .
  eq < p1,b1 > = < p10,b10 > .
  eq (< p2,b2 > = < p10,b10 >) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(dup1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = e .
  eq (< p1,b1 > = < p10,b10 >) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(dup1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = < p20,b20 >,prs20 .
  eq < p20,b20 > = < p10,b10 > .
  eq prs20,< p1,b1 >,< p2,b2 >,prs2 = < p10,b10 >,prs10 .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs20,prs2)
      implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(dup1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = < p20,b20 >,prs20 .
  eq < p20,b20 > = < p10,b10 > .
  eq (prs20,< p1,b1 >,< p2,b2 >,prs2 = < p10,b10 >,prs10) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(dup1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = < p20,b20 >,prs20 .
  eq (< p20,b20 > = < p10,b10 >) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(dup1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close

-- drp1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(drp1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = e .
  eq prs10 = < p1,b1 >,< p2,b2 >,prs2 .
  red inv9(s,b1,b2,b3,p1,p2,p3,< p10,b10 >,prs2)
      implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(drp1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = e .
  eq (prs10 = < p1,b1 >,< p2,b2 >,prs2) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(drp1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = < p20,b20 >,prs20 .
  eq prs10 = < p20,b20 >,prs20,< p1,b1 >,< p2,b2 >,prs2 .
  eq < p1,b1 > = < p2,b2 > .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(drp1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = < p20,b20 >,prs20 .
  eq prs10 = < p20,b20 >,prs20,< p1,b1 >,< p2,b2 >,prs2 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq < p2s(s),sb(s) > = < p2,b2 > .
  eq < p3,b3 > = < p2,b2 > .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(drp1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = < p20,b20 >,prs20 .
  eq prs10 = < p20,b20 >,prs20,< p1,b1 >,< p2,b2 >,prs2 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq < p2s(s),sb(s) > = < p2,b2 > .
  eq (< p3,b3 > = < p2,b2 >) = false .
  eq < p3,b3 > \in prs2 = true .
  red inv9(s,b1,b2,b3,p1,p2,p3,(< p10,b10 >,prs1),prs2)
      implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(drp1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = < p20,b20 >,prs20 .
  eq prs10 = < p20,b20 >,prs20,< p1,b1 >,< p2,b2 >,prs2 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq < p2s(s),sb(s) > = < p2,b2 > .
  eq (< p3,b3 > = < p2,b2 >) = false .
  eq < p3,b3 > \in prs2 = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(drp1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = < p20,b20 >,prs20 .
  eq prs10 = < p20,b20 >,prs20,< p1,b1 >,< p2,b2 >,prs2 .
  eq (< p1,b1 > = < p2,b2 >) = false .
  eq (< p2s(s),sb(s) > = < p2,b2 >) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,(< p10,b10 >,prs1),prs2)
      implies inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(drp1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  op p20 : -> Packet .
  op b20 : -> Bit .
  op prs20 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq prs1 = < p20,b20 >,prs20 .
  eq (prs10 = < p20,b20 >,prs20,< p1,b1 >,< p2,b2 >,prs2) = false .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(drp1(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close

-- dup2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(dup2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(dup2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close

-- drp2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(drp2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  ops b1 b2 b3 : -> Bit .
  ops p1 p2 p3 : -> Packet .
  ops prs1 prs2 : -> PBPSeq .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv9(s,b1,b2,b3,p1,p2,p3,prs1,prs2)
      implies inv9(drp2(s),b1,b2,b3,p1,p2,p3,prs1,prs2) .
close

--
-- QED
--


--
--                                 inv10
--

-- init
open ABP .
  :id(proofABP)
  op b : -> Bit .
  red inv10(init,b) .
close

-- snd1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  red inv10(s,b) implies inv10(snd1(s),b) .
close

-- rec1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv10(s,b) implies inv10(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq sb(s) = b .
  eq b = b10 .
  red inv10(s,b) implies inv10(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq sb(s) = b .
  eq (b = b10) = false .
  eq b \in bs10 = true .
  red inv4(s,b) implies inv10(s,b) implies inv10(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq sb(s) = b .
  eq (b = b10) = false .
  eq b \in bs10 = false .
  red inv10(s,b) implies inv10(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b) = false .
  eq sb(s) = b10 .
  red inv10(s,b) implies inv10(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b) = false .
  eq (sb(s) = b10) = false .
  eq b \in bs10 = true .
  eq rb(s) = sb(s) .
  red inv10(s,b) implies inv10(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b) = false .
  eq (sb(s) = b10) = false .
  eq b \in bs10 = true .
  eq (rb(s) = sb(s)) = false .
  red inv5(s,b) implies inv10(s,b) implies inv10(rec1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b) = false .
  eq (sb(s) = b10) = false .
  eq b \in bs10 = false .
  red inv10(s,b) implies inv10(rec1(s),b) .
close

-- snd2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq sb(s) = rb(s) .
  eq b = rb(s) .
  red inv10(s,b) implies inv10(snd2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq sb(s) = rb(s) .
  eq (b = rb(s)) = false .
  red inv10(s,b) implies inv10(snd2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (sb(s) = rb(s)) = false .
  red inv10(s,b) implies inv10(snd2(s),b) .
close

-- rec2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv10(s,b) implies inv10(rec2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq sb(s) = b10 .
  red inv10(s,b) implies inv10(rec2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq (sb(s) = b10) = false .
  red inv3(s) implies inv10(s,b) implies inv10(rec2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (rb(s) = b10) = false .
  red inv10(s,b) implies inv10(rec2(s),b) .
close

-- dup1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv10(s,b) implies inv10(dup1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv10(s,b) implies inv10(dup1(s),b) .
close

-- drp1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv10(s,b) implies inv10(drp1(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv10(s,b) implies inv10(drp1(s),b) .
close

-- dup2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv10(s,b) implies inv10(dup2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv10(s,b) implies inv10(dup2(s),b) .
close

-- drp2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv10(s,b) implies inv10(drp2(s),b) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv10(s,b) implies inv10(drp2(s),b) .
close

--
-- QED
--


--
--                                 inv11
--

-- init
open ABP .
  :id(proofABP)
  op b : -> Bit .
  op p : -> Packet .
  red inv11(init,b,p) .
close

-- snd1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq sb(s) = rb(s) .
  red inv11(s,b,p) implies inv11(snd1(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (sb(s) = rb(s)) = false .
  eq b = sb(s) .
  eq p = p2s(s) .
  red inv11(s,b,p) implies inv11(snd1(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (sb(s) = rb(s)) = false .
  eq b = sb(s) .
  eq (p = p2s(s)) = false .
  red inv11(s,b,p) implies inv11(snd1(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq (sb(s) = rb(s)) = false .
  eq (b = sb(s)) = false .
  red inv11(s,b,p) implies inv11(snd1(s),b,p) .
close

-- rec1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv11(s,b,p) implies inv11(rec1(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq sb(s) = b10 .
  eq rb(s) = b10 .
  red inv11(s,b,p) implies inv11(rec1(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq sb(s) = b10 .
  eq (rb(s) = b10) = false .
  red inv11(s,b,p) implies inv11(rec1(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq rb(s) = b10 .
  red inv11(s,b,p) implies inv11(rec1(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  eq (sb(s) = b10) = false .
  eq (rb(s) = b10) = false .
  red inv2(s) implies inv11(s,b,p) implies inv11(rec1(s),b,p) .
close

-- snd2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  red inv11(s,b,p) implies inv11(snd2(s),b,p) .
close

-- rec2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv11(s,b,p) implies inv11(rec2(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq < p,b > \in prs10 = true .
  eq sb(s) = b10 .
  eq b10 = b .
  eq p2s(s) = p .
  red inv11(s,b,p) implies inv11(rec2(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq < p,b > \in prs10 = true .
  eq sb(s) = b10 .
  eq b10 = b .
  eq (p2s(s) = p) = false .
  red inv7(s,p,b) implies inv11(s,b,p) implies inv11(rec2(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq < p,b > \in prs10 = true .
  eq sb(s) = b10 .
  eq (b10 = b) = false .
  red inv6(s,p,b) implies inv11(s,b,p) implies inv11(rec2(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq < p,b > \in prs10 = true .
  eq (sb(s) = b10) = false .
  red inv11(s,b,p) implies inv11(rec2(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq rb(s) = b10 .
  eq < p,b > \in prs10 = false .
  red inv11(s,b,p) implies inv11(rec2(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  eq (rb(s) = b10) = false .
  red inv11(s,b,p) implies inv11(rec2(s),b,p) .
close

-- dup1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv11(s,b,p) implies inv11(dup1(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv11(s,b,p) implies inv11(dup1(s),b,p) .
close

-- drp1(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = e .
  red inv11(s,b,p) implies inv11(drp1(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op p10 : -> Packet .
  op b10 : -> Bit .
  op prs10 : -> PBPSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq dc(s) = < p10,b10 >,prs10 .
  red inv11(s,b,p) implies inv11(drp1(s),b,p) .
close

-- dup2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv11(s,b,p) implies inv11(dup2(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv11(s,b,p) implies inv11(dup2(s),b,p) .
close

-- drp2(s)
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = e .
  red inv11(s,b,p) implies inv11(drp2(s),b,p) .
close
open ABP .
  :id(proofABP)
  op s : -> Sys .
  op b : -> Bit .
  op p : -> Packet .
  op b10 : -> Bit .
  op bs10 : -> BSeq .
  eq [inv1 :nonexec] : inv1(s) = true .
  eq [inv2 :nonexec] : inv2(s) = true .
  eq [inv3 :nonexec] : inv3(s) = true .
  eq [inv4 :nonexec] : inv4(s,B:Bit) = true .
  eq [inv5 :nonexec] : inv5(s,B:Bit) = true .
  eq [inv6 :nonexec] : inv6(s,P:Packet,B:Bit) = true .
  eq [inv7 :nonexec] : inv7(s,P:Packet,B:Bit) = true .
  eq [inv8 :nonexec] : inv8(s,B1:Bit,B2:Bit,B3:Bit,BS1:BSeq,BS2:BSeq) = true .
  eq [inv9 :nonexec] : inv9(s,B1:Bit,B2:Bit,B3:Bit,P1:Packet,P2:Packet,P3:Packet,PRS1:PBPSeq,PRS2:PBPSeq) = true .
  eq [inv10 :nonexec] : inv10(s,B:Bit) = true .
  eq [inv11 :nonexec] : inv11(s,B:Bit,P:Packet) = true .
  eq ac(s) = b10,bs10 .
  red inv11(s,b,p) implies inv11(drp2(s),b,p) .
close

--
-- QED
--

open ABP .
  :proof(proofABP)
close
