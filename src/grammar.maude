fmod COMMANDS is
 pr FM-OPERATOR-ATTRIBUTES .

 sort @Command@ .

 op q : -> @Command@ [ctor] .
 op load_. : @NeTokenList@ -> @Command@ [ctor] .
 op set-cores_. : @Token@ -> @Command@ [ctor] .
 op set-output_. : @Token@ -> @Command@ [ctor] .
 op set-backtrack-bound_. : @Token@ -> @Command@ [ctor] .
 op :save-proof`. : -> @Command@ [ctor] .
 op :infer-proof_. : @Token@ -> @Command@ [ctor] .
 op :generate-proof_. : @Token@ -> @Command@ [ctor] .
 op :generate-proof`. : -> @Command@ [ctor] .
 op :proven`(_`) : @Bubble@ -> @Command@ [ctor] .
 op :help`. : -> @Command@ [ctor] .
endfm


***(%

We present in this section the main modules required for dealing with CafeOBJ
specifications~\cite{cafe-report}. First, we will see how to define the syntax,
and how to parse the terms to obtain the Maude modules~\cite{maude-book}. Then,
we will show how to pretty print these terms and how to create new commands and
rules and will be added in addition to the ones already defined in Full Maude.

\subsection{Syntax\label{subsec:syntax}}

The module \verb"CafeBUBBLES" defines the sorts \verb"@CafeBubble@" for bubbles (that is,
terms that can take any form, like the lefthand side of an equation), \verb"@CafeBubble@"
for tokens (like sorts), and \verb"@NeCafeTokenList@" for nonempty lists of tokens:

{\codesize
\begin{verbatim}
%)

fmod CafeBUBBLES is
  including QID-LIST .

  sorts @CafeBubble@ @CafeToken@ @NeCafeTokenList@ .


  op CafeBubble : QidList -> @CafeBubble@ [special (id-hook Bubble (1 -1 ( ))
                            op-hook qidListSymbol (__ : QidList QidList ~> QidList)
                            op-hook qidSymbol (<Qids> : ~> Qid)
                            id-hook Exclude(eq ceq trans ctrans red assoc comm ctor cmod! cmod*
                                            var vars op ops copen cview :goal :ind set-cores
                                            :apply :imp :def :id :proof :infer :show :desc
                                            set-output :save-proof :infer-proof :generate-proof
                                            :sel :proven :help set-backtrack-bound))] .

  op CafeToken : Qid -> @CafeToken@ [special (id-hook Bubble (1 1)
                            op-hook qidSymbol (<Qids> : ~> Qid)
                            id-hook Exclude(. [] < { } ( )))] .

  op neCafeTokenList : QidList -> @NeCafeTokenList@ [special (id-hook Bubble (1 -1)
                            op-hook qidListSymbol (__ : QidList QidList ~> QidList)
                            op-hook qidSymbol (<Qids> : ~> Qid)
                            id-hook Exclude(. : { } :apply :ind :imp :def :id
                                            :proof :infer :show :desc set-cores
                                            set-output :save-proof :infer-proof
                                            :sel :generate-proof :proven copen
                                            :help set-backtrack-bound))] .
endfm

***(%
\end{verbatim}
}

The module \verb"Cafe-ATTRIBUTES" defines the possible attributes that can be used
in operators and equations:

{\codesize
\begin{verbatim}
%)

fmod Cafe-ATTRIBUTES is
  pr CafeBUBBLES .

***(%
\end{verbatim}
}

It defines the sorts \verb"@CafeAttr@" for a single attribute and
\verb"@CafeAttrList@" for lists of attributes:

{\codesize
\begin{verbatim}
%)

  sorts @CafeAttr@ @CafeAttrList@ .
  subsorts @CafeAttr@ < @CafeAttrList@ .

***(%
\end{verbatim}
}

The attributes are defined following the CafeOBJ syntax. The unary attributes
are all defined in the same way, the identity attributes require take a bubble as
argument, while the precedence attribute takes a token:

{\codesize
\begin{verbatim}
%)

  op __ : @CafeAttrList@ @CafeAttrList@ -> @CafeAttrList@ [ctor assoc] .
  ops assoc associative l-assoc r-assoc comm commutative constr nonexec :nonexec
      idem idempotent owise : -> @CafeAttr@ [ctor] .

  op id:_ : @CafeBubble@ -> @CafeAttr@ [ctor] .

  op idr:_ : @CafeBubble@ -> @CafeAttr@ [ctor] .
  op prec:_ : @CafeToken@ -> @CafeAttr@ [ctor] .

***(%
\end{verbatim}
}

Although the \verb"metadata" attribute is not currently available for CafeOBJ
specifications, it might be useful, so we support it by defining the appropriate
operator. However, it can also be defined in a comment, as explained
in~\cite{cafeOBJ2maudeUG}:

{\codesize
\begin{verbatim}
%)

  op metadata_ : @CafeToken@ -> @CafeAttr@ [ctor] .
endfm

***(%
\end{verbatim}
}

The syntax must also include the commands that we want to use for CafeOBJ specifications.
These commands are defined in the \verb"TRANSLATION-COMMANDS" module, which imports the
\verb"COMMANDS" module from Full Maude. To add new commands the user must define them
here and then specify their behavior in the module \texttt{CAFE2MAUDE-DATABASE-HANDLING}
described in Section~\ref{subsec:cafe:commands}:

{\codesize
\begin{verbatim}
%)

fmod TRANSLATION-COMMANDS is
  pr FM-OPERATOR-ATTRIBUTES .
  inc COMMANDS .

***(%
\end{verbatim}
}

We have defined three commands:
\begin{itemize}
\item
The first one will force the translation to be done without using the modifications
presented in~\cite{cafeOBJ2maudeUG}, that drop some requirements from the importations
modes and on the usage of theories to allow a wider range of CafeOBJ specifications to
be translated:

{\codesize
\begin{verbatim}
%)

  op strict`translation`on`. : -> @Command@ .

***(%
\end{verbatim}
}

\item
Analogously, the second one will allow these modifications:

{\codesize
\begin{verbatim}
%)

  op strict`translation`off`. : -> @Command@ .

***(%
\end{verbatim}
}

\item
The third one will require a CafeOBJ module to be shown:

{\codesize
\begin{verbatim}
%)

  op original`CafeOBJ`module_. : @Token@ -> @Command@ .
endfm

***(%
\end{verbatim}
}

\end{itemize}

The module \verb"CafeMETA-SIGN" defines the syntax for CafeOBJ modules:

{\codesize
\begin{verbatim}
%)

fmod CafeMETA-SIGN is
  including Cafe-ATTRIBUTES .
  pr FM-MOD-EXPR .

***(%
\end{verbatim}
}

It first defines all the required sorts, and the subsort relations between them:

{\codesize
\begin{verbatim}
%)

  sorts @CafeMODULE@ @OpenCloseEnv@ @HiddenSortDecl@ @VisibleSortDecl@ @CafeOpDecl@
        @CafeImportDecl@ @CafeType@ @CafeTypeList@ @CafeSortList@ @CafeSort@
        @BehaviorEquationDecl@ @CafeDeclList@ @CafeEqDecl@ @CafeVarDecl@
        @CafeSubSortRel@ @CafeLDeclList@ @OpenCloseDeclList@ @CafeModExp@ @CafeParameter@
        @CafeParameters@ @CafeInterface@ @CafeViewDecl@ @CafeViewDeclList@ @CafeTransDecl@
        @CafeViewId@ @CafeViewIdList@ @ExecutionDecl@ @ReqProvDecl@
        @CafeInductiveComm@ .

  subsort @CafeToken@ < @CafeSort@ < @CafeType@ .

***(%
  ...
\end{verbatim}
}

{\codesize
\begin{comment}
%)

  subsort @CafeSort@ < @CafeSortList@ .
  subsort @CafeType@ < @CafeTypeList@ .
  subsorts @CafeImportDecl@ @CafeVarDecl@ @CafeEqDecl@ @VisibleSortDecl@ @CafeOpDecl@
           @CafeTransDecl@ @ExecutionDecl@ @CafeInductiveComm@
           < @CafeLDeclList@ < @OpenCloseDeclList@ .
  subsorts @HiddenSortDecl@ @BehaviorEquationDecl@ @CafeLDeclList@
           < @CafeDeclList@ .
  subsort @ModExp@ < @CafeModExp@ . *** !!!!
  subsort @ModExp@ < @CafeViewId@ .
  subsort @CafeViewId@ < @CafeViewIdList@ .
  *** !!!! subsort @CafeToken@ < @CafeModExp@ .
  subsort @CafeParameter@ < @CafeParameters@ .
  subsort @CafeToken@  < @CafeInterface@ .
  subsort @CafeViewDecl@ < @CafeViewDeclList@ .

  op __ : @CafeDeclList@ @CafeDeclList@ -> @CafeDeclList@ [ctor assoc prec 10] .
  op __ : @CafeLDeclList@ @CafeLDeclList@ -> @CafeLDeclList@ [ctor assoc prec 10] .
  op __ : @CafeTypeList@ @CafeTypeList@ -> @CafeTypeList@ [ctor assoc prec 10] .
  op _,_ : @CafeParameters@ @CafeParameters@ -> @CafeParameters@ [ctor assoc prec 45] .
  op none : -> @CafeViewDeclList@ [ctor] .
  op __ : @CafeViewDeclList@ @CafeViewDeclList@ -> @CafeViewDeclList@ [ctor assoc id: none] .

  op _::_ : @CafeToken@ @CafeModExp@ -> @CafeParameter@ [ctor prec 5 gather (e &)] .

  op _`(_`) : @CafeToken@ @CafeParameters@ -> @CafeInterface@ [ctor] .
  op _`[_`] : @CafeToken@ @CafeToken@ -> @CafeInterface@ [ctor] .
  op _`{_|_`} : @CafeToken@ @CafeParameters@ @CafeToken@ -> @CafeInterface@ [ctor] .

***(%
\end{comment}
}

Then it defines the syntax of every possible construction in CafeOBJ. For example,
we can define the syntax for:
\begin{itemize}
\item
Hidden sorts, which receive a token and create a \verb"@HiddenSortDecl@":

{\codesize
\begin{verbatim}
%)

  op *`[_`]* : @CafeToken@ -> @HiddenSortDecl@ [ctor] .

***(%
\end{verbatim}
}

{\codesize
\begin{comment}
%)

  *** cafe module expressions !!!!
  *** op _+_ : @CafeModExp@ @CafeModExp@ -> @CafeModExp@ [ctor assoc prec 42] .
  op _`(_`) : @CafeModExp@ @CafeViewIdList@ -> @CafeModExp@ [ctor prec 40] .
  op _*`{_`} : @CafeModExp@ @CafeViewDeclList@ -> @CafeModExp@ [ctor prec 43] .

***(%
\end{comment}
}

\item
View identifiers, which can be either:
\begin{itemize}
\item
On the fly view declarations, receiving a module expression and a declaration
list:

{\codesize
\begin{verbatim}
%)

  op view`to_`{_`} : @CafeModExp@ @CafeViewDeclList@ -> @CafeViewId@ [ctor] .

***(%
\end{verbatim}
}

\item
The abbreviated version of the previous declaration, which does not require the
\verb"view to" keywords:

{\codesize
\begin{verbatim}
%)

  op _`{_`} : @CafeModExp@ @CafeViewDeclList@
              -> @CafeViewId@ [ctor prec 15] .

***(%
\end{verbatim}
}

\item
A view identifier assigned to a specific module expression:

{\codesize
\begin{verbatim}
%)

  op _<=_ : @CafeModExp@ @CafeViewId@
            -> @CafeViewId@ [ctor prec 20] .

***(%
\end{verbatim}
}

\item
Finally, lists of view identifiers are created by using the operator \verb"_,_".
Note that this operator is the one with the lower precedence, since it must not
interfer with the previous declarations:

{\codesize
\begin{verbatim}
%)

  op _,_ : @CafeViewIdList@ @CafeViewIdList@
           -> @CafeViewIdList@ [ctor assoc prec 25] .

***(%
\end{verbatim}
}

\end{itemize}

\item
Importations, including all the possible variants:

{\codesize
\begin{verbatim}
%)

  op protecting`(_`) : @CafeModExp@ -> @CafeImportDecl@ [ctor] .
  op pr`(_`) : @CafeModExp@ -> @CafeImportDecl@ [ctor] .
  op extending`(_`) : @CafeModExp@ -> @CafeImportDecl@ [ctor] .
  op ex`(_`) : @CafeModExp@ -> @CafeImportDecl@ [ctor] .
  op including`(_`) : @CafeModExp@ -> @CafeImportDecl@ [ctor] .
  op inc`(_`) : @CafeModExp@ -> @CafeImportDecl@ [ctor] .
  op using`(_`) : @CafeModExp@ -> @CafeImportDecl@ [ctor] .
  op us`(_`) : @CafeModExp@ -> @CafeImportDecl@ [ctor] .

***(%
\end{verbatim}
}

\item
Sort and subsort declarations:

{\codesize
\begin{verbatim}
%)

  op `[_`] : @CafeTypeList@ -> @VisibleSortDecl@ [ctor prec 5] .
  op `[_`] : @CafeSubSortRel@ -> @VisibleSortDecl@ [ctor prec 5] .

***(%
\end{verbatim}
}

\item
Subsort relations:

{\codesize
\begin{verbatim}
%)

  op _<_ : @CafeTypeList@ @CafeTypeList@ -> @CafeSubSortRel@ [ctor] .
  op _<_ : @CafeTypeList@ @CafeSubSortRel@ -> @CafeSubSortRel@ [ctor] .

***(%
\end{verbatim}
}

{\codesize
\begin{comment}
%)

  op var_:_. : @NeCafeTokenList@ @CafeType@ -> @CafeVarDecl@ [ctor] .
  op vars_:_. : @NeCafeTokenList@ @CafeType@ -> @CafeVarDecl@ [ctor] .

***(%
\end{comment}
}

\item
Equations. Note that the label or the possible attributes are not included
into the operator definition. Instead, we will deal with the bubble defining
the lefthand side to check whether there is a label. Similarly, we will
analyze the last bubble looking for attributes, such as \verb"nonexec":

{\codesize
\begin{verbatim}
%)

  op eq_=_. : @CafeBubble@ @CafeBubble@ -> @CafeEqDecl@ [ctor] .
  op ceq_=_if_. : @CafeBubble@ @CafeBubble@ @CafeBubble@ -> @CafeEqDecl@ [ctor] .
  op cq_=_if_. : @CafeBubble@ @CafeBubble@ @CafeBubble@ -> @CafeEqDecl@ [ctor] .

***(%
\end{verbatim}
}

\item
Transitions. Analogously to the case above, we do not declare explicitly the label
or the attributes of the transitions:

{\codesize
\begin{verbatim}
%)

  op trans_=>_. : @CafeBubble@ @CafeBubble@ -> @CafeTransDecl@ [ctor] .
  op trns_=>_. : @CafeBubble@ @CafeBubble@ -> @CafeTransDecl@ [ctor] .
  op ctrans_=>_if_. : @CafeBubble@ @CafeBubble@ @CafeBubble@
                      -> @CafeTransDecl@ [ctor] .
  op ctrns_=>_if_. : @CafeBubble@ @CafeBubble@ @CafeBubble@
                     -> @CafeTransDecl@ [ctor] .
  op btrans_=>_. : @CafeBubble@ @CafeBubble@ -> @CafeTransDecl@ [ctor] .
  op btrns_=>_. : @CafeBubble@ @CafeBubble@ -> @CafeTransDecl@ [ctor] .
  op bctrans_=>_if_. : @CafeBubble@ @CafeBubble@ @CafeBubble@
                       -> @CafeTransDecl@ [ctor] .
  op bctrns_=>_if_. : @CafeBubble@ @CafeBubble@ @CafeBubble@
                      -> @CafeTransDecl@ [ctor] .

***(%
\end{verbatim}
}

{\codesize
\begin{comment}
%)

  *** Operator definitions
  op op_:`->_`{_`}. : @NeCafeTokenList@ @CafeType@ @CafeAttrList@ -> @CafeOpDecl@ [ctor] .
  op op_:_->_`{_`}. : @NeCafeTokenList@ @CafeTypeList@ @CafeSort@ @CafeAttrList@
                      -> @CafeOpDecl@ [ctor] .
  op op_:`->_. : @NeCafeTokenList@ @CafeType@ -> @CafeOpDecl@ [ctor] .
  op op_:_->_. : @NeCafeTokenList@ @CafeTypeList@ @CafeType@ -> @CafeOpDecl@ [ctor] .
  op ops_:`->_`{_`}. : @NeCafeTokenList@ @CafeType@ @CafeAttrList@ -> @CafeOpDecl@ [ctor] .
  op ops_:_->_`{_`}. : @NeCafeTokenList@ @CafeTypeList@ @CafeType@ @CafeAttrList@
                       -> @CafeOpDecl@ [ctor] .
  op ops_:`->_. : @NeCafeTokenList@ @CafeType@ -> @CafeOpDecl@ [ctor] .
  op ops_:_->_. : @NeCafeTokenList@ @CafeTypeList@ @CafeType@  -> @CafeOpDecl@ [ctor] .

***(%
\end{comment}
}

\item
Predicates. In this case the sorts for the definition are more specific than in the
cases above (where we just used bubbles), so we distinguish whether attributes are
declared or not:

{\codesize
\begin{verbatim}
%)

  op pred_:_`{_`}. : @CafeToken@ @CafeTypeList@ @CafeAttrList@
                     -> @CafeOpDecl@ [ctor] .
  op pred_:_. : @CafeToken@ @CafeTypeList@ -> @CafeOpDecl@ [ctor] .

***(%
\end{verbatim}
}

{\codesize
\begin{comment}
%)

  ***observer declaration
  op bop_:_->_. : @CafeToken@ @CafeTypeList@ @CafeSort@  -> @CafeOpDecl@ [ctor] .
  op bops_:_->_. : @NeCafeTokenList@ @CafeTypeList@ @CafeSort@ -> @CafeOpDecl@ [ctor] .
  op bop_:_->_`{_`}. : @CafeToken@ @CafeTypeList@ @CafeSort@ @CafeAttrList@
                       -> @CafeOpDecl@ [ctor] .
  op bops_:_->_`{_`}. : @NeCafeTokenList@ @CafeTypeList@ @CafeType@ @CafeAttrList@
                        -> @CafeOpDecl@ [ctor] .
  op beq_=_. : @CafeBubble@ @CafeBubble@ -> @CafeEqDecl@ [ctor] .
  op bceq_=_if_. : @CafeBubble@ @CafeBubble@ @CafeBubble@ ->
                   @BehaviorEquationDecl@ [ctor] .
  op bcq_=_if_. : @CafeBubble@ @CafeBubble@ @CafeBubble@ ->
                  @BehaviorEquationDecl@ [ctor] .

  *** View declarations
  op vvar_:_. : @NeCafeTokenList@ @CafeType@ -> @CafeViewDecl@ [ctor] .
  op vvars_:_. : @NeCafeTokenList@ @CafeType@ -> @CafeViewDecl@ [ctor] .
  op sort_->_. : @CafeToken@ @CafeToken@ -> @CafeViewDecl@ [ctor] .
  op hsort_->_. : @CafeToken@ @CafeToken@ -> @CafeViewDecl@ [ctor] .
  op op_->_. : @CafeBubble@ @CafeBubble@ -> @CafeViewDecl@ [ctor] .
  op bop_->_. : @CafeBubble@ @CafeBubble@ -> @CafeViewDecl@ [ctor] .

  *** Reduction declarations
  op reduce_. : @CafeBubble@ -> @ExecutionDecl@ [ctor] .
  op red_. : @CafeBubble@ -> @ExecutionDecl@ [ctor] .
  op exec_. : @CafeBubble@ -> @ExecutionDecl@ [ctor] .

  *** Requires and provides
  op require_ : @NeCafeTokenList@ -> @ReqProvDecl@ [ctor] .
  op provide_ : @NeCafeTokenList@ -> @ReqProvDecl@ [ctor] .

  *** Commands for induction
  op :goal{_} : @CafeLDeclList@ -> @CafeInductiveComm@ [ctor] .
  op :def_=`:ctf{_} : @CafeToken@ @CafeEqDecl@ -> @CafeInductiveComm@ [ctor] .
  op :def_=`:ctf[_] : @CafeToken@ @CafeBubble@ -> @CafeInductiveComm@ [ctor] .
  op :def_=`:cvss[_] : @CafeToken@ @CafeBubble@ -> @CafeInductiveComm@ [ctor] .
  op :def_=`:cvvs[_] : @CafeToken@ @CafeBubble@ -> @CafeInductiveComm@ [ctor] .
  op :def_=`:cvsv[_] : @CafeToken@ @CafeBubble@ -> @CafeInductiveComm@ [ctor] .
  op :def_=`:cevss[_] : @CafeToken@ @CafeBubble@ -> @CafeInductiveComm@ [ctor] .
  op :def_=`:cvs[_] : @CafeToken@ @CafeBubble@ -> @CafeInductiveComm@ [ctor] .
  op :def_=`:csv[_] : @CafeToken@ @CafeBubble@ -> @CafeInductiveComm@ [ctor] .
  op :def_=`:csvs[_] : @CafeToken@ @CafeBubble@ -> @CafeInductiveComm@ [ctor] .

  ***(
  :cs-vss: case splitting value (eq1) and seq seq (eq2)
  :cs-vvs: case splitting value (eq1) and value seq (eq2)
  :cs-vsv: case splitting value (eq1) and seq value (eq2)
  :cs-evss: case splitting empty (eq1), value (eq2), and seq seq (eq3).
  :cs-evs: case splitting empty (eq1) and value seq (eq2).
  :cs-esv: case splitting empty (eq1) and seq value (eq2).
  :cs-esvs: case splitting empty (eq1) and seq value seq (eq2).
  )

  op :ind`on(_) : @CafeToken@ -> @CafeInductiveComm@ [ctor] .
  op :apply(_) : @NeCafeTokenList@ -> @CafeInductiveComm@ [ctor] .
  op :imp[_]. : @CafeToken@ -> @CafeInductiveComm@ [ctor] .
  op :imp[_]by{_} : @CafeToken@ @NeCafeTokenList@ -> @CafeInductiveComm@ [ctor] .
  op :sel(_) : @CafeToken@ -> @CafeInductiveComm@ [ctor] .
  op :postpone`. : -> @CafeInductiveComm@ [ctor] .
  op :show`proof`. : -> @CafeInductiveComm@ [ctor] .
  op :desc`proof`. : -> @CafeInductiveComm@ [ctor] .
  op :desc`. : -> @CafeInductiveComm@ [ctor] .

  op :id(_) : @CafeToken@ -> @CafeInductiveComm@ [ctor] .
  op :proof(_) : @CafeToken@ -> @CafeInductiveComm@ [ctor] .
  op :infer(_) : @CafeToken@ -> @CafeInductiveComm@ [ctor] .

***(%
\end{comment}
}

\item
Module and view declarations. Note that they do not have the exact syntax used
by CafeOBJ. This distinction is obtained after a pre-processing stage that makes sure
that there is no clash with the Maude syntax for modules and views:

{\codesize
\begin{verbatim}
%)

  op cmod*_`{_`} : @CafeInterface@ @CafeDeclList@ -> @CafeMODULE@ [ctor] .
  op cmod!_`{_`} : @CafeInterface@ @CafeLDeclList@ -> @CafeMODULE@ [ctor] .
  op cview_from_to_`{_`} : @CafeToken@ @CafeModExp@ @CafeModExp@
                           @CafeViewDeclList@ -> @CafeMODULE@ [ctor] .
  op cview_from_to_`{`} : @CafeToken@ @CafeModExp@ @CafeModExp@ -> @CafeMODULE@ [ctor] .

***(%
\end{verbatim}
}

\item
Open-close environment. This block is composed by a module expression and a list of
declarations, possibly including reduction commands. Note that we have introduced an
extra dot to ease the parsing; this dot will be added during the preprocessing stage,
so the user is not required to type it:

{\codesize
\begin{verbatim}
%)

  op copen_._close : @CafeModExp@ @OpenCloseDeclList@ -> @OpenCloseEnv@ [ctor] .
endfm


--------------------------------


fmod INPUT is
 pr COMMANDS .
 pr CafeMETA-SIGN .


 sort @Input@ .
 subsort @Command@ @CafeMODULE@ @OpenCloseEnv@ @ReqProvDecl@ @CafeDeclList@ < @Input@ .

 op __ : @Input@ @Input@ -> @Input@ [ctor assoc prec 10] .

endfm

fmod META-CIM-SIGN is
 including AUX-MODULE-OPS .

 op BUBBLES : -> FModule .
 op GRAMMAR : -> FModule .

 eq BUBBLES
    = (fmod 'GRAMMAR is
        including 'QID-LIST .
        sorts none .
        none
        op 'token : 'Qid -> '@Token@
             [special(
               (id-hook('Bubble, '1 '1)
                op-hook('qidSymbol, '<Qids>, nil, 'Qid)))] .
        op 'neTokenList : 'QidList -> '@NeTokenList@
             [special(
               (id-hook('Bubble, '1 '-1 '`( '`))
                op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList)
                op-hook('qidSymbol, '<Qids>, nil, 'Qid)
                id-hook('Exclude, '. ':)))] .
        op 'bubble : 'QidList -> '@Bubble@
             [special(
               (id-hook('Bubble, '1 '-1 '`( '`))
                op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList)
                op-hook('qidSymbol, '<Qids>, nil, 'Qid)
                id-hook('Exclude, 'eq 'ceq 'rl 'crl 'mb 'cmb 'sd 'csd
                                  'var 'vars 'strat 'endm
                                  'endfm 'endsm 'sorts 'subsort 'subsorts
                                  'subclass 'subclasses 'op 'ops
                                  'protecting 'pr 'including 'inc 'extending
                                  'ctor 'assoc 'comm '==)))] .
        none
        none
     endfm) .
 eq GRAMMAR = addImports(BUBBLES, (including 'INPUT .)) .
endfm