fmod GOAL is
 pr META-LEVEL .

 sort Goal .
 *** Id
 *** Sentence
 *** Is it the current one?
 *** Is it proven?
 op [_,_,_,_,_] : NatList Qid EquationSet Bool Bool -> Goal [ctor] .

 op noGoal : -> Goal [ctor] .
 op _+_ : Goal Goal -> Goal [ctor assoc id: noGoal] .

 sort ProofTree ProofTreeList .
 subsort ProofTree < ProofTreeList .

 op mtPT : -> ProofTree [ctor] .
 op __ : ProofTreeList ProofTreeList -> ProofTreeList [ctor assoc id: mtPT] .

 op |_,_,_,_| : Module Goal ProofTreeList Nat -> ProofTree [ctor] .

 var  M : Module .
 var  G : Goal .
 var  P : ProofTree .
 vars PrL PrL' : ProofTreeList .
 vars N N' : Nat .
 vars NL NL' : NatList .
 var  Q : Qid .
 var  EqS : EquationSet .
 vars CURR PRV : Bool .
 vars SR SR' : SearchRes .
 var  PO : ProofOrder .

 op getEq : Goal -> EquationSet .
 eq getEq([NL, Q, EqS, CURR, PRV]) = EqS .

 op getId : Goal -> NatList .
 eq getId([NL, Q, EqS, CURR, PRV]) = NL .

 op isProven : Goal -> Bool .
 eq isProven([NL, Q, EqS, CURR, PRV]) = PRV .

 op size : ProofTree -> Nat .
 eq size(mtPT) = 0 .
 eq size(| M, G, PrL, N |) = N .

 op size* : ProofTreeList -> Nat .
 eq size*(mtPT) = 0 .
 eq size*(| M, G, PrL, N | PrL') = N + size*(PrL') .

 sort SearchRes .
 subsort NatList < SearchRes .

 op allProven : -> SearchRes [ctor] .

 op minSR : SearchRes SearchRes -> SearchRes [comm assoc] .
 eq minSR(allProven, SR) = SR .
 eq minSR(N NL, N' NL') = if N < N'
                          then N NL
                          else N' NL'
                          fi .
 eq minSR(NL, nil) = NL .

 sort ProofOrder .
 subsort NatList < ProofOrder .
 op finished : -> ProofOrder [ctor] .
 op _y_ : ProofOrder ProofOrder -> ProofOrder [ctor assoc id: finished] .

 op pop : ProofOrder -> ProofOrder .
 eq pop(finished) = finished .
 eq pop(NL y PO) = PO .

 op fst : ProofOrder ~> NatList .
 eq fst(NL y PO) = NL .

 op getGoal : ProofTree NatList ~> Equation .
 eq getGoal(| M, G, PrL, N |, nil) = getEq(G) .
 ceq getGoal(| M, G, PrL, N |, s(N') NL) = getGoal(P, NL)
  if P := getNth(PrL, N') .

 op getNth : ProofTreeList Nat ~> ProofTree .
 ceq getNth(P PrL, 0) = P
  if P =/= mtPT .
 ceq getNth(P PrL, s(N)) = getNth(PrL, N)
  if P =/= mtPT .

 op getMod : ProofTree NatList ~> Module .
 eq getMod(| M, G, PrL, N |, nil) = M .
 ceq getMod(| M, G, PrL, N |, s(N') NL) = getMod(P, NL)
  if P := getNth(PrL, N') .
endfm

fmod MACROS is
 pr META-LEVEL .

 sorts Macro Macros MacroLabel .
 subsort Macro < Macros .

 ops cvss cvvs cvsv cevss cvs csv csvs : -> MacroLabel [ctor] .

 op #_,_-_# : Module Qid Equation -> Macro [ctor] .
 op #_,_-_# : Module Qid Term -> Macro [ctor] .
 op #_,_-_._# : Module Qid Term MacroLabel -> Macro [ctor] .

 op mtMacros : -> Macros [ctor] .
 op __ : Macros Macros -> Macros [ctor assoc comm id: mtMacros] .
endfm

