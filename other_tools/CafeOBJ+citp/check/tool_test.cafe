(cafeOBJ language .)

(goal INT |- eq p(s(0)) = 0 ;)

(goal ITN |- eq p(s(0)) = 0 ;)

(set module on .)

(mod! BASIC-INT{
  [Zero < Int]
  op 0 : -> Zero {constr}
  ops s_ p_ : Int -> Int
  eq [eq1] : s p X:Int = X:Int {nonexec metadata "asf"} .
  eq [eq2] : p s X:Int = X:Int .
  trans [tr1] : 0 => 0 .
})

(goal BASIC-INT |- eq s(X:Int) = X ; trans s(p(X:Int)) => X:Int ;)

(auto .)

(mod! FUN {
 pr(NAT)
 op F : Nat -> Nat .
 op G : Nat -> Nat .
 vars X Y : Nat .
 ceq F(X) = 5 if X <= 7 {metadata "CA-A"} .
 ceq F(X) = 1 if 8 <= X {metadata "CA-B"} .
 ceq G(Y) = 2 if Y <= 4 {metadata "CA-1"} .
 ceq G(Y) = 7 if 5 <= Y {metadata "CA-2"} .
})

(goal FUN |- eq 9 <= G(F(X:Nat))+ G(X:Nat) = true ;)

*** set the tactic to be used in the proof
(set tactic TC CA .)

*** try proving the goal with the tactic automatically
(auto .)

*** new goal
(goal FUN |- eq 6 <= F(F(X:Nat))+ G(F(Y:Nat)) + F(F(G(Z:Nat))) = true ;)

(auto .)

(mod! SEQUENCE (X :: TRIV){
 [Elt.X < Sequence]

 --- constructors
 op empty : -> Sequence {constr}
 op _`,_ : Sequence Sequence -> Sequence {constr id: (empty) assoc}
 ---
 vars E F : Elt.X .
 vars Sq Se Sn : Sequence .
 --- matching predicate Se,E,Sn := Sq
 pred match : Sequence Sequence Sequence
 eq match(empty, Se, Sn) = false .
 eq match((E,Sq),empty,Sn) = Sq ~ Sn .
 eq match((E,Sq),(F,Se),Sn) = (E == F) and match(Sq,Se,Sn) .
 --- equality predicate
 pred _~_ : Sequence Sequence
 eq Sq ~ Sq = true .
 eq E,Sq ~ F,Se = (E == F) and (Sq ~ Se) .
 --- proof rule
 ceq true = false if Sq,E,Se == empty {nonexec} . *** Not used in the Maude spec.
})

(original CafeOBJ module SEQUENCE .)

(show module SEQUENCE .)

(mod! PAIR (X :: TRIV, Y :: TRIV) {
 [Pair]
 ---
 op <_`,_> : Elt.X Elt.Y -> Pair {constr}
 op fst : Pair -> Elt.X
 op snd : Pair -> Elt.Y
 ---
 vars A : Elt.X
 vars B : Elt.Y
 ---
 eq fst(< A,B >) = A .
 eq snd(< A,B >) = B .
})

(original CafeOBJ module PAIR .)

(show module PAIR .)

(mod! PACKET {
 inc(NAT)
 [Packet]
 op pac : Nat -> Packet {constr}
})

(show module PACKET .)

(original CafeOBJ module PACKET .)

(mod! BIT {
 [Bit]
 op t : -> Bit {constr}
 op f : -> Bit {constr}
 op not_ : Bit -> Bit
 eq not f = t .
 eq not t = f .
---
 var B : Bit .
 eq not not B = B .
--- proof rule --- discharges goal1(init) ---
 ceq true = false if t = f .
})

(show module BIT .)

(original CafeOBJ module BIT .)

(view TRIV2BIT from TRIV to BIT is
 sort Elt to Bit .
endv)

(view TRIV2PACKET from TRIV to PACKET is
 sort Elt to Packet .
endv)

(mod* BIT-PACKET-PAIR {
 inc(PAIR(TRIV2BIT, TRIV2PACKET) * {sort Pair -> BPPair})
})

(original CafeOBJ module BIT-PACKET-PAIR .)

(view TRIV2BIT-PACKET-PAIR from TRIV to BIT-PACKET-PAIR is
 sort Elt to BPPair .
endv)

(mod! CHANNEL1 {
 inc(SEQUENCE(TRIV2BIT-PACKET-PAIR) * {sort Sequence -> Channel1})
})

(original CafeOBJ module CHANNEL1 .)

(show module CHANNEL1 .)

(mod! CHANNEL2 {
 inc(SEQUENCE(TRIV2BIT) * {sort Sequence -> Channel2})
})

(original CafeOBJ module CHANNEL2 .)

(show module CHANNEL2 .)

(mod! PACKET-LIST {
 inc(SEQUENCE(TRIV2PACKET) *
   {sort Sequence -> List,
    op empty -> nil})
 op mk : Nat -> List
 var N : Nat
 eq mk(0) = pac(0),nil .
 eq mk(s N) = pac(s N), mk(N) .
})

(original CafeOBJ module PACKET-LIST .)

(show module PACKET-LIST .)

q