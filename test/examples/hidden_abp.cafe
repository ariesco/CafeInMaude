mod! DATA {
  protecting(BOOL)
  [ Nat Bool < Data ]
}

mod! QUEUE(X :: TRIV) {
 [ NeQueue < Queue ]
 op nil : -> Queue
 op front : NeQueue -> Elt
 op enq : Elt Queue -> NeQueue op deq : NeQueue -> Queue
 vars D E : Elt var Q : Queue eq deq(enq(E,nil)) = nil .
 eq deq(enq(E,enq(D,Q))) = enq(E,deq(enq(D,Q))) . eq front(enq(E,nil)) = E .
 eq front(enq(E,enq(D,Q))) = front(enq(D,Q)) .
}

mod* SENDER {
 protecting(DATA)
 *[ Sender ]*
 bop bit : Sender -> Bool
 bop val : Sender -> Data
 bop in : Data Bool Sender -> Sender
 op init : -> Sender
 var D : Data
 var B : Bool
 var S : Sender

 eq bit(init) = true .
 ceq val(in(D,B,S)) = D
  if bit(S) == B . -- new data for right ack
 ceq bit(in(D,B,S)) = not bit(S)
  if bit(S) == B . -- alternates bit
 bceq in(D,B,S) = S
  if bit(S) =/= B . -- stays put for wrong ack
}

mod* RECEIVER {
 protecting(DATA)
 *[ Receiver ]*
 bop bit : Receiver -> Bool
 bop val : Receiver -> Data
 bop get : Data Bool Receiver -> Receiver

 op init : -> Receiver

 var D : Data
 var B : Bool
 var R : Receiver

 eq bit(init) = true .
 ceq val(get(D,B,R)) = D if bit(R) =/= B . -- output value
 ceq bit(get(D,B,R)) = not bit(R) if bit(R) =/= B .
 bceq get(D,B,R) = R if bit(R) == B . -- stays put for wrong bit
}

mod* ABP {
 protecting(SENDER + RECEIVER + QUEUE(DATA))
 *[ Abp ]*
 op Init : -> Abp
 op Protocol : Sender Receiver Queue Queue Queue
                -> Abp *** {coherent}
 bop In : Data Abp -> Abp
 bop Out : Abp -> Abp
 bop Val : Abp -> Data
 vars D E : Data
 var B : Bool
 var A : Abp
 var S : Sender
 var R : Receiver
 vars L L1 L2 : Queue
 beq Init = Protocol(init,init,nil,nil,nil) .
 bceq In(D,Protocol(S,R,L1,L2,enq(B,L)))
 = Protocol(in(D,front(enq(B,L)),S),R,enq(D,L1), enq(not bit(S),L2),deq(enq(B,L)))
 if bit(S) == front(enq(B,L)) .

 beq In(D,Protocol(S,R,enq(E,L1),enq(B,L2),nil))
 = Protocol(S,R,enq(E,L1),enq(B,L2),nil) .

 bceq [ 1 ] : Protocol(S,R,L1,L2,enq(B,L))
 = Protocol(S,R,L1,L2,deq(enq(B,L)))
 if bit(S) =/= front(enq(B,L)) .

 bceq Out(Protocol(S,R,enq(D,L1),enq(B,L2),L))
 = Protocol(S,get(front(enq(D,L1)),front(enq(B,L2)),R), deq(enq(D,L1)),deq(enq(B,L2)),enq(not bit(R),L))
 if bit(R) =/= front(enq(B,L2)) .
}

mod* BUF {
 [Nat]
 *[Buf]*
 op init : -> Buf
 bop in : Nat Buf -> Buf
 bop val : Buf -> Nat
 bop out : Buf -> Buf
 bop empty? : Buf -> Bool

 var N : Nat
 var B : Buf

 eq empty?(init) = true .
 ceq empty?(out(B)) = true
  if not empty?(B) .
 eq empty?(in(N,B)) = false .
 ceq val(out(in(N,B))) = N
  if empty?(B) .
 bceq in(N,B) = B
   if not empty?(B) .
 bceq out(B) = B
   if empty?(B) .
}

