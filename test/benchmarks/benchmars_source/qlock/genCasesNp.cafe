-- following module GENcasesNp describe an algorithm
-- for generating a finite set of patterns
-- by expanding alternatives indicated by (_;_)

-- non-parametrized generate cases module
mod GENcasesNp {pr(NAT)
-- values and their sequence
[Val < ValSq]
*** Adrian: Identity added
op _,_ : ValSq ValSq -> ValSq {assoc id: empSS} .
-- sequences of values indicating
-- all combinations indicated by
-- alternative notations (_;_)
[Val < VlSq]
-- alternative sequence
op _;_ : VlSq VlSq -> VlSq {assoc} .
-- sequence of ValSeq or VlSeq
[ValSq VlSq < SqSq]
op empSS : -> SqSq .
op _,_ : SqSq SqSq -> SqSq {assoc id: empSS} .
-- SqSq enclosures SqSqEn and their trees SqSqTr
[SqSqEn < SqSqTr]
op [_] : SqSq -> SqSqEn .
op _||_ : SqSqTr SqSqTr -> SqSqTr {assoc} .

-- generate all combinations of alternatives
-- indicated by (_;_) into (_||_)
eq [(SS1:SqSq,(V:Val;VS:VlSq),SS2:SqSq)]
   = [(SS1,V,SS2)] || [(SS1,VS,SS2)] .

-- indicators and their trees
[Ind < IndTr]
op $ : -> Ind .
op _|_ : IndTr IndTr -> IndTr .

-- indicator constructor;
[Info]
op i : Bool Info -> Ind {constr} .

-- make indicator (mi) using
pred v_ : ValSq .
op ii_ : ValSq -> Info .
op mi_ : ValSq -> Ind .
eq mi(VSQ:ValSq) = i(v(VSQ),ii(VSQ)) .

-- make make indicators (mmi):
-- translating a tree of SqSq (SqSqTr)
-- into a tree of indicators
op mmi_ : SqSqTr -> IndTr .
eq mmi(SST1:SqSqTr || SST2:SqSqTr)
   = (mmi SST1) | (mmi SST2) .
-- if all _;_ in SqSq disappear
-- then translate mmi to mi
eq mmi[VSQ:ValSq] = mi(VSQ) .

-- making all indicators with "true" disappear
eq i(true,II:Info) | IT:IndTr = IT .
eq IT:IndTr | i(true,II:Info) = IT .

-- for constructing terms
op t__ : Nat ValSq -> Val .
-- constructing t_ temrs
op tg__ : Nat SqSqTr -> VlSq .
eq tg(N:Nat)(SST1:SqSqTr || SST2:SqSqTr)
   = (tg(N) SST1);(tg(N) SST2) .
eq tg(N:Nat)[VSQ:ValSq] = t(N)(VSQ) .

-- checking v_ for all patterns defined by SST:SqSqTr
op check-for-all_ : SqSqTr -> IndTr .
eq check-for-all(SST:SqSqTr) = ($ | mmi(SST)) .
}

provide GENcasesNp
